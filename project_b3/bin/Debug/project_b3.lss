
bin\Debug\project_b3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  000022ec  000023a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022ec  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800308  00800308  000024a8  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000024a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  000024ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000457  00000000  00000000  000026cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ce1  00000000  00000000  00002b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001656  00000000  00000000  00005803  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001db5  00000000  00000000  00006e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00008c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  00008f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  00009453  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009de9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_13>
      38:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_14>
      3c:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_17>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_21>
      58:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__vector_22>
      5c:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_41>
      a8:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_42>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec ee       	ldi	r30, 0xEC	; 236
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 31       	cpi	r26, 0x1A	; 26
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "Header.h"



int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    init();
     132:	0e 94 ac 00 	call	0x158	; 0x158 <init>
    init_motor();
     136:	0e 94 08 0a 	call	0x1410	; 0x1410 <init_motor>
    while(1)
    {
        rechte_lijnlinks();
     13a:	0e 94 00 01 	call	0x200	; 0x200 <rechte_lijnlinks>
        bocht_links();
     13e:	0e 94 f7 06 	call	0xdee	; 0xdee <bocht_links>
		rechte_lijnbeide();
     142:	0e 94 ee 04 	call	0x9dc	; 0x9dc <rechte_lijnbeide>
        bocht_rechts();
     146:	0e 94 56 07 	call	0xeac	; 0xeac <bocht_rechts>
		rechte_lijnbeide();
     14a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <rechte_lijnbeide>
		bocht_links();
     14e:	0e 94 f7 06 	call	0xdee	; 0xdee <bocht_links>
		rechte_lijnrechts();
     152:	0e 94 f7 02 	call	0x5ee	; 0x5ee <rechte_lijnrechts>
     156:	f1 cf       	rjmp	.-30     	; 0x13a <main+0x10>

00000158 <init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Header.h"

void init (void)
{
     158:	df 93       	push	r29
     15a:	cf 93       	push	r28
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
    DDRE |= (1 << PE3);     //pwm links 5
     160:	ad e2       	ldi	r26, 0x2D	; 45
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	ed e2       	ldi	r30, 0x2D	; 45
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	88 60       	ori	r24, 0x08	; 8
     16c:	8c 93       	st	X, r24
    DDRE |= (1 << PE4);     //pwm rechts 2
     16e:	ad e2       	ldi	r26, 0x2D	; 45
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	ed e2       	ldi	r30, 0x2D	; 45
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	80 61       	ori	r24, 0x10	; 16
     17a:	8c 93       	st	X, r24
	DDRH |= (1 << PH4);     //lampje 7
     17c:	a1 e0       	ldi	r26, 0x01	; 1
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	e1 e0       	ldi	r30, 0x01	; 1
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	80 81       	ld	r24, Z
     186:	80 61       	ori	r24, 0x10	; 16
     188:	8c 93       	st	X, r24
	DDRE |= (1 << PJ1);     //motorrichting links 14
     18a:	ad e2       	ldi	r26, 0x2D	; 45
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	ed e2       	ldi	r30, 0x2D	; 45
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	82 60       	ori	r24, 0x02	; 2
     196:	8c 93       	st	X, r24
	DDRE |= (1 << PJ0);     //motorrichting rechts 15
     198:	ad e2       	ldi	r26, 0x2D	; 45
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	ed e2       	ldi	r30, 0x2D	; 45
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	81 60       	ori	r24, 0x01	; 1
     1a4:	8c 93       	st	X, r24
    DDRA &= ~(1 << PD0);    //Nadering links 21
     1a6:	a1 e2       	ldi	r26, 0x21	; 33
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	e1 e2       	ldi	r30, 0x21	; 33
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	8e 7f       	andi	r24, 0xFE	; 254
     1b2:	8c 93       	st	X, r24
    DDRA &= ~(1 << PD1);    //Nadering rechts 20
     1b4:	a1 e2       	ldi	r26, 0x21	; 33
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	e1 e2       	ldi	r30, 0x21	; 33
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	8d 7f       	andi	r24, 0xFD	; 253
     1c0:	8c 93       	st	X, r24
	DDRL &= ~(1 << PL0);    //Ultrasoon echopin 49
     1c2:	aa e0       	ldi	r26, 0x0A	; 10
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	ea e0       	ldi	r30, 0x0A	; 10
     1c8:	f1 e0       	ldi	r31, 0x01	; 1
     1ca:	80 81       	ld	r24, Z
     1cc:	8e 7f       	andi	r24, 0xFE	; 254
     1ce:	8c 93       	st	X, r24
	DDRC |=  (1 << PC5);    //Ultrasoon voor 32
     1d0:	a7 e2       	ldi	r26, 0x27	; 39
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	e7 e2       	ldi	r30, 0x27	; 39
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	80 62       	ori	r24, 0x20	; 32
     1dc:	8c 93       	st	X, r24
	DDRF &= ~(1 << PF7);    //Ir sensor Analoog 7 links
     1de:	a0 e3       	ldi	r26, 0x30	; 48
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e0 e3       	ldi	r30, 0x30	; 48
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	8f 77       	andi	r24, 0x7F	; 127
     1ea:	8c 93       	st	X, r24
	DDRF &= ~(1 << PF6);    //Ir sensor Analoog 6 rechts
     1ec:	a0 e3       	ldi	r26, 0x30	; 48
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	e0 e3       	ldi	r30, 0x30	; 48
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	8f 7b       	andi	r24, 0xBF	; 191
     1f8:	8c 93       	st	X, r24
}
     1fa:	cf 91       	pop	r28
     1fc:	df 91       	pop	r29
     1fe:	08 95       	ret

00000200 <rechte_lijnlinks>:

void rechte_lijnlinks(void)
{
     200:	df 93       	push	r29
     202:	cf 93       	push	r28
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	ae 97       	sbiw	r28, 0x2e	; 46
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
	int vlag;
	TCNT1 = 0;
     214:	e4 e8       	ldi	r30, 0x84	; 132
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	11 82       	std	Z+1, r1	; 0x01
     21a:	10 82       	st	Z, r1
	Grote_klok = 0;
     21c:	10 92 0f 03 	sts	0x030F, r1
     220:	10 92 0e 03 	sts	0x030E, r1
     224:	d5 c1       	rjmp	.+938    	; 0x5d0 <rechte_lijnlinks+0x3d0>
    while (vlag == 1) //(ultrasoon <= 37)
    {
		if ((Ir_links > 265) && (Ir_links < 500)) //boomdectectie
     226:	80 91 10 03 	lds	r24, 0x0310
     22a:	90 91 11 03 	lds	r25, 0x0311
     22e:	21 e0       	ldi	r18, 0x01	; 1
     230:	8a 30       	cpi	r24, 0x0A	; 10
     232:	92 07       	cpc	r25, r18
     234:	08 f4       	brcc	.+2      	; 0x238 <rechte_lijnlinks+0x38>
     236:	32 c1       	rjmp	.+612    	; 0x49c <rechte_lijnlinks+0x29c>
     238:	80 91 10 03 	lds	r24, 0x0310
     23c:	90 91 11 03 	lds	r25, 0x0311
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	84 3f       	cpi	r24, 0xF4	; 244
     244:	94 07       	cpc	r25, r20
     246:	08 f0       	brcs	.+2      	; 0x24a <rechte_lijnlinks+0x4a>
     248:	29 c1       	rjmp	.+594    	; 0x49c <rechte_lijnlinks+0x29c>
		{
        if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
     24a:	e0 e2       	ldi	r30, 0x20	; 32
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	81 70       	andi	r24, 0x01	; 1
     256:	90 70       	andi	r25, 0x00	; 0
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	79 f4       	brne	.+30     	; 0x27a <rechte_lijnlinks+0x7a>
     25c:	e0 e2       	ldi	r30, 0x20	; 32
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	88 2f       	mov	r24, r24
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	82 70       	andi	r24, 0x02	; 2
     268:	90 70       	andi	r25, 0x00	; 0
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	31 f4       	brne	.+12     	; 0x27a <rechte_lijnlinks+0x7a>
            {
                motor(170,170);
     26e:	8a ea       	ldi	r24, 0xAA	; 170
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	6a ea       	ldi	r22, 0xAA	; 170
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
            }
        if (PINA &(1 << PA0))
     27a:	e0 e2       	ldi	r30, 0x20	; 32
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	81 70       	andi	r24, 0x01	; 1
     286:	90 70       	andi	r25, 0x00	; 0
     288:	88 23       	and	r24, r24
     28a:	09 f4       	brne	.+2      	; 0x28e <rechte_lijnlinks+0x8e>
     28c:	78 c0       	rjmp	.+240    	; 0x37e <rechte_lijnlinks+0x17e>
            {
                motor (170,160);
     28e:	8a ea       	ldi	r24, 0xAA	; 170
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	60 ea       	ldi	r22, 0xA0	; 160
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	a0 e2       	ldi	r26, 0x20	; 32
     2a0:	b2 e4       	ldi	r27, 0x42	; 66
     2a2:	8f a3       	std	Y+39, r24	; 0x27
     2a4:	98 a7       	std	Y+40, r25	; 0x28
     2a6:	a9 a7       	std	Y+41, r26	; 0x29
     2a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2aa:	6f a1       	ldd	r22, Y+39	; 0x27
     2ac:	78 a5       	ldd	r23, Y+40	; 0x28
     2ae:	89 a5       	ldd	r24, Y+41	; 0x29
     2b0:	9a a5       	ldd	r25, Y+42	; 0x2a
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	4a e7       	ldi	r20, 0x7A	; 122
     2b8:	55 e4       	ldi	r21, 0x45	; 69
     2ba:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     2be:	dc 01       	movw	r26, r24
     2c0:	cb 01       	movw	r24, r22
     2c2:	8b a3       	std	Y+35, r24	; 0x23
     2c4:	9c a3       	std	Y+36, r25	; 0x24
     2c6:	ad a3       	std	Y+37, r26	; 0x25
     2c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     2ca:	6b a1       	ldd	r22, Y+35	; 0x23
     2cc:	7c a1       	ldd	r23, Y+36	; 0x24
     2ce:	8d a1       	ldd	r24, Y+37	; 0x25
     2d0:	9e a1       	ldd	r25, Y+38	; 0x26
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	40 e8       	ldi	r20, 0x80	; 128
     2d8:	5f e3       	ldi	r21, 0x3F	; 63
     2da:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ltsf2>
     2de:	88 23       	and	r24, r24
     2e0:	2c f4       	brge	.+10     	; 0x2ec <rechte_lijnlinks+0xec>
		__ticks = 1;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	9a a3       	std	Y+34, r25	; 0x22
     2e8:	89 a3       	std	Y+33, r24	; 0x21
     2ea:	3f c0       	rjmp	.+126    	; 0x36a <rechte_lijnlinks+0x16a>
	else if (__tmp > 65535)
     2ec:	6b a1       	ldd	r22, Y+35	; 0x23
     2ee:	7c a1       	ldd	r23, Y+36	; 0x24
     2f0:	8d a1       	ldd	r24, Y+37	; 0x25
     2f2:	9e a1       	ldd	r25, Y+38	; 0x26
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	3f ef       	ldi	r19, 0xFF	; 255
     2f8:	4f e7       	ldi	r20, 0x7F	; 127
     2fa:	57 e4       	ldi	r21, 0x47	; 71
     2fc:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gtsf2>
     300:	18 16       	cp	r1, r24
     302:	4c f5       	brge	.+82     	; 0x356 <rechte_lijnlinks+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     304:	6f a1       	ldd	r22, Y+39	; 0x27
     306:	78 a5       	ldd	r23, Y+40	; 0x28
     308:	89 a5       	ldd	r24, Y+41	; 0x29
     30a:	9a a5       	ldd	r25, Y+42	; 0x2a
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e2       	ldi	r20, 0x20	; 32
     312:	51 e4       	ldi	r21, 0x41	; 65
     314:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	bc 01       	movw	r22, r24
     31e:	cd 01       	movw	r24, r26
     320:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     324:	dc 01       	movw	r26, r24
     326:	cb 01       	movw	r24, r22
     328:	9a a3       	std	Y+34, r25	; 0x22
     32a:	89 a3       	std	Y+33, r24	; 0x21
     32c:	0f c0       	rjmp	.+30     	; 0x34c <rechte_lijnlinks+0x14c>
     32e:	80 e9       	ldi	r24, 0x90	; 144
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	98 a3       	std	Y+32, r25	; 0x20
     334:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     336:	8f 8d       	ldd	r24, Y+31	; 0x1f
     338:	98 a1       	ldd	r25, Y+32	; 0x20
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <rechte_lijnlinks+0x13a>
     33e:	98 a3       	std	Y+32, r25	; 0x20
     340:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     342:	89 a1       	ldd	r24, Y+33	; 0x21
     344:	9a a1       	ldd	r25, Y+34	; 0x22
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	9a a3       	std	Y+34, r25	; 0x22
     34a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34c:	89 a1       	ldd	r24, Y+33	; 0x21
     34e:	9a a1       	ldd	r25, Y+34	; 0x22
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	69 f7       	brne	.-38     	; 0x32e <rechte_lijnlinks+0x12e>
     354:	14 c0       	rjmp	.+40     	; 0x37e <rechte_lijnlinks+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     356:	6b a1       	ldd	r22, Y+35	; 0x23
     358:	7c a1       	ldd	r23, Y+36	; 0x24
     35a:	8d a1       	ldd	r24, Y+37	; 0x25
     35c:	9e a1       	ldd	r25, Y+38	; 0x26
     35e:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	9a a3       	std	Y+34, r25	; 0x22
     368:	89 a3       	std	Y+33, r24	; 0x21
     36a:	89 a1       	ldd	r24, Y+33	; 0x21
     36c:	9a a1       	ldd	r25, Y+34	; 0x22
     36e:	9e 8f       	std	Y+30, r25	; 0x1e
     370:	8d 8f       	std	Y+29, r24	; 0x1d
     372:	8d 8d       	ldd	r24, Y+29	; 0x1d
     374:	9e 8d       	ldd	r25, Y+30	; 0x1e
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <rechte_lijnlinks+0x176>
     37a:	9e 8f       	std	Y+30, r25	; 0x1e
     37c:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(40);
            }
        if (PINA &(1 << PA1))
     37e:	e0 e2       	ldi	r30, 0x20	; 32
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	88 2f       	mov	r24, r24
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	82 70       	andi	r24, 0x02	; 2
     38a:	90 70       	andi	r25, 0x00	; 0
     38c:	00 97       	sbiw	r24, 0x00	; 0
     38e:	09 f4       	brne	.+2      	; 0x392 <rechte_lijnlinks+0x192>
     390:	78 c0       	rjmp	.+240    	; 0x482 <rechte_lijnlinks+0x282>
        {
                motor (160,170);
     392:	80 ea       	ldi	r24, 0xA0	; 160
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	6a ea       	ldi	r22, 0xAA	; 170
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	a0 e2       	ldi	r26, 0x20	; 32
     3a4:	b2 e4       	ldi	r27, 0x42	; 66
     3a6:	89 8f       	std	Y+25, r24	; 0x19
     3a8:	9a 8f       	std	Y+26, r25	; 0x1a
     3aa:	ab 8f       	std	Y+27, r26	; 0x1b
     3ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3ae:	69 8d       	ldd	r22, Y+25	; 0x19
     3b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	4a e7       	ldi	r20, 0x7A	; 122
     3bc:	55 e4       	ldi	r21, 0x45	; 69
     3be:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     3c2:	dc 01       	movw	r26, r24
     3c4:	cb 01       	movw	r24, r22
     3c6:	8d 8b       	std	Y+21, r24	; 0x15
     3c8:	9e 8b       	std	Y+22, r25	; 0x16
     3ca:	af 8b       	std	Y+23, r26	; 0x17
     3cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     3ce:	6d 89       	ldd	r22, Y+21	; 0x15
     3d0:	7e 89       	ldd	r23, Y+22	; 0x16
     3d2:	8f 89       	ldd	r24, Y+23	; 0x17
     3d4:	98 8d       	ldd	r25, Y+24	; 0x18
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	40 e8       	ldi	r20, 0x80	; 128
     3dc:	5f e3       	ldi	r21, 0x3F	; 63
     3de:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ltsf2>
     3e2:	88 23       	and	r24, r24
     3e4:	2c f4       	brge	.+10     	; 0x3f0 <rechte_lijnlinks+0x1f0>
		__ticks = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9c 8b       	std	Y+20, r25	; 0x14
     3ec:	8b 8b       	std	Y+19, r24	; 0x13
     3ee:	3f c0       	rjmp	.+126    	; 0x46e <rechte_lijnlinks+0x26e>
	else if (__tmp > 65535)
     3f0:	6d 89       	ldd	r22, Y+21	; 0x15
     3f2:	7e 89       	ldd	r23, Y+22	; 0x16
     3f4:	8f 89       	ldd	r24, Y+23	; 0x17
     3f6:	98 8d       	ldd	r25, Y+24	; 0x18
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	3f ef       	ldi	r19, 0xFF	; 255
     3fc:	4f e7       	ldi	r20, 0x7F	; 127
     3fe:	57 e4       	ldi	r21, 0x47	; 71
     400:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gtsf2>
     404:	18 16       	cp	r1, r24
     406:	4c f5       	brge	.+82     	; 0x45a <rechte_lijnlinks+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     408:	69 8d       	ldd	r22, Y+25	; 0x19
     40a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     40c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     40e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 e2       	ldi	r20, 0x20	; 32
     416:	51 e4       	ldi	r21, 0x41	; 65
     418:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	bc 01       	movw	r22, r24
     422:	cd 01       	movw	r24, r26
     424:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     428:	dc 01       	movw	r26, r24
     42a:	cb 01       	movw	r24, r22
     42c:	9c 8b       	std	Y+20, r25	; 0x14
     42e:	8b 8b       	std	Y+19, r24	; 0x13
     430:	0f c0       	rjmp	.+30     	; 0x450 <rechte_lijnlinks+0x250>
     432:	80 e9       	ldi	r24, 0x90	; 144
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	9a 8b       	std	Y+18, r25	; 0x12
     438:	89 8b       	std	Y+17, r24	; 0x11
     43a:	89 89       	ldd	r24, Y+17	; 0x11
     43c:	9a 89       	ldd	r25, Y+18	; 0x12
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <rechte_lijnlinks+0x23e>
     442:	9a 8b       	std	Y+18, r25	; 0x12
     444:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     446:	8b 89       	ldd	r24, Y+19	; 0x13
     448:	9c 89       	ldd	r25, Y+20	; 0x14
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	9c 8b       	std	Y+20, r25	; 0x14
     44e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     450:	8b 89       	ldd	r24, Y+19	; 0x13
     452:	9c 89       	ldd	r25, Y+20	; 0x14
     454:	00 97       	sbiw	r24, 0x00	; 0
     456:	69 f7       	brne	.-38     	; 0x432 <rechte_lijnlinks+0x232>
     458:	14 c0       	rjmp	.+40     	; 0x482 <rechte_lijnlinks+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     45a:	6d 89       	ldd	r22, Y+21	; 0x15
     45c:	7e 89       	ldd	r23, Y+22	; 0x16
     45e:	8f 89       	ldd	r24, Y+23	; 0x17
     460:	98 8d       	ldd	r25, Y+24	; 0x18
     462:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	9c 8b       	std	Y+20, r25	; 0x14
     46c:	8b 8b       	std	Y+19, r24	; 0x13
     46e:	8b 89       	ldd	r24, Y+19	; 0x13
     470:	9c 89       	ldd	r25, Y+20	; 0x14
     472:	98 8b       	std	Y+16, r25	; 0x10
     474:	8f 87       	std	Y+15, r24	; 0x0f
     476:	8f 85       	ldd	r24, Y+15	; 0x0f
     478:	98 89       	ldd	r25, Y+16	; 0x10
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <rechte_lijnlinks+0x27a>
     47e:	98 8b       	std	Y+16, r25	; 0x10
     480:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(40);
        }

		if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
     482:	80 91 0e 03 	lds	r24, 0x030E
     486:	90 91 0f 03 	lds	r25, 0x030F
     48a:	84 3b       	cpi	r24, 0xB4	; 180
     48c:	91 05       	cpc	r25, r1
     48e:	0c f4       	brge	.+2      	; 0x492 <rechte_lijnlinks+0x292>
     490:	9f c0       	rjmp	.+318    	; 0x5d0 <rechte_lijnlinks+0x3d0>
		{
			vlag = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9e a7       	std	Y+46, r25	; 0x2e
     498:	8d a7       	std	Y+45, r24	; 0x2d
     49a:	9a c0       	rjmp	.+308    	; 0x5d0 <rechte_lijnlinks+0x3d0>
		//	Grote_klok = Grote_klok - waarde;
        //}
		}
		else
		{
			int waarde = Grote_klok;
     49c:	80 91 0e 03 	lds	r24, 0x030E
     4a0:	90 91 0f 03 	lds	r25, 0x030F
     4a4:	9c a7       	std	Y+44, r25	; 0x2c
     4a6:	8b a7       	std	Y+43, r24	; 0x2b
			motor (0,0);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
			PORTH |=  (1 << PH4);
     4b4:	a2 e0       	ldi	r26, 0x02	; 2
     4b6:	b1 e0       	ldi	r27, 0x01	; 1
     4b8:	e2 e0       	ldi	r30, 0x02	; 2
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	80 81       	ld	r24, Z
     4be:	80 61       	ori	r24, 0x10	; 16
     4c0:	8c 93       	st	X, r24
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	aa ef       	ldi	r26, 0xFA	; 250
     4c8:	b3 e4       	ldi	r27, 0x43	; 67
     4ca:	8b 87       	std	Y+11, r24	; 0x0b
     4cc:	9c 87       	std	Y+12, r25	; 0x0c
     4ce:	ad 87       	std	Y+13, r26	; 0x0d
     4d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4d2:	6b 85       	ldd	r22, Y+11	; 0x0b
     4d4:	7c 85       	ldd	r23, Y+12	; 0x0c
     4d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     4d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	4a e7       	ldi	r20, 0x7A	; 122
     4e0:	55 e4       	ldi	r21, 0x45	; 69
     4e2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	8f 83       	std	Y+7, r24	; 0x07
     4ec:	98 87       	std	Y+8, r25	; 0x08
     4ee:	a9 87       	std	Y+9, r26	; 0x09
     4f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     4f2:	6f 81       	ldd	r22, Y+7	; 0x07
     4f4:	78 85       	ldd	r23, Y+8	; 0x08
     4f6:	89 85       	ldd	r24, Y+9	; 0x09
     4f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e8       	ldi	r20, 0x80	; 128
     500:	5f e3       	ldi	r21, 0x3F	; 63
     502:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ltsf2>
     506:	88 23       	and	r24, r24
     508:	2c f4       	brge	.+10     	; 0x514 <rechte_lijnlinks+0x314>
		__ticks = 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	9e 83       	std	Y+6, r25	; 0x06
     510:	8d 83       	std	Y+5, r24	; 0x05
     512:	3f c0       	rjmp	.+126    	; 0x592 <rechte_lijnlinks+0x392>
	else if (__tmp > 65535)
     514:	6f 81       	ldd	r22, Y+7	; 0x07
     516:	78 85       	ldd	r23, Y+8	; 0x08
     518:	89 85       	ldd	r24, Y+9	; 0x09
     51a:	9a 85       	ldd	r25, Y+10	; 0x0a
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	3f ef       	ldi	r19, 0xFF	; 255
     520:	4f e7       	ldi	r20, 0x7F	; 127
     522:	57 e4       	ldi	r21, 0x47	; 71
     524:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gtsf2>
     528:	18 16       	cp	r1, r24
     52a:	4c f5       	brge	.+82     	; 0x57e <rechte_lijnlinks+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     52c:	6b 85       	ldd	r22, Y+11	; 0x0b
     52e:	7c 85       	ldd	r23, Y+12	; 0x0c
     530:	8d 85       	ldd	r24, Y+13	; 0x0d
     532:	9e 85       	ldd	r25, Y+14	; 0x0e
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	bc 01       	movw	r22, r24
     546:	cd 01       	movw	r24, r26
     548:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     54c:	dc 01       	movw	r26, r24
     54e:	cb 01       	movw	r24, r22
     550:	9e 83       	std	Y+6, r25	; 0x06
     552:	8d 83       	std	Y+5, r24	; 0x05
     554:	0f c0       	rjmp	.+30     	; 0x574 <rechte_lijnlinks+0x374>
     556:	80 e9       	ldi	r24, 0x90	; 144
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	9c 83       	std	Y+4, r25	; 0x04
     55c:	8b 83       	std	Y+3, r24	; 0x03
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	9c 81       	ldd	r25, Y+4	; 0x04
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <rechte_lijnlinks+0x362>
     566:	9c 83       	std	Y+4, r25	; 0x04
     568:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     56a:	8d 81       	ldd	r24, Y+5	; 0x05
     56c:	9e 81       	ldd	r25, Y+6	; 0x06
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	9e 83       	std	Y+6, r25	; 0x06
     572:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     574:	8d 81       	ldd	r24, Y+5	; 0x05
     576:	9e 81       	ldd	r25, Y+6	; 0x06
     578:	00 97       	sbiw	r24, 0x00	; 0
     57a:	69 f7       	brne	.-38     	; 0x556 <rechte_lijnlinks+0x356>
     57c:	14 c0       	rjmp	.+40     	; 0x5a6 <rechte_lijnlinks+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     57e:	6f 81       	ldd	r22, Y+7	; 0x07
     580:	78 85       	ldd	r23, Y+8	; 0x08
     582:	89 85       	ldd	r24, Y+9	; 0x09
     584:	9a 85       	ldd	r25, Y+10	; 0x0a
     586:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	9e 83       	std	Y+6, r25	; 0x06
     590:	8d 83       	std	Y+5, r24	; 0x05
     592:	8d 81       	ldd	r24, Y+5	; 0x05
     594:	9e 81       	ldd	r25, Y+6	; 0x06
     596:	9a 83       	std	Y+2, r25	; 0x02
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <rechte_lijnlinks+0x39e>
     5a2:	9a 83       	std	Y+2, r25	; 0x02
     5a4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			PORTH &= ~(1 << PH4);
     5a6:	a2 e0       	ldi	r26, 0x02	; 2
     5a8:	b1 e0       	ldi	r27, 0x01	; 1
     5aa:	e2 e0       	ldi	r30, 0x02	; 2
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	80 81       	ld	r24, Z
     5b0:	8f 7e       	andi	r24, 0xEF	; 239
     5b2:	8c 93       	st	X, r24
			Grote_klok = Grote_klok - waarde;
     5b4:	20 91 0e 03 	lds	r18, 0x030E
     5b8:	30 91 0f 03 	lds	r19, 0x030F
     5bc:	8b a5       	ldd	r24, Y+43	; 0x2b
     5be:	9c a5       	ldd	r25, Y+44	; 0x2c
     5c0:	a9 01       	movw	r20, r18
     5c2:	48 1b       	sub	r20, r24
     5c4:	59 0b       	sbc	r21, r25
     5c6:	ca 01       	movw	r24, r20
     5c8:	90 93 0f 03 	sts	0x030F, r25
     5cc:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnlinks(void)
{
	int vlag;
	TCNT1 = 0;
	Grote_klok = 0;
    while (vlag == 1) //(ultrasoon <= 37)
     5d0:	8d a5       	ldd	r24, Y+45	; 0x2d
     5d2:	9e a5       	ldd	r25, Y+46	; 0x2e
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	91 05       	cpc	r25, r1
     5d8:	09 f4       	brne	.+2      	; 0x5dc <rechte_lijnlinks+0x3dc>
     5da:	25 ce       	rjmp	.-950    	; 0x226 <rechte_lijnlinks+0x26>
			PORTH &= ~(1 << PH4);
			Grote_klok = Grote_klok - waarde;
		}

    }
}
     5dc:	ae 96       	adiw	r28, 0x2e	; 46
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <rechte_lijnrechts>:

void rechte_lijnrechts(void)
{
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	ae 97       	sbiw	r28, 0x2e	; 46
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
	int vlag;
	TCNT1 = 0;
     602:	e4 e8       	ldi	r30, 0x84	; 132
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	11 82       	std	Z+1, r1	; 0x01
     608:	10 82       	st	Z, r1
	Grote_klok = 0;
     60a:	10 92 0f 03 	sts	0x030F, r1
     60e:	10 92 0e 03 	sts	0x030E, r1
     612:	d5 c1       	rjmp	.+938    	; 0x9be <rechte_lijnrechts+0x3d0>
    while (vlag == 1) //(ultrasoon <= 37)
    {
		if ((Ir_rechts > 265) && (Ir_rechts < 500)) //boomdectectie
     614:	80 91 0c 03 	lds	r24, 0x030C
     618:	90 91 0d 03 	lds	r25, 0x030D
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	8a 30       	cpi	r24, 0x0A	; 10
     620:	92 07       	cpc	r25, r18
     622:	08 f4       	brcc	.+2      	; 0x626 <rechte_lijnrechts+0x38>
     624:	32 c1       	rjmp	.+612    	; 0x88a <rechte_lijnrechts+0x29c>
     626:	80 91 0c 03 	lds	r24, 0x030C
     62a:	90 91 0d 03 	lds	r25, 0x030D
     62e:	41 e0       	ldi	r20, 0x01	; 1
     630:	84 3f       	cpi	r24, 0xF4	; 244
     632:	94 07       	cpc	r25, r20
     634:	08 f0       	brcs	.+2      	; 0x638 <rechte_lijnrechts+0x4a>
     636:	29 c1       	rjmp	.+594    	; 0x88a <rechte_lijnrechts+0x29c>
		{
        if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
     638:	e0 e2       	ldi	r30, 0x20	; 32
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	88 2f       	mov	r24, r24
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	81 70       	andi	r24, 0x01	; 1
     644:	90 70       	andi	r25, 0x00	; 0
     646:	00 97       	sbiw	r24, 0x00	; 0
     648:	79 f4       	brne	.+30     	; 0x668 <rechte_lijnrechts+0x7a>
     64a:	e0 e2       	ldi	r30, 0x20	; 32
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	88 2f       	mov	r24, r24
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	82 70       	andi	r24, 0x02	; 2
     656:	90 70       	andi	r25, 0x00	; 0
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	31 f4       	brne	.+12     	; 0x668 <rechte_lijnrechts+0x7a>
            {
                motor(170,170);
     65c:	8a ea       	ldi	r24, 0xAA	; 170
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	6a ea       	ldi	r22, 0xAA	; 170
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
            }
        if (PINA &(1 << PA0))
     668:	e0 e2       	ldi	r30, 0x20	; 32
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	81 70       	andi	r24, 0x01	; 1
     674:	90 70       	andi	r25, 0x00	; 0
     676:	88 23       	and	r24, r24
     678:	09 f4       	brne	.+2      	; 0x67c <rechte_lijnrechts+0x8e>
     67a:	78 c0       	rjmp	.+240    	; 0x76c <rechte_lijnrechts+0x17e>
            {
                motor (170,160);
     67c:	8a ea       	ldi	r24, 0xAA	; 170
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	60 ea       	ldi	r22, 0xA0	; 160
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	a0 e2       	ldi	r26, 0x20	; 32
     68e:	b2 e4       	ldi	r27, 0x42	; 66
     690:	8f a3       	std	Y+39, r24	; 0x27
     692:	98 a7       	std	Y+40, r25	; 0x28
     694:	a9 a7       	std	Y+41, r26	; 0x29
     696:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     698:	6f a1       	ldd	r22, Y+39	; 0x27
     69a:	78 a5       	ldd	r23, Y+40	; 0x28
     69c:	89 a5       	ldd	r24, Y+41	; 0x29
     69e:	9a a5       	ldd	r25, Y+42	; 0x2a
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	4a e7       	ldi	r20, 0x7A	; 122
     6a6:	55 e4       	ldi	r21, 0x45	; 69
     6a8:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	8b a3       	std	Y+35, r24	; 0x23
     6b2:	9c a3       	std	Y+36, r25	; 0x24
     6b4:	ad a3       	std	Y+37, r26	; 0x25
     6b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     6b8:	6b a1       	ldd	r22, Y+35	; 0x23
     6ba:	7c a1       	ldd	r23, Y+36	; 0x24
     6bc:	8d a1       	ldd	r24, Y+37	; 0x25
     6be:	9e a1       	ldd	r25, Y+38	; 0x26
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e8       	ldi	r20, 0x80	; 128
     6c6:	5f e3       	ldi	r21, 0x3F	; 63
     6c8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ltsf2>
     6cc:	88 23       	and	r24, r24
     6ce:	2c f4       	brge	.+10     	; 0x6da <rechte_lijnrechts+0xec>
		__ticks = 1;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	9a a3       	std	Y+34, r25	; 0x22
     6d6:	89 a3       	std	Y+33, r24	; 0x21
     6d8:	3f c0       	rjmp	.+126    	; 0x758 <rechte_lijnrechts+0x16a>
	else if (__tmp > 65535)
     6da:	6b a1       	ldd	r22, Y+35	; 0x23
     6dc:	7c a1       	ldd	r23, Y+36	; 0x24
     6de:	8d a1       	ldd	r24, Y+37	; 0x25
     6e0:	9e a1       	ldd	r25, Y+38	; 0x26
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	3f ef       	ldi	r19, 0xFF	; 255
     6e6:	4f e7       	ldi	r20, 0x7F	; 127
     6e8:	57 e4       	ldi	r21, 0x47	; 71
     6ea:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gtsf2>
     6ee:	18 16       	cp	r1, r24
     6f0:	4c f5       	brge	.+82     	; 0x744 <rechte_lijnrechts+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f2:	6f a1       	ldd	r22, Y+39	; 0x27
     6f4:	78 a5       	ldd	r23, Y+40	; 0x28
     6f6:	89 a5       	ldd	r24, Y+41	; 0x29
     6f8:	9a a5       	ldd	r25, Y+42	; 0x2a
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	40 e2       	ldi	r20, 0x20	; 32
     700:	51 e4       	ldi	r21, 0x41	; 65
     702:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     706:	dc 01       	movw	r26, r24
     708:	cb 01       	movw	r24, r22
     70a:	bc 01       	movw	r22, r24
     70c:	cd 01       	movw	r24, r26
     70e:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     712:	dc 01       	movw	r26, r24
     714:	cb 01       	movw	r24, r22
     716:	9a a3       	std	Y+34, r25	; 0x22
     718:	89 a3       	std	Y+33, r24	; 0x21
     71a:	0f c0       	rjmp	.+30     	; 0x73a <rechte_lijnrechts+0x14c>
     71c:	80 e9       	ldi	r24, 0x90	; 144
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	98 a3       	std	Y+32, r25	; 0x20
     722:	8f 8f       	std	Y+31, r24	; 0x1f
     724:	8f 8d       	ldd	r24, Y+31	; 0x1f
     726:	98 a1       	ldd	r25, Y+32	; 0x20
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <rechte_lijnrechts+0x13a>
     72c:	98 a3       	std	Y+32, r25	; 0x20
     72e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     730:	89 a1       	ldd	r24, Y+33	; 0x21
     732:	9a a1       	ldd	r25, Y+34	; 0x22
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	9a a3       	std	Y+34, r25	; 0x22
     738:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73a:	89 a1       	ldd	r24, Y+33	; 0x21
     73c:	9a a1       	ldd	r25, Y+34	; 0x22
     73e:	00 97       	sbiw	r24, 0x00	; 0
     740:	69 f7       	brne	.-38     	; 0x71c <rechte_lijnrechts+0x12e>
     742:	14 c0       	rjmp	.+40     	; 0x76c <rechte_lijnrechts+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     744:	6b a1       	ldd	r22, Y+35	; 0x23
     746:	7c a1       	ldd	r23, Y+36	; 0x24
     748:	8d a1       	ldd	r24, Y+37	; 0x25
     74a:	9e a1       	ldd	r25, Y+38	; 0x26
     74c:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	9a a3       	std	Y+34, r25	; 0x22
     756:	89 a3       	std	Y+33, r24	; 0x21
     758:	89 a1       	ldd	r24, Y+33	; 0x21
     75a:	9a a1       	ldd	r25, Y+34	; 0x22
     75c:	9e 8f       	std	Y+30, r25	; 0x1e
     75e:	8d 8f       	std	Y+29, r24	; 0x1d
     760:	8d 8d       	ldd	r24, Y+29	; 0x1d
     762:	9e 8d       	ldd	r25, Y+30	; 0x1e
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <rechte_lijnrechts+0x176>
     768:	9e 8f       	std	Y+30, r25	; 0x1e
     76a:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(40);
            }
        if (PINA &(1 << PA1))
     76c:	e0 e2       	ldi	r30, 0x20	; 32
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	82 70       	andi	r24, 0x02	; 2
     778:	90 70       	andi	r25, 0x00	; 0
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	09 f4       	brne	.+2      	; 0x780 <rechte_lijnrechts+0x192>
     77e:	78 c0       	rjmp	.+240    	; 0x870 <rechte_lijnrechts+0x282>
        {
                motor (160,170);
     780:	80 ea       	ldi	r24, 0xA0	; 160
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	6a ea       	ldi	r22, 0xAA	; 170
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e2       	ldi	r26, 0x20	; 32
     792:	b2 e4       	ldi	r27, 0x42	; 66
     794:	89 8f       	std	Y+25, r24	; 0x19
     796:	9a 8f       	std	Y+26, r25	; 0x1a
     798:	ab 8f       	std	Y+27, r26	; 0x1b
     79a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     79c:	69 8d       	ldd	r22, Y+25	; 0x19
     79e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	4a e7       	ldi	r20, 0x7A	; 122
     7aa:	55 e4       	ldi	r21, 0x45	; 69
     7ac:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	8d 8b       	std	Y+21, r24	; 0x15
     7b6:	9e 8b       	std	Y+22, r25	; 0x16
     7b8:	af 8b       	std	Y+23, r26	; 0x17
     7ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     7bc:	6d 89       	ldd	r22, Y+21	; 0x15
     7be:	7e 89       	ldd	r23, Y+22	; 0x16
     7c0:	8f 89       	ldd	r24, Y+23	; 0x17
     7c2:	98 8d       	ldd	r25, Y+24	; 0x18
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e8       	ldi	r20, 0x80	; 128
     7ca:	5f e3       	ldi	r21, 0x3F	; 63
     7cc:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ltsf2>
     7d0:	88 23       	and	r24, r24
     7d2:	2c f4       	brge	.+10     	; 0x7de <rechte_lijnrechts+0x1f0>
		__ticks = 1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	9c 8b       	std	Y+20, r25	; 0x14
     7da:	8b 8b       	std	Y+19, r24	; 0x13
     7dc:	3f c0       	rjmp	.+126    	; 0x85c <rechte_lijnrechts+0x26e>
	else if (__tmp > 65535)
     7de:	6d 89       	ldd	r22, Y+21	; 0x15
     7e0:	7e 89       	ldd	r23, Y+22	; 0x16
     7e2:	8f 89       	ldd	r24, Y+23	; 0x17
     7e4:	98 8d       	ldd	r25, Y+24	; 0x18
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	3f ef       	ldi	r19, 0xFF	; 255
     7ea:	4f e7       	ldi	r20, 0x7F	; 127
     7ec:	57 e4       	ldi	r21, 0x47	; 71
     7ee:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gtsf2>
     7f2:	18 16       	cp	r1, r24
     7f4:	4c f5       	brge	.+82     	; 0x848 <rechte_lijnrechts+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f6:	69 8d       	ldd	r22, Y+25	; 0x19
     7f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e2       	ldi	r20, 0x20	; 32
     804:	51 e4       	ldi	r21, 0x41	; 65
     806:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	bc 01       	movw	r22, r24
     810:	cd 01       	movw	r24, r26
     812:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	9c 8b       	std	Y+20, r25	; 0x14
     81c:	8b 8b       	std	Y+19, r24	; 0x13
     81e:	0f c0       	rjmp	.+30     	; 0x83e <rechte_lijnrechts+0x250>
     820:	80 e9       	ldi	r24, 0x90	; 144
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	9a 8b       	std	Y+18, r25	; 0x12
     826:	89 8b       	std	Y+17, r24	; 0x11
     828:	89 89       	ldd	r24, Y+17	; 0x11
     82a:	9a 89       	ldd	r25, Y+18	; 0x12
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <rechte_lijnrechts+0x23e>
     830:	9a 8b       	std	Y+18, r25	; 0x12
     832:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     834:	8b 89       	ldd	r24, Y+19	; 0x13
     836:	9c 89       	ldd	r25, Y+20	; 0x14
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	9c 8b       	std	Y+20, r25	; 0x14
     83c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     83e:	8b 89       	ldd	r24, Y+19	; 0x13
     840:	9c 89       	ldd	r25, Y+20	; 0x14
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	69 f7       	brne	.-38     	; 0x820 <rechte_lijnrechts+0x232>
     846:	14 c0       	rjmp	.+40     	; 0x870 <rechte_lijnrechts+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     848:	6d 89       	ldd	r22, Y+21	; 0x15
     84a:	7e 89       	ldd	r23, Y+22	; 0x16
     84c:	8f 89       	ldd	r24, Y+23	; 0x17
     84e:	98 8d       	ldd	r25, Y+24	; 0x18
     850:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     854:	dc 01       	movw	r26, r24
     856:	cb 01       	movw	r24, r22
     858:	9c 8b       	std	Y+20, r25	; 0x14
     85a:	8b 8b       	std	Y+19, r24	; 0x13
     85c:	8b 89       	ldd	r24, Y+19	; 0x13
     85e:	9c 89       	ldd	r25, Y+20	; 0x14
     860:	98 8b       	std	Y+16, r25	; 0x10
     862:	8f 87       	std	Y+15, r24	; 0x0f
     864:	8f 85       	ldd	r24, Y+15	; 0x0f
     866:	98 89       	ldd	r25, Y+16	; 0x10
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <rechte_lijnrechts+0x27a>
     86c:	98 8b       	std	Y+16, r25	; 0x10
     86e:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(40);
        }

		if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
     870:	80 91 0e 03 	lds	r24, 0x030E
     874:	90 91 0f 03 	lds	r25, 0x030F
     878:	84 3b       	cpi	r24, 0xB4	; 180
     87a:	91 05       	cpc	r25, r1
     87c:	0c f4       	brge	.+2      	; 0x880 <rechte_lijnrechts+0x292>
     87e:	9f c0       	rjmp	.+318    	; 0x9be <rechte_lijnrechts+0x3d0>
		{
			vlag = 1;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	9e a7       	std	Y+46, r25	; 0x2e
     886:	8d a7       	std	Y+45, r24	; 0x2d
     888:	9a c0       	rjmp	.+308    	; 0x9be <rechte_lijnrechts+0x3d0>
		//	Grote_klok = Grote_klok - waarde;
        //}
		}
		else
		{
			int waarde = Grote_klok;
     88a:	80 91 0e 03 	lds	r24, 0x030E
     88e:	90 91 0f 03 	lds	r25, 0x030F
     892:	9c a7       	std	Y+44, r25	; 0x2c
     894:	8b a7       	std	Y+43, r24	; 0x2b
			motor (0,0);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
			PORTH |=  (1 << PH4);
     8a2:	a2 e0       	ldi	r26, 0x02	; 2
     8a4:	b1 e0       	ldi	r27, 0x01	; 1
     8a6:	e2 e0       	ldi	r30, 0x02	; 2
     8a8:	f1 e0       	ldi	r31, 0x01	; 1
     8aa:	80 81       	ld	r24, Z
     8ac:	80 61       	ori	r24, 0x10	; 16
     8ae:	8c 93       	st	X, r24
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	aa ef       	ldi	r26, 0xFA	; 250
     8b6:	b3 e4       	ldi	r27, 0x43	; 67
     8b8:	8b 87       	std	Y+11, r24	; 0x0b
     8ba:	9c 87       	std	Y+12, r25	; 0x0c
     8bc:	ad 87       	std	Y+13, r26	; 0x0d
     8be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     8c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     8c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	4a e7       	ldi	r20, 0x7A	; 122
     8ce:	55 e4       	ldi	r21, 0x45	; 69
     8d0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	8f 83       	std	Y+7, r24	; 0x07
     8da:	98 87       	std	Y+8, r25	; 0x08
     8dc:	a9 87       	std	Y+9, r26	; 0x09
     8de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8e0:	6f 81       	ldd	r22, Y+7	; 0x07
     8e2:	78 85       	ldd	r23, Y+8	; 0x08
     8e4:	89 85       	ldd	r24, Y+9	; 0x09
     8e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e8       	ldi	r20, 0x80	; 128
     8ee:	5f e3       	ldi	r21, 0x3F	; 63
     8f0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ltsf2>
     8f4:	88 23       	and	r24, r24
     8f6:	2c f4       	brge	.+10     	; 0x902 <rechte_lijnrechts+0x314>
		__ticks = 1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9e 83       	std	Y+6, r25	; 0x06
     8fe:	8d 83       	std	Y+5, r24	; 0x05
     900:	3f c0       	rjmp	.+126    	; 0x980 <rechte_lijnrechts+0x392>
	else if (__tmp > 65535)
     902:	6f 81       	ldd	r22, Y+7	; 0x07
     904:	78 85       	ldd	r23, Y+8	; 0x08
     906:	89 85       	ldd	r24, Y+9	; 0x09
     908:	9a 85       	ldd	r25, Y+10	; 0x0a
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	3f ef       	ldi	r19, 0xFF	; 255
     90e:	4f e7       	ldi	r20, 0x7F	; 127
     910:	57 e4       	ldi	r21, 0x47	; 71
     912:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gtsf2>
     916:	18 16       	cp	r1, r24
     918:	4c f5       	brge	.+82     	; 0x96c <rechte_lijnrechts+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     91a:	6b 85       	ldd	r22, Y+11	; 0x0b
     91c:	7c 85       	ldd	r23, Y+12	; 0x0c
     91e:	8d 85       	ldd	r24, Y+13	; 0x0d
     920:	9e 85       	ldd	r25, Y+14	; 0x0e
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e2       	ldi	r20, 0x20	; 32
     928:	51 e4       	ldi	r21, 0x41	; 65
     92a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	bc 01       	movw	r22, r24
     934:	cd 01       	movw	r24, r26
     936:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	9e 83       	std	Y+6, r25	; 0x06
     940:	8d 83       	std	Y+5, r24	; 0x05
     942:	0f c0       	rjmp	.+30     	; 0x962 <rechte_lijnrechts+0x374>
     944:	80 e9       	ldi	r24, 0x90	; 144
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	9c 81       	ldd	r25, Y+4	; 0x04
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <rechte_lijnrechts+0x362>
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     958:	8d 81       	ldd	r24, Y+5	; 0x05
     95a:	9e 81       	ldd	r25, Y+6	; 0x06
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	9e 83       	std	Y+6, r25	; 0x06
     960:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     962:	8d 81       	ldd	r24, Y+5	; 0x05
     964:	9e 81       	ldd	r25, Y+6	; 0x06
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	69 f7       	brne	.-38     	; 0x944 <rechte_lijnrechts+0x356>
     96a:	14 c0       	rjmp	.+40     	; 0x994 <rechte_lijnrechts+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     96c:	6f 81       	ldd	r22, Y+7	; 0x07
     96e:	78 85       	ldd	r23, Y+8	; 0x08
     970:	89 85       	ldd	r24, Y+9	; 0x09
     972:	9a 85       	ldd	r25, Y+10	; 0x0a
     974:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	9e 83       	std	Y+6, r25	; 0x06
     97e:	8d 83       	std	Y+5, r24	; 0x05
     980:	8d 81       	ldd	r24, Y+5	; 0x05
     982:	9e 81       	ldd	r25, Y+6	; 0x06
     984:	9a 83       	std	Y+2, r25	; 0x02
     986:	89 83       	std	Y+1, r24	; 0x01
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	9a 81       	ldd	r25, Y+2	; 0x02
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <rechte_lijnrechts+0x39e>
     990:	9a 83       	std	Y+2, r25	; 0x02
     992:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			PORTH &= ~(1 << PH4);
     994:	a2 e0       	ldi	r26, 0x02	; 2
     996:	b1 e0       	ldi	r27, 0x01	; 1
     998:	e2 e0       	ldi	r30, 0x02	; 2
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	80 81       	ld	r24, Z
     99e:	8f 7e       	andi	r24, 0xEF	; 239
     9a0:	8c 93       	st	X, r24
			Grote_klok = Grote_klok - waarde;
     9a2:	20 91 0e 03 	lds	r18, 0x030E
     9a6:	30 91 0f 03 	lds	r19, 0x030F
     9aa:	8b a5       	ldd	r24, Y+43	; 0x2b
     9ac:	9c a5       	ldd	r25, Y+44	; 0x2c
     9ae:	a9 01       	movw	r20, r18
     9b0:	48 1b       	sub	r20, r24
     9b2:	59 0b       	sbc	r21, r25
     9b4:	ca 01       	movw	r24, r20
     9b6:	90 93 0f 03 	sts	0x030F, r25
     9ba:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnrechts(void)
{
	int vlag;
	TCNT1 = 0;
	Grote_klok = 0;
    while (vlag == 1) //(ultrasoon <= 37)
     9be:	8d a5       	ldd	r24, Y+45	; 0x2d
     9c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	91 05       	cpc	r25, r1
     9c6:	09 f4       	brne	.+2      	; 0x9ca <rechte_lijnrechts+0x3dc>
     9c8:	25 ce       	rjmp	.-950    	; 0x614 <rechte_lijnrechts+0x26>
			PORTH &= ~(1 << PH4);
			Grote_klok = Grote_klok - waarde;
		}

    }
}
     9ca:	ae 96       	adiw	r28, 0x2e	; 46
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	cf 91       	pop	r28
     9d8:	df 91       	pop	r29
     9da:	08 95       	ret

000009dc <rechte_lijnbeide>:

void rechte_lijnbeide(void)
{
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	ae 97       	sbiw	r28, 0x2e	; 46
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
	int vlag;
	TCNT1 = 0;
     9f0:	e4 e8       	ldi	r30, 0x84	; 132
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	11 82       	std	Z+1, r1	; 0x01
     9f6:	10 82       	st	Z, r1
	Grote_klok = 0;
     9f8:	10 92 0f 03 	sts	0x030F, r1
     9fc:	10 92 0e 03 	sts	0x030E, r1
     a00:	e7 c1       	rjmp	.+974    	; 0xdd0 <rechte_lijnbeide+0x3f4>
    while (vlag == 1) //(ultrasoon <= 37)
    {
		if (((Ir_links > 265) && (Ir_links < 500)) && ((Ir_rechts > 265) && (Ir_rechts < 500))) //boomdectectie
     a02:	80 91 10 03 	lds	r24, 0x0310
     a06:	90 91 11 03 	lds	r25, 0x0311
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	8a 30       	cpi	r24, 0x0A	; 10
     a0e:	92 07       	cpc	r25, r18
     a10:	08 f4       	brcc	.+2      	; 0xa14 <rechte_lijnbeide+0x38>
     a12:	44 c1       	rjmp	.+648    	; 0xc9c <rechte_lijnbeide+0x2c0>
     a14:	80 91 10 03 	lds	r24, 0x0310
     a18:	90 91 11 03 	lds	r25, 0x0311
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	84 3f       	cpi	r24, 0xF4	; 244
     a20:	94 07       	cpc	r25, r20
     a22:	08 f0       	brcs	.+2      	; 0xa26 <rechte_lijnbeide+0x4a>
     a24:	3b c1       	rjmp	.+630    	; 0xc9c <rechte_lijnbeide+0x2c0>
     a26:	80 91 0c 03 	lds	r24, 0x030C
     a2a:	90 91 0d 03 	lds	r25, 0x030D
     a2e:	51 e0       	ldi	r21, 0x01	; 1
     a30:	8a 30       	cpi	r24, 0x0A	; 10
     a32:	95 07       	cpc	r25, r21
     a34:	08 f4       	brcc	.+2      	; 0xa38 <rechte_lijnbeide+0x5c>
     a36:	32 c1       	rjmp	.+612    	; 0xc9c <rechte_lijnbeide+0x2c0>
     a38:	80 91 0c 03 	lds	r24, 0x030C
     a3c:	90 91 0d 03 	lds	r25, 0x030D
     a40:	21 e0       	ldi	r18, 0x01	; 1
     a42:	84 3f       	cpi	r24, 0xF4	; 244
     a44:	92 07       	cpc	r25, r18
     a46:	08 f0       	brcs	.+2      	; 0xa4a <rechte_lijnbeide+0x6e>
     a48:	29 c1       	rjmp	.+594    	; 0xc9c <rechte_lijnbeide+0x2c0>
		{
        if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
     a4a:	e0 e2       	ldi	r30, 0x20	; 32
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	81 70       	andi	r24, 0x01	; 1
     a56:	90 70       	andi	r25, 0x00	; 0
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	79 f4       	brne	.+30     	; 0xa7a <rechte_lijnbeide+0x9e>
     a5c:	e0 e2       	ldi	r30, 0x20	; 32
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	88 2f       	mov	r24, r24
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	82 70       	andi	r24, 0x02	; 2
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	31 f4       	brne	.+12     	; 0xa7a <rechte_lijnbeide+0x9e>
            {
                motor(170,170);
     a6e:	8a ea       	ldi	r24, 0xAA	; 170
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	6a ea       	ldi	r22, 0xAA	; 170
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
            }
        if (PINA &(1 << PA0))
     a7a:	e0 e2       	ldi	r30, 0x20	; 32
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	88 2f       	mov	r24, r24
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	81 70       	andi	r24, 0x01	; 1
     a86:	90 70       	andi	r25, 0x00	; 0
     a88:	88 23       	and	r24, r24
     a8a:	09 f4       	brne	.+2      	; 0xa8e <rechte_lijnbeide+0xb2>
     a8c:	78 c0       	rjmp	.+240    	; 0xb7e <rechte_lijnbeide+0x1a2>
            {
                motor (170,160);
     a8e:	8a ea       	ldi	r24, 0xAA	; 170
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	60 ea       	ldi	r22, 0xA0	; 160
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e2       	ldi	r26, 0x20	; 32
     aa0:	b2 e4       	ldi	r27, 0x42	; 66
     aa2:	8f a3       	std	Y+39, r24	; 0x27
     aa4:	98 a7       	std	Y+40, r25	; 0x28
     aa6:	a9 a7       	std	Y+41, r26	; 0x29
     aa8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aaa:	6f a1       	ldd	r22, Y+39	; 0x27
     aac:	78 a5       	ldd	r23, Y+40	; 0x28
     aae:	89 a5       	ldd	r24, Y+41	; 0x29
     ab0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	4a e7       	ldi	r20, 0x7A	; 122
     ab8:	55 e4       	ldi	r21, 0x45	; 69
     aba:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	8b a3       	std	Y+35, r24	; 0x23
     ac4:	9c a3       	std	Y+36, r25	; 0x24
     ac6:	ad a3       	std	Y+37, r26	; 0x25
     ac8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     aca:	6b a1       	ldd	r22, Y+35	; 0x23
     acc:	7c a1       	ldd	r23, Y+36	; 0x24
     ace:	8d a1       	ldd	r24, Y+37	; 0x25
     ad0:	9e a1       	ldd	r25, Y+38	; 0x26
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e8       	ldi	r20, 0x80	; 128
     ad8:	5f e3       	ldi	r21, 0x3F	; 63
     ada:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ltsf2>
     ade:	88 23       	and	r24, r24
     ae0:	2c f4       	brge	.+10     	; 0xaec <rechte_lijnbeide+0x110>
		__ticks = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	9a a3       	std	Y+34, r25	; 0x22
     ae8:	89 a3       	std	Y+33, r24	; 0x21
     aea:	3f c0       	rjmp	.+126    	; 0xb6a <rechte_lijnbeide+0x18e>
	else if (__tmp > 65535)
     aec:	6b a1       	ldd	r22, Y+35	; 0x23
     aee:	7c a1       	ldd	r23, Y+36	; 0x24
     af0:	8d a1       	ldd	r24, Y+37	; 0x25
     af2:	9e a1       	ldd	r25, Y+38	; 0x26
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	3f ef       	ldi	r19, 0xFF	; 255
     af8:	4f e7       	ldi	r20, 0x7F	; 127
     afa:	57 e4       	ldi	r21, 0x47	; 71
     afc:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gtsf2>
     b00:	18 16       	cp	r1, r24
     b02:	4c f5       	brge	.+82     	; 0xb56 <rechte_lijnbeide+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b04:	6f a1       	ldd	r22, Y+39	; 0x27
     b06:	78 a5       	ldd	r23, Y+40	; 0x28
     b08:	89 a5       	ldd	r24, Y+41	; 0x29
     b0a:	9a a5       	ldd	r25, Y+42	; 0x2a
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e2       	ldi	r20, 0x20	; 32
     b12:	51 e4       	ldi	r21, 0x41	; 65
     b14:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	bc 01       	movw	r22, r24
     b1e:	cd 01       	movw	r24, r26
     b20:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	9a a3       	std	Y+34, r25	; 0x22
     b2a:	89 a3       	std	Y+33, r24	; 0x21
     b2c:	0f c0       	rjmp	.+30     	; 0xb4c <rechte_lijnbeide+0x170>
     b2e:	80 e9       	ldi	r24, 0x90	; 144
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	98 a3       	std	Y+32, r25	; 0x20
     b34:	8f 8f       	std	Y+31, r24	; 0x1f
     b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b38:	98 a1       	ldd	r25, Y+32	; 0x20
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <rechte_lijnbeide+0x15e>
     b3e:	98 a3       	std	Y+32, r25	; 0x20
     b40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b42:	89 a1       	ldd	r24, Y+33	; 0x21
     b44:	9a a1       	ldd	r25, Y+34	; 0x22
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	9a a3       	std	Y+34, r25	; 0x22
     b4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b4c:	89 a1       	ldd	r24, Y+33	; 0x21
     b4e:	9a a1       	ldd	r25, Y+34	; 0x22
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	69 f7       	brne	.-38     	; 0xb2e <rechte_lijnbeide+0x152>
     b54:	14 c0       	rjmp	.+40     	; 0xb7e <rechte_lijnbeide+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b56:	6b a1       	ldd	r22, Y+35	; 0x23
     b58:	7c a1       	ldd	r23, Y+36	; 0x24
     b5a:	8d a1       	ldd	r24, Y+37	; 0x25
     b5c:	9e a1       	ldd	r25, Y+38	; 0x26
     b5e:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	9a a3       	std	Y+34, r25	; 0x22
     b68:	89 a3       	std	Y+33, r24	; 0x21
     b6a:	89 a1       	ldd	r24, Y+33	; 0x21
     b6c:	9a a1       	ldd	r25, Y+34	; 0x22
     b6e:	9e 8f       	std	Y+30, r25	; 0x1e
     b70:	8d 8f       	std	Y+29, r24	; 0x1d
     b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b74:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <rechte_lijnbeide+0x19a>
     b7a:	9e 8f       	std	Y+30, r25	; 0x1e
     b7c:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(40);
            }
        if (PINA &(1 << PA1))
     b7e:	e0 e2       	ldi	r30, 0x20	; 32
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	82 70       	andi	r24, 0x02	; 2
     b8a:	90 70       	andi	r25, 0x00	; 0
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	09 f4       	brne	.+2      	; 0xb92 <rechte_lijnbeide+0x1b6>
     b90:	78 c0       	rjmp	.+240    	; 0xc82 <rechte_lijnbeide+0x2a6>
        {
                motor (160,170);
     b92:	80 ea       	ldi	r24, 0xA0	; 160
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	6a ea       	ldi	r22, 0xAA	; 170
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e2       	ldi	r26, 0x20	; 32
     ba4:	b2 e4       	ldi	r27, 0x42	; 66
     ba6:	89 8f       	std	Y+25, r24	; 0x19
     ba8:	9a 8f       	std	Y+26, r25	; 0x1a
     baa:	ab 8f       	std	Y+27, r26	; 0x1b
     bac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bae:	69 8d       	ldd	r22, Y+25	; 0x19
     bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	4a e7       	ldi	r20, 0x7A	; 122
     bbc:	55 e4       	ldi	r21, 0x45	; 69
     bbe:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	8d 8b       	std	Y+21, r24	; 0x15
     bc8:	9e 8b       	std	Y+22, r25	; 0x16
     bca:	af 8b       	std	Y+23, r26	; 0x17
     bcc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bce:	6d 89       	ldd	r22, Y+21	; 0x15
     bd0:	7e 89       	ldd	r23, Y+22	; 0x16
     bd2:	8f 89       	ldd	r24, Y+23	; 0x17
     bd4:	98 8d       	ldd	r25, Y+24	; 0x18
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e8       	ldi	r20, 0x80	; 128
     bdc:	5f e3       	ldi	r21, 0x3F	; 63
     bde:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ltsf2>
     be2:	88 23       	and	r24, r24
     be4:	2c f4       	brge	.+10     	; 0xbf0 <rechte_lijnbeide+0x214>
		__ticks = 1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9c 8b       	std	Y+20, r25	; 0x14
     bec:	8b 8b       	std	Y+19, r24	; 0x13
     bee:	3f c0       	rjmp	.+126    	; 0xc6e <rechte_lijnbeide+0x292>
	else if (__tmp > 65535)
     bf0:	6d 89       	ldd	r22, Y+21	; 0x15
     bf2:	7e 89       	ldd	r23, Y+22	; 0x16
     bf4:	8f 89       	ldd	r24, Y+23	; 0x17
     bf6:	98 8d       	ldd	r25, Y+24	; 0x18
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	3f ef       	ldi	r19, 0xFF	; 255
     bfc:	4f e7       	ldi	r20, 0x7F	; 127
     bfe:	57 e4       	ldi	r21, 0x47	; 71
     c00:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gtsf2>
     c04:	18 16       	cp	r1, r24
     c06:	4c f5       	brge	.+82     	; 0xc5a <rechte_lijnbeide+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c08:	69 8d       	ldd	r22, Y+25	; 0x19
     c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	9c 8b       	std	Y+20, r25	; 0x14
     c2e:	8b 8b       	std	Y+19, r24	; 0x13
     c30:	0f c0       	rjmp	.+30     	; 0xc50 <rechte_lijnbeide+0x274>
     c32:	80 e9       	ldi	r24, 0x90	; 144
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	9a 8b       	std	Y+18, r25	; 0x12
     c38:	89 8b       	std	Y+17, r24	; 0x11
     c3a:	89 89       	ldd	r24, Y+17	; 0x11
     c3c:	9a 89       	ldd	r25, Y+18	; 0x12
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <rechte_lijnbeide+0x262>
     c42:	9a 8b       	std	Y+18, r25	; 0x12
     c44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c46:	8b 89       	ldd	r24, Y+19	; 0x13
     c48:	9c 89       	ldd	r25, Y+20	; 0x14
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	9c 8b       	std	Y+20, r25	; 0x14
     c4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c50:	8b 89       	ldd	r24, Y+19	; 0x13
     c52:	9c 89       	ldd	r25, Y+20	; 0x14
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	69 f7       	brne	.-38     	; 0xc32 <rechte_lijnbeide+0x256>
     c58:	14 c0       	rjmp	.+40     	; 0xc82 <rechte_lijnbeide+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5a:	6d 89       	ldd	r22, Y+21	; 0x15
     c5c:	7e 89       	ldd	r23, Y+22	; 0x16
     c5e:	8f 89       	ldd	r24, Y+23	; 0x17
     c60:	98 8d       	ldd	r25, Y+24	; 0x18
     c62:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	9c 8b       	std	Y+20, r25	; 0x14
     c6c:	8b 8b       	std	Y+19, r24	; 0x13
     c6e:	8b 89       	ldd	r24, Y+19	; 0x13
     c70:	9c 89       	ldd	r25, Y+20	; 0x14
     c72:	98 8b       	std	Y+16, r25	; 0x10
     c74:	8f 87       	std	Y+15, r24	; 0x0f
     c76:	8f 85       	ldd	r24, Y+15	; 0x0f
     c78:	98 89       	ldd	r25, Y+16	; 0x10
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <rechte_lijnbeide+0x29e>
     c7e:	98 8b       	std	Y+16, r25	; 0x10
     c80:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(40);
        }

		if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
     c82:	80 91 0e 03 	lds	r24, 0x030E
     c86:	90 91 0f 03 	lds	r25, 0x030F
     c8a:	84 3b       	cpi	r24, 0xB4	; 180
     c8c:	91 05       	cpc	r25, r1
     c8e:	0c f4       	brge	.+2      	; 0xc92 <rechte_lijnbeide+0x2b6>
     c90:	9f c0       	rjmp	.+318    	; 0xdd0 <rechte_lijnbeide+0x3f4>
		{
			vlag = 1;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	9e a7       	std	Y+46, r25	; 0x2e
     c98:	8d a7       	std	Y+45, r24	; 0x2d
     c9a:	9a c0       	rjmp	.+308    	; 0xdd0 <rechte_lijnbeide+0x3f4>
		//	Grote_klok = Grote_klok - waarde;
        //}
		}
		else
		{
			int waarde = Grote_klok;
     c9c:	80 91 0e 03 	lds	r24, 0x030E
     ca0:	90 91 0f 03 	lds	r25, 0x030F
     ca4:	9c a7       	std	Y+44, r25	; 0x2c
     ca6:	8b a7       	std	Y+43, r24	; 0x2b
			motor (0,0);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
			PORTH |=  (1 << PH4);
     cb4:	a2 e0       	ldi	r26, 0x02	; 2
     cb6:	b1 e0       	ldi	r27, 0x01	; 1
     cb8:	e2 e0       	ldi	r30, 0x02	; 2
     cba:	f1 e0       	ldi	r31, 0x01	; 1
     cbc:	80 81       	ld	r24, Z
     cbe:	80 61       	ori	r24, 0x10	; 16
     cc0:	8c 93       	st	X, r24
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	aa ef       	ldi	r26, 0xFA	; 250
     cc8:	b3 e4       	ldi	r27, 0x43	; 67
     cca:	8b 87       	std	Y+11, r24	; 0x0b
     ccc:	9c 87       	std	Y+12, r25	; 0x0c
     cce:	ad 87       	std	Y+13, r26	; 0x0d
     cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	4a e7       	ldi	r20, 0x7A	; 122
     ce0:	55 e4       	ldi	r21, 0x45	; 69
     ce2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	8f 83       	std	Y+7, r24	; 0x07
     cec:	98 87       	std	Y+8, r25	; 0x08
     cee:	a9 87       	std	Y+9, r26	; 0x09
     cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf2:	6f 81       	ldd	r22, Y+7	; 0x07
     cf4:	78 85       	ldd	r23, Y+8	; 0x08
     cf6:	89 85       	ldd	r24, Y+9	; 0x09
     cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e8       	ldi	r20, 0x80	; 128
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ltsf2>
     d06:	88 23       	and	r24, r24
     d08:	2c f4       	brge	.+10     	; 0xd14 <rechte_lijnbeide+0x338>
		__ticks = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	9e 83       	std	Y+6, r25	; 0x06
     d10:	8d 83       	std	Y+5, r24	; 0x05
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <rechte_lijnbeide+0x3b6>
	else if (__tmp > 65535)
     d14:	6f 81       	ldd	r22, Y+7	; 0x07
     d16:	78 85       	ldd	r23, Y+8	; 0x08
     d18:	89 85       	ldd	r24, Y+9	; 0x09
     d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	3f ef       	ldi	r19, 0xFF	; 255
     d20:	4f e7       	ldi	r20, 0x7F	; 127
     d22:	57 e4       	ldi	r21, 0x47	; 71
     d24:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__gtsf2>
     d28:	18 16       	cp	r1, r24
     d2a:	4c f5       	brge	.+82     	; 0xd7e <rechte_lijnbeide+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	9e 85       	ldd	r25, Y+14	; 0x0e
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e2       	ldi	r20, 0x20	; 32
     d3a:	51 e4       	ldi	r21, 0x41	; 65
     d3c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	8d 83       	std	Y+5, r24	; 0x05
     d54:	0f c0       	rjmp	.+30     	; 0xd74 <rechte_lijnbeide+0x398>
     d56:	80 e9       	ldi	r24, 0x90	; 144
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	9c 83       	std	Y+4, r25	; 0x04
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <rechte_lijnbeide+0x386>
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	9e 83       	std	Y+6, r25	; 0x06
     d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	69 f7       	brne	.-38     	; 0xd56 <rechte_lijnbeide+0x37a>
     d7c:	14 c0       	rjmp	.+40     	; 0xda6 <rechte_lijnbeide+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7e:	6f 81       	ldd	r22, Y+7	; 0x07
     d80:	78 85       	ldd	r23, Y+8	; 0x08
     d82:	89 85       	ldd	r24, Y+9	; 0x09
     d84:	9a 85       	ldd	r25, Y+10	; 0x0a
     d86:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <rechte_lijnbeide+0x3c2>
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			PORTH &= ~(1 << PH4);
     da6:	a2 e0       	ldi	r26, 0x02	; 2
     da8:	b1 e0       	ldi	r27, 0x01	; 1
     daa:	e2 e0       	ldi	r30, 0x02	; 2
     dac:	f1 e0       	ldi	r31, 0x01	; 1
     dae:	80 81       	ld	r24, Z
     db0:	8f 7e       	andi	r24, 0xEF	; 239
     db2:	8c 93       	st	X, r24
			Grote_klok = Grote_klok - waarde;
     db4:	20 91 0e 03 	lds	r18, 0x030E
     db8:	30 91 0f 03 	lds	r19, 0x030F
     dbc:	8b a5       	ldd	r24, Y+43	; 0x2b
     dbe:	9c a5       	ldd	r25, Y+44	; 0x2c
     dc0:	a9 01       	movw	r20, r18
     dc2:	48 1b       	sub	r20, r24
     dc4:	59 0b       	sbc	r21, r25
     dc6:	ca 01       	movw	r24, r20
     dc8:	90 93 0f 03 	sts	0x030F, r25
     dcc:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnbeide(void)
{
	int vlag;
	TCNT1 = 0;
	Grote_klok = 0;
    while (vlag == 1) //(ultrasoon <= 37)
     dd0:	8d a5       	ldd	r24, Y+45	; 0x2d
     dd2:	9e a5       	ldd	r25, Y+46	; 0x2e
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <rechte_lijnbeide+0x400>
     dda:	13 ce       	rjmp	.-986    	; 0xa02 <rechte_lijnbeide+0x26>
			PORTH &= ~(1 << PH4);
			Grote_klok = Grote_klok - waarde;
		}

    }
}
     ddc:	ae 96       	adiw	r28, 0x2e	; 46
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <bocht_links>:

void bocht_links (void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	0f 92       	push	r0
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
	int vlag;
	TCNT1 = 0;
     dfa:	e4 e8       	ldi	r30, 0x84	; 132
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	11 82       	std	Z+1, r1	; 0x01
     e00:	10 82       	st	Z, r1
	Grote_klok = 0;
     e02:	10 92 0f 03 	sts	0x030F, r1
     e06:	10 92 0e 03 	sts	0x030E, r1
     e0a:	45 c0       	rjmp	.+138    	; 0xe96 <bocht_links+0xa8>
	while ((vlag == 1))// && (PINA &(1 << PA0))
	{
		motor(35,170); //bocht naar rechts maken
     e0c:	83 e2       	ldi	r24, 0x23	; 35
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	6a ea       	ldi	r22, 0xAA	; 170
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
		if ((PINA &(1 << PA0)) && (Grote_klok <= 11.3)) //waarde
     e18:	e0 e2       	ldi	r30, 0x20	; 32
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	81 70       	andi	r24, 0x01	; 1
     e24:	90 70       	andi	r25, 0x00	; 0
     e26:	88 23       	and	r24, r24
     e28:	d1 f0       	breq	.+52     	; 0xe5e <bocht_links+0x70>
     e2a:	80 91 0e 03 	lds	r24, 0x030E
     e2e:	90 91 0f 03 	lds	r25, 0x030F
     e32:	aa 27       	eor	r26, r26
     e34:	97 fd       	sbrc	r25, 7
     e36:	a0 95       	com	r26
     e38:	ba 2f       	mov	r27, r26
     e3a:	bc 01       	movw	r22, r24
     e3c:	cd 01       	movw	r24, r26
     e3e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatsisf>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	bc 01       	movw	r22, r24
     e48:	cd 01       	movw	r24, r26
     e4a:	2d ec       	ldi	r18, 0xCD	; 205
     e4c:	3c ec       	ldi	r19, 0xCC	; 204
     e4e:	44 e3       	ldi	r20, 0x34	; 52
     e50:	51 e4       	ldi	r21, 0x41	; 65
     e52:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__lesf2>
     e56:	18 16       	cp	r1, r24
     e58:	14 f0       	brlt	.+4      	; 0xe5e <bocht_links+0x70>
		{
			error();
     e5a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <error>
		}
		if (Grote_klok >= 11.3)
     e5e:	80 91 0e 03 	lds	r24, 0x030E
     e62:	90 91 0f 03 	lds	r25, 0x030F
     e66:	aa 27       	eor	r26, r26
     e68:	97 fd       	sbrc	r25, 7
     e6a:	a0 95       	com	r26
     e6c:	ba 2f       	mov	r27, r26
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatsisf>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	2d ec       	ldi	r18, 0xCD	; 205
     e80:	3c ec       	ldi	r19, 0xCC	; 204
     e82:	44 e3       	ldi	r20, 0x34	; 52
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__gesf2>
     e8a:	88 23       	and	r24, r24
     e8c:	24 f0       	brlt	.+8      	; 0xe96 <bocht_links+0xa8>
		{
			vlag = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	89 83       	std	Y+1, r24	; 0x01
void bocht_links (void)
{
	int vlag;
	TCNT1 = 0;
	Grote_klok = 0;
	while ((vlag == 1))// && (PINA &(1 << PA0))
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <bocht_links+0xb4>
     ea0:	b5 cf       	rjmp	.-150    	; 0xe0c <bocht_links+0x1e>
			vlag = 1;
		}

	}

}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <bocht_rechts>:

void bocht_rechts (void)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	0f 92       	push	r0
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	int vlag;
	TCNT1 = 0;
     eb8:	e4 e8       	ldi	r30, 0x84	; 132
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	11 82       	std	Z+1, r1	; 0x01
     ebe:	10 82       	st	Z, r1
	Grote_klok = 0;
     ec0:	10 92 0f 03 	sts	0x030F, r1
     ec4:	10 92 0e 03 	sts	0x030E, r1
     ec8:	45 c0       	rjmp	.+138    	; 0xf54 <bocht_rechts+0xa8>
	while ((vlag == 1)) //(PINA &(1 << PA0)) &&
	{
		motor(170,35); //bocht naar rechts maken
     eca:	8a ea       	ldi	r24, 0xAA	; 170
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	63 e2       	ldi	r22, 0x23	; 35
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
		if ((PINA &(1 << PA0)) && (Grote_klok <= 11.3)) //waarde
     ed6:	e0 e2       	ldi	r30, 0x20	; 32
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	81 70       	andi	r24, 0x01	; 1
     ee2:	90 70       	andi	r25, 0x00	; 0
     ee4:	88 23       	and	r24, r24
     ee6:	d1 f0       	breq	.+52     	; 0xf1c <bocht_rechts+0x70>
     ee8:	80 91 0e 03 	lds	r24, 0x030E
     eec:	90 91 0f 03 	lds	r25, 0x030F
     ef0:	aa 27       	eor	r26, r26
     ef2:	97 fd       	sbrc	r25, 7
     ef4:	a0 95       	com	r26
     ef6:	ba 2f       	mov	r27, r26
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatsisf>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	2d ec       	ldi	r18, 0xCD	; 205
     f0a:	3c ec       	ldi	r19, 0xCC	; 204
     f0c:	44 e3       	ldi	r20, 0x34	; 52
     f0e:	51 e4       	ldi	r21, 0x41	; 65
     f10:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__lesf2>
     f14:	18 16       	cp	r1, r24
     f16:	14 f0       	brlt	.+4      	; 0xf1c <bocht_rechts+0x70>
		{
			error();
     f18:	0e 94 b5 07 	call	0xf6a	; 0xf6a <error>
		}
		if (Grote_klok >= 11.3)
     f1c:	80 91 0e 03 	lds	r24, 0x030E
     f20:	90 91 0f 03 	lds	r25, 0x030F
     f24:	aa 27       	eor	r26, r26
     f26:	97 fd       	sbrc	r25, 7
     f28:	a0 95       	com	r26
     f2a:	ba 2f       	mov	r27, r26
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatsisf>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	2d ec       	ldi	r18, 0xCD	; 205
     f3e:	3c ec       	ldi	r19, 0xCC	; 204
     f40:	44 e3       	ldi	r20, 0x34	; 52
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__gesf2>
     f48:	88 23       	and	r24, r24
     f4a:	24 f0       	brlt	.+8      	; 0xf54 <bocht_rechts+0xa8>
		{
			vlag = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
void bocht_rechts (void)
{
	int vlag;
	TCNT1 = 0;
	Grote_klok = 0;
	while ((vlag == 1)) //(PINA &(1 << PA0)) &&
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	91 05       	cpc	r25, r1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <bocht_rechts+0xb4>
     f5e:	b5 cf       	rjmp	.-150    	; 0xeca <bocht_rechts+0x1e>
			vlag = 1;
		}

	}

}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <error>:

void error (void) //om een probleem optelossen todat we een betere oplossing hebben of niet
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
	motor(0,0);
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	0e 94 6d 0a 	call	0x14da	; 0x14da <motor>
     f7e:	f9 cf       	rjmp	.-14     	; 0xf72 <error+0x8>

00000f80 <__vector_17>:
uint16_t waarde1;
uint16_t waarde2;
uint32_t counts;

ISR(TIMER1_COMPA_vect)
{
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	00 90 5b 00 	lds	r0, 0x005B
     f8c:	0f 92       	push	r0
     f8e:	11 24       	eor	r1, r1
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
     fa0:	e4 e8       	ldi	r30, 0x84	; 132
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	11 82       	std	Z+1, r1	; 0x01
     fa6:	10 82       	st	Z, r1
    Grote_klok++;
     fa8:	80 91 0e 03 	lds	r24, 0x030E
     fac:	90 91 0f 03 	lds	r25, 0x030F
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	90 93 0f 03 	sts	0x030F, r25
     fb6:	80 93 0e 03 	sts	0x030E, r24
}
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	ff 91       	pop	r31
     fc0:	ef 91       	pop	r30
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	0f 90       	pop	r0
     fc8:	00 92 5b 00 	sts	0x005B, r0
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_41>:

ISR (TIMER4_CAPT_vect)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	00 90 5b 00 	lds	r0, 0x005B
     fe2:	0f 92       	push	r0
     fe4:	11 24       	eor	r1, r1
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	2f 93       	push	r18
     ff0:	3f 93       	push	r19
     ff2:	4f 93       	push	r20
     ff4:	5f 93       	push	r21
     ff6:	6f 93       	push	r22
     ff8:	7f 93       	push	r23
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	af 93       	push	r26
    1000:	bf 93       	push	r27
    1002:	ef 93       	push	r30
    1004:	ff 93       	push	r31
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    if (TCCR4B & (1<<ICES4)) // On rising edge
    100e:	e1 ea       	ldi	r30, 0xA1	; 161
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	80 74       	andi	r24, 0x40	; 64
    101a:	90 70       	andi	r25, 0x00	; 0
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	81 f0       	breq	.+32     	; 0x1040 <__vector_41+0x6a>
    {
        TCCR4B &= ~(1<<ICES4); // Next time detect falling edge
    1020:	a1 ea       	ldi	r26, 0xA1	; 161
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e1 ea       	ldi	r30, 0xA1	; 161
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8f 7b       	andi	r24, 0xBF	; 191
    102c:	8c 93       	st	X, r24
        waarde1 = TCNT4; // Save current count
    102e:	e4 ea       	ldi	r30, 0xA4	; 164
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	90 93 19 03 	sts	0x0319, r25
    103a:	80 93 18 03 	sts	0x0318, r24
    103e:	50 c0       	rjmp	.+160    	; 0x10e0 <__vector_41+0x10a>
    }
    else // On falling edge
    {
        TCCR4B |= 0; // geen interrupts meer
    1040:	a1 ea       	ldi	r26, 0xA1	; 161
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e1 ea       	ldi	r30, 0xA1	; 161
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8c 93       	st	X, r24
        waarde2 = TCNT4; // Save current count
    104c:	e4 ea       	ldi	r30, 0xA4	; 164
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	90 93 13 03 	sts	0x0313, r25
    1058:	80 93 12 03 	sts	0x0312, r24
        counts = (uint32_t)waarde2 - (uint32_t)waarde1;
    105c:	80 91 12 03 	lds	r24, 0x0312
    1060:	90 91 13 03 	lds	r25, 0x0313
    1064:	9c 01       	movw	r18, r24
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	80 91 18 03 	lds	r24, 0x0318
    106e:	90 91 19 03 	lds	r25, 0x0319
    1072:	cc 01       	movw	r24, r24
    1074:	a0 e0       	ldi	r26, 0x00	; 0
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	79 01       	movw	r14, r18
    107a:	8a 01       	movw	r16, r20
    107c:	e8 1a       	sub	r14, r24
    107e:	f9 0a       	sbc	r15, r25
    1080:	0a 0b       	sbc	r16, r26
    1082:	1b 0b       	sbc	r17, r27
    1084:	d8 01       	movw	r26, r16
    1086:	c7 01       	movw	r24, r14
    1088:	80 93 14 03 	sts	0x0314, r24
    108c:	90 93 15 03 	sts	0x0315, r25
    1090:	a0 93 16 03 	sts	0x0316, r26
    1094:	b0 93 17 03 	sts	0x0317, r27
        ultrasoon = (counts/2)*0.01715; //snelheid van geluid keer de tijd die de klok vertegenwoordigd (16/8 = 2 1/2E6= 5E-7)
    1098:	80 91 14 03 	lds	r24, 0x0314
    109c:	90 91 15 03 	lds	r25, 0x0315
    10a0:	a0 91 16 03 	lds	r26, 0x0316
    10a4:	b0 91 17 03 	lds	r27, 0x0317
    10a8:	b6 95       	lsr	r27
    10aa:	a7 95       	ror	r26
    10ac:	97 95       	ror	r25
    10ae:	87 95       	ror	r24
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__floatunsisf>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	28 e2       	ldi	r18, 0x28	; 40
    10c2:	3e e7       	ldi	r19, 0x7E	; 126
    10c4:	4c e8       	ldi	r20, 0x8C	; 140
    10c6:	5c e3       	ldi	r21, 0x3C	; 60
    10c8:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	80 93 08 03 	sts	0x0308, r24
    10d4:	90 93 09 03 	sts	0x0309, r25
    10d8:	a0 93 0a 03 	sts	0x030A, r26
    10dc:	b0 93 0b 03 	sts	0x030B, r27
    }
}
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	ff 91       	pop	r31
    10e6:	ef 91       	pop	r30
    10e8:	bf 91       	pop	r27
    10ea:	af 91       	pop	r26
    10ec:	9f 91       	pop	r25
    10ee:	8f 91       	pop	r24
    10f0:	7f 91       	pop	r23
    10f2:	6f 91       	pop	r22
    10f4:	5f 91       	pop	r21
    10f6:	4f 91       	pop	r20
    10f8:	3f 91       	pop	r19
    10fa:	2f 91       	pop	r18
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	0f 90       	pop	r0
    1106:	00 92 5b 00 	sts	0x005B, r0
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

00001114 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	00 90 5b 00 	lds	r0, 0x005B
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	8f 93       	push	r24
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
    112a:	ef 93       	push	r30
    112c:	ff 93       	push	r31
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    TIMSK4 = (1 << ICIE4);
    1136:	e2 e7       	ldi	r30, 0x72	; 114
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 e2       	ldi	r24, 0x20	; 32
    113c:	80 83       	st	Z, r24
    TCCR4B |= (1 << ICES4);
    113e:	a1 ea       	ldi	r26, 0xA1	; 161
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e1 ea       	ldi	r30, 0xA1	; 161
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 64       	ori	r24, 0x40	; 64
    114a:	8c 93       	st	X, r24
}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	ff 91       	pop	r31
    1152:	ef 91       	pop	r30
    1154:	bf 91       	pop	r27
    1156:	af 91       	pop	r26
    1158:	8f 91       	pop	r24
    115a:	0f 90       	pop	r0
    115c:	00 92 5b 00 	sts	0x005B, r0
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	0f 90       	pop	r0
    1166:	1f 90       	pop	r1
    1168:	18 95       	reti

0000116a <__vector_15>:

ISR(TIMER2_OVF_vect)
{
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	00 90 5b 00 	lds	r0, 0x005B
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	8f 93       	push	r24
    117c:	9f 93       	push	r25
    117e:	af 93       	push	r26
    1180:	bf 93       	push	r27
    1182:	ef 93       	push	r30
    1184:	ff 93       	push	r31
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    PORTC |= (1<<PC5);
    118e:	a8 e2       	ldi	r26, 0x28	; 40
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e8 e2       	ldi	r30, 0x28	; 40
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 62       	ori	r24, 0x20	; 32
    119a:	8c 93       	st	X, r24
    TCNT4 =0;
    119c:	e4 ea       	ldi	r30, 0xA4	; 164
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	11 82       	std	Z+1, r1	; 0x01
    11a2:	10 82       	st	Z, r1
    OCR4A = 20000;
    11a4:	e8 ea       	ldi	r30, 0xA8	; 168
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	9e e4       	ldi	r25, 0x4E	; 78
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	80 83       	st	Z, r24
}
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	ff 91       	pop	r31
    11b6:	ef 91       	pop	r30
    11b8:	bf 91       	pop	r27
    11ba:	af 91       	pop	r26
    11bc:	9f 91       	pop	r25
    11be:	8f 91       	pop	r24
    11c0:	0f 90       	pop	r0
    11c2:	00 92 5b 00 	sts	0x005B, r0
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	00 90 5b 00 	lds	r0, 0x005B
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	8f 93       	push	r24
    11e2:	9f 93       	push	r25
    11e4:	af 93       	push	r26
    11e6:	bf 93       	push	r27
    11e8:	ef 93       	push	r30
    11ea:	ff 93       	push	r31
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    if (ADCSRA & (1 << ADSC))
    11f4:	ea e7       	ldi	r30, 0x7A	; 122
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	80 74       	andi	r24, 0x40	; 64
    1200:	90 70       	andi	r25, 0x00	; 0
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	41 f0       	breq	.+16     	; 0x1216 <__vector_13+0x46>
    {
        Ir_links= ADC; //waarde ir links wordt upgedate
    1206:	e8 e7       	ldi	r30, 0x78	; 120
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	90 93 11 03 	sts	0x0311, r25
    1212:	80 93 10 03 	sts	0x0310, r24
    }
    ADMUX |= (6);// Analoog 6 wissel naar
    1216:	ac e7       	ldi	r26, 0x7C	; 124
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ec e7       	ldi	r30, 0x7C	; 124
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	86 60       	ori	r24, 0x06	; 6
    1222:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADSC); //start convertion
    1224:	aa e7       	ldi	r26, 0x7A	; 122
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ea e7       	ldi	r30, 0x7A	; 122
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	80 64       	ori	r24, 0x40	; 64
    1230:	8c 93       	st	X, r24
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	0f 90       	pop	r0
    1244:	00 92 5b 00 	sts	0x005B, r0
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <__vector_14>:

ISR(TIMER2_COMPB_vect)
{
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	00 90 5b 00 	lds	r0, 0x005B
    125e:	0f 92       	push	r0
    1260:	11 24       	eor	r1, r1
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    if(ADCSRA & (1 << ADSC))
    1276:	ea e7       	ldi	r30, 0x7A	; 122
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	80 74       	andi	r24, 0x40	; 64
    1282:	90 70       	andi	r25, 0x00	; 0
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	41 f0       	breq	.+16     	; 0x1298 <__vector_14+0x46>
    {
        Ir_rechts= ADC; //waarde ir links wordt upgedate
    1288:	e8 e7       	ldi	r30, 0x78	; 120
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	90 93 0d 03 	sts	0x030D, r25
    1294:	80 93 0c 03 	sts	0x030C, r24
    }
    ADMUX |= (7);//analoog 7 wissel naar
    1298:	ac e7       	ldi	r26, 0x7C	; 124
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ec e7       	ldi	r30, 0x7C	; 124
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	87 60       	ori	r24, 0x07	; 7
    12a4:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADSC); //start convertion
    12a6:	aa e7       	ldi	r26, 0x7A	; 122
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ea e7       	ldi	r30, 0x7A	; 122
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 64       	ori	r24, 0x40	; 64
    12b2:	8c 93       	st	X, r24
}
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	bf 91       	pop	r27
    12be:	af 91       	pop	r26
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	0f 90       	pop	r0
    12c6:	00 92 5b 00 	sts	0x005B, r0
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	18 95       	reti

000012d4 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
    12d4:	1f 92       	push	r1
    12d6:	0f 92       	push	r0
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	0f 92       	push	r0
    12dc:	00 90 5b 00 	lds	r0, 0x005B
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	8f 93       	push	r24
    12e6:	af 93       	push	r26
    12e8:	bf 93       	push	r27
    12ea:	ef 93       	push	r30
    12ec:	ff 93       	push	r31
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    if (OCR0A == 0)
    12f6:	e7 e4       	ldi	r30, 0x47	; 71
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	88 23       	and	r24, r24
    12fe:	39 f4       	brne	.+14     	; 0x130e <__vector_23+0x3a>
    {
        PORTE &= ~(1<<PE4);
    1300:	ae e2       	ldi	r26, 0x2E	; 46
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ee e2       	ldi	r30, 0x2E	; 46
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 7e       	andi	r24, 0xEF	; 239
    130c:	8c 93       	st	X, r24
    }
    if (OCR0B == 0)
    130e:	e8 e4       	ldi	r30, 0x48	; 72
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	88 23       	and	r24, r24
    1316:	39 f4       	brne	.+14     	; 0x1326 <__vector_23+0x52>
    {
        PORTE &= ~(1<<PE3);
    1318:	ae e2       	ldi	r26, 0x2E	; 46
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	ee e2       	ldi	r30, 0x2E	; 46
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	87 7f       	andi	r24, 0xF7	; 247
    1324:	8c 93       	st	X, r24
    }
    if (OCR0A != 0)
    1326:	e7 e4       	ldi	r30, 0x47	; 71
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	88 23       	and	r24, r24
    132e:	39 f0       	breq	.+14     	; 0x133e <__vector_23+0x6a>
    {
        PORTE |= (1<<PE4);
    1330:	ae e2       	ldi	r26, 0x2E	; 46
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ee e2       	ldi	r30, 0x2E	; 46
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	80 61       	ori	r24, 0x10	; 16
    133c:	8c 93       	st	X, r24
    }
    if (OCR0B != 0)
    133e:	e8 e4       	ldi	r30, 0x48	; 72
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 23       	and	r24, r24
    1346:	39 f0       	breq	.+14     	; 0x1356 <__vector_23+0x82>
    {
        PORTE |= (1<<PE3);
    1348:	ae e2       	ldi	r26, 0x2E	; 46
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ee e2       	ldi	r30, 0x2E	; 46
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	88 60       	ori	r24, 0x08	; 8
    1354:	8c 93       	st	X, r24
    }
}
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	8f 91       	pop	r24
    1364:	0f 90       	pop	r0
    1366:	00 92 5b 00 	sts	0x005B, r0
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	00 90 5b 00 	lds	r0, 0x005B
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	8f 93       	push	r24
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    PORTE &= ~(1<<PE4);
    1396:	ae e2       	ldi	r26, 0x2E	; 46
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ee e2       	ldi	r30, 0x2E	; 46
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8f 7e       	andi	r24, 0xEF	; 239
    13a2:	8c 93       	st	X, r24
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	bf 91       	pop	r27
    13ae:	af 91       	pop	r26
    13b0:	8f 91       	pop	r24
    13b2:	0f 90       	pop	r0
    13b4:	00 92 5b 00 	sts	0x005B, r0
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	0f 90       	pop	r0
    13be:	1f 90       	pop	r1
    13c0:	18 95       	reti

000013c2 <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
    13c2:	1f 92       	push	r1
    13c4:	0f 92       	push	r0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	0f 92       	push	r0
    13ca:	00 90 5b 00 	lds	r0, 0x005B
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	8f 93       	push	r24
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    PORTE &= ~(1<<PE3);
    13e4:	ae e2       	ldi	r26, 0x2E	; 46
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ee e2       	ldi	r30, 0x2E	; 46
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	87 7f       	andi	r24, 0xF7	; 247
    13f0:	8c 93       	st	X, r24
}
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	ff 91       	pop	r31
    13f8:	ef 91       	pop	r30
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	8f 91       	pop	r24
    1400:	0f 90       	pop	r0
    1402:	00 92 5b 00 	sts	0x005B, r0
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <init_motor>:

void init_motor (void)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    // Output low
    PORTE &= ~(1<<PE4);
    1418:	ae e2       	ldi	r26, 0x2E	; 46
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ee e2       	ldi	r30, 0x2E	; 46
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8f 7e       	andi	r24, 0xEF	; 239
    1424:	8c 93       	st	X, r24
    PORTE &= ~(1<<PE3);
    1426:	ae e2       	ldi	r26, 0x2E	; 46
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	ee e2       	ldi	r30, 0x2E	; 46
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	87 7f       	andi	r24, 0xF7	; 247
    1432:	8c 93       	st	X, r24

    //Use mode 0, clkdiv = 64 klok 0 Pwm signalen
    TCCR0A = 0;
    1434:	e4 e4       	ldi	r30, 0x44	; 68
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	10 82       	st	Z, r1
    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
    143a:	e5 e4       	ldi	r30, 0x45	; 69
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	80 83       	st	Z, r24
    TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0);
    1442:	ee e6       	ldi	r30, 0x6E	; 110
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	87 e0       	ldi	r24, 0x07	; 7
    1448:	80 83       	st	Z, r24
    OCR0A = 0;
    144a:	e7 e4       	ldi	r30, 0x47	; 71
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	10 82       	st	Z, r1
    OCR0B = 0;
    1450:	e8 e4       	ldi	r30, 0x48	; 72
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	10 82       	st	Z, r1

    //Use mode 0, clkdiv = 256 klok 1 globale klok
    TCCR1A = 0;
    1456:	e0 e8       	ldi	r30, 0x80	; 128
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	10 82       	st	Z, r1
    TCCR1B = (1<<CS02) | (0<<CS01) | (0<<CS00);
    145c:	e1 e8       	ldi	r30, 0x81	; 129
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	84 e0       	ldi	r24, 0x04	; 4
    1462:	80 83       	st	Z, r24
    TIMSK1 = (1<<OCIE0A);
    1464:	ef e6       	ldi	r30, 0x6F	; 111
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	80 83       	st	Z, r24
    OCR1A = 6250; //0.1 van een seconde dus kan gebruikt worden om een grote klok te maken voor 25.5 seconden
    146c:	e8 e8       	ldi	r30, 0x88	; 136
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8a e6       	ldi	r24, 0x6A	; 106
    1472:	98 e1       	ldi	r25, 0x18	; 24
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	80 83       	st	Z, r24

    //Use mode 0, clkdiv = 1024   klok 2 globale trigger
    TCCR2A = 0;
    1478:	e0 eb       	ldi	r30, 0xB0	; 176
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	10 82       	st	Z, r1
    TCCR2B = (1<<CS22) | (0<<CS21) | (1<<CS20);
    147e:	e1 eb       	ldi	r30, 0xB1	; 177
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	85 e0       	ldi	r24, 0x05	; 5
    1484:	80 83       	st	Z, r24
    OCR2A = 85;
    1486:	e3 eb       	ldi	r30, 0xB3	; 179
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	85 e5       	ldi	r24, 0x55	; 85
    148c:	80 83       	st	Z, r24
    OCR2B = 170;
    148e:	e4 eb       	ldi	r30, 0xB4	; 180
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a ea       	ldi	r24, 0xAA	; 170
    1494:	80 83       	st	Z, r24
    TIMSK2 = (1<<OCIE2B) | (1<<OCIE2A) | (1<<TOIE2);
    1496:	e0 e7       	ldi	r30, 0x70	; 112
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	87 e0       	ldi	r24, 0x07	; 7
    149c:	80 83       	st	Z, r24

    //Use mode 0, clkdiv = 8 klok 4 ultrasoon
    TCCR4A = 0;
    149e:	e0 ea       	ldi	r30, 0xA0	; 160
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	10 82       	st	Z, r1
    TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);
    14a4:	e1 ea       	ldi	r30, 0xA1	; 161
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	80 83       	st	Z, r24
    TIMSK4 = (1<<OCIE4A);
    14ac:	e2 e7       	ldi	r30, 0x72	; 114
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	80 83       	st	Z, r24

// intialisatie ADC goed controleren vrij nieuw
    ADMUX =(0 << REFS1)|(1 << REFS0); //meet vanaf 0 volt
    14b4:	ec e7       	ldi	r30, 0x7C	; 124
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 e4       	ldi	r24, 0x40	; 64
    14ba:	80 83       	st	Z, r24
    ADCSRA = (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);//Division factor van 128
    14bc:	ea e7       	ldi	r30, 0x7A	; 122
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	87 e0       	ldi	r24, 0x07	; 7
    14c2:	80 83       	st	Z, r24
    ADCSRA |=(1 << ADEN); // ADC activeren
    14c4:	aa e7       	ldi	r26, 0x7A	; 122
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ea e7       	ldi	r30, 0x7A	; 122
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	8c 93       	st	X, r24

    // Interupts geactiveerd*/
    sei();
    14d2:	78 94       	sei
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <motor>:

void motor (int Af, int Bf)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <motor+0x6>
    14e0:	0f 92       	push	r0
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	7c 83       	std	Y+4, r23	; 0x04
    14ec:	6b 83       	std	Y+3, r22	; 0x03
            PORTJ |= (1 << PJ0); //corigeren voor een aansluitfout
    14ee:	a5 e0       	ldi	r26, 0x05	; 5
    14f0:	b1 e0       	ldi	r27, 0x01	; 1
    14f2:	e5 e0       	ldi	r30, 0x05	; 5
    14f4:	f1 e0       	ldi	r31, 0x01	; 1
    14f6:	80 81       	ld	r24, Z
    14f8:	81 60       	ori	r24, 0x01	; 1
    14fa:	8c 93       	st	X, r24
            OCR0A = Af;
    14fc:	e7 e4       	ldi	r30, 0x47	; 71
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	80 83       	st	Z, r24
            OCR0B = Bf;
    1504:	e8 e4       	ldi	r30, 0x48	; 72
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	80 83       	st	Z, r24
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <__fixunssfsi>:
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	7b 01       	movw	r14, r22
    1524:	8c 01       	movw	r16, r24
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	5f e4       	ldi	r21, 0x4F	; 79
    152e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__gesf2>
    1532:	88 23       	and	r24, r24
    1534:	8c f0       	brlt	.+34     	; 0x1558 <__fixunssfsi+0x3e>
    1536:	c8 01       	movw	r24, r16
    1538:	b7 01       	movw	r22, r14
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	5f e4       	ldi	r21, 0x4F	; 79
    1542:	0e 94 05 0c 	call	0x180a	; 0x180a <__subsf3>
    1546:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__fixsfsi>
    154a:	9b 01       	movw	r18, r22
    154c:	ac 01       	movw	r20, r24
    154e:	20 50       	subi	r18, 0x00	; 0
    1550:	30 40       	sbci	r19, 0x00	; 0
    1552:	40 40       	sbci	r20, 0x00	; 0
    1554:	50 48       	sbci	r21, 0x80	; 128
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <__fixunssfsi+0x4a>
    1558:	c8 01       	movw	r24, r16
    155a:	b7 01       	movw	r22, r14
    155c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__fixsfsi>
    1560:	9b 01       	movw	r18, r22
    1562:	ac 01       	movw	r20, r24
    1564:	b9 01       	movw	r22, r18
    1566:	ca 01       	movw	r24, r20
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	08 95       	ret

00001572 <_fpadd_parts>:
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ef eb       	ldi	r30, 0xBF	; 191
    1578:	fa e0       	ldi	r31, 0x0A	; 10
    157a:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__>
    157e:	dc 01       	movw	r26, r24
    1580:	2b 01       	movw	r4, r22
    1582:	fa 01       	movw	r30, r20
    1584:	9c 91       	ld	r25, X
    1586:	92 30       	cpi	r25, 0x02	; 2
    1588:	08 f4       	brcc	.+2      	; 0x158c <_fpadd_parts+0x1a>
    158a:	39 c1       	rjmp	.+626    	; 0x17fe <_fpadd_parts+0x28c>
    158c:	eb 01       	movw	r28, r22
    158e:	88 81       	ld	r24, Y
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	08 f4       	brcc	.+2      	; 0x1596 <_fpadd_parts+0x24>
    1594:	33 c1       	rjmp	.+614    	; 0x17fc <_fpadd_parts+0x28a>
    1596:	94 30       	cpi	r25, 0x04	; 4
    1598:	69 f4       	brne	.+26     	; 0x15b4 <_fpadd_parts+0x42>
    159a:	84 30       	cpi	r24, 0x04	; 4
    159c:	09 f0       	breq	.+2      	; 0x15a0 <_fpadd_parts+0x2e>
    159e:	2f c1       	rjmp	.+606    	; 0x17fe <_fpadd_parts+0x28c>
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	9c 91       	ld	r25, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	98 17       	cp	r25, r24
    15aa:	09 f4       	brne	.+2      	; 0x15ae <_fpadd_parts+0x3c>
    15ac:	28 c1       	rjmp	.+592    	; 0x17fe <_fpadd_parts+0x28c>
    15ae:	a0 e0       	ldi	r26, 0x00	; 0
    15b0:	b2 e0       	ldi	r27, 0x02	; 2
    15b2:	25 c1       	rjmp	.+586    	; 0x17fe <_fpadd_parts+0x28c>
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	09 f4       	brne	.+2      	; 0x15ba <_fpadd_parts+0x48>
    15b8:	21 c1       	rjmp	.+578    	; 0x17fc <_fpadd_parts+0x28a>
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	a9 f4       	brne	.+42     	; 0x15e8 <_fpadd_parts+0x76>
    15be:	92 30       	cpi	r25, 0x02	; 2
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <_fpadd_parts+0x52>
    15c2:	1d c1       	rjmp	.+570    	; 0x17fe <_fpadd_parts+0x28c>
    15c4:	9a 01       	movw	r18, r20
    15c6:	ad 01       	movw	r20, r26
    15c8:	88 e0       	ldi	r24, 0x08	; 8
    15ca:	ea 01       	movw	r28, r20
    15cc:	09 90       	ld	r0, Y+
    15ce:	ae 01       	movw	r20, r28
    15d0:	e9 01       	movw	r28, r18
    15d2:	09 92       	st	Y+, r0
    15d4:	9e 01       	movw	r18, r28
    15d6:	81 50       	subi	r24, 0x01	; 1
    15d8:	c1 f7       	brne	.-16     	; 0x15ca <_fpadd_parts+0x58>
    15da:	e2 01       	movw	r28, r4
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	9c 91       	ld	r25, X
    15e2:	89 23       	and	r24, r25
    15e4:	81 83       	std	Z+1, r24	; 0x01
    15e6:	08 c1       	rjmp	.+528    	; 0x17f8 <_fpadd_parts+0x286>
    15e8:	92 30       	cpi	r25, 0x02	; 2
    15ea:	09 f4       	brne	.+2      	; 0x15ee <_fpadd_parts+0x7c>
    15ec:	07 c1       	rjmp	.+526    	; 0x17fc <_fpadd_parts+0x28a>
    15ee:	12 96       	adiw	r26, 0x02	; 2
    15f0:	2d 90       	ld	r2, X+
    15f2:	3c 90       	ld	r3, X
    15f4:	13 97       	sbiw	r26, 0x03	; 3
    15f6:	eb 01       	movw	r28, r22
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	14 96       	adiw	r26, 0x04	; 4
    15fe:	ad 90       	ld	r10, X+
    1600:	bd 90       	ld	r11, X+
    1602:	cd 90       	ld	r12, X+
    1604:	dc 90       	ld	r13, X
    1606:	17 97       	sbiw	r26, 0x07	; 7
    1608:	ec 80       	ldd	r14, Y+4	; 0x04
    160a:	fd 80       	ldd	r15, Y+5	; 0x05
    160c:	0e 81       	ldd	r16, Y+6	; 0x06
    160e:	1f 81       	ldd	r17, Y+7	; 0x07
    1610:	91 01       	movw	r18, r2
    1612:	28 1b       	sub	r18, r24
    1614:	39 0b       	sbc	r19, r25
    1616:	b9 01       	movw	r22, r18
    1618:	37 ff       	sbrs	r19, 7
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <_fpadd_parts+0xb2>
    161c:	66 27       	eor	r22, r22
    161e:	77 27       	eor	r23, r23
    1620:	62 1b       	sub	r22, r18
    1622:	73 0b       	sbc	r23, r19
    1624:	60 32       	cpi	r22, 0x20	; 32
    1626:	71 05       	cpc	r23, r1
    1628:	0c f0       	brlt	.+2      	; 0x162c <_fpadd_parts+0xba>
    162a:	61 c0       	rjmp	.+194    	; 0x16ee <_fpadd_parts+0x17c>
    162c:	12 16       	cp	r1, r18
    162e:	13 06       	cpc	r1, r19
    1630:	6c f5       	brge	.+90     	; 0x168c <_fpadd_parts+0x11a>
    1632:	37 01       	movw	r6, r14
    1634:	48 01       	movw	r8, r16
    1636:	06 2e       	mov	r0, r22
    1638:	04 c0       	rjmp	.+8      	; 0x1642 <_fpadd_parts+0xd0>
    163a:	96 94       	lsr	r9
    163c:	87 94       	ror	r8
    163e:	77 94       	ror	r7
    1640:	67 94       	ror	r6
    1642:	0a 94       	dec	r0
    1644:	d2 f7       	brpl	.-12     	; 0x163a <_fpadd_parts+0xc8>
    1646:	21 e0       	ldi	r18, 0x01	; 1
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <_fpadd_parts+0xe6>
    1650:	22 0f       	add	r18, r18
    1652:	33 1f       	adc	r19, r19
    1654:	44 1f       	adc	r20, r20
    1656:	55 1f       	adc	r21, r21
    1658:	6a 95       	dec	r22
    165a:	d2 f7       	brpl	.-12     	; 0x1650 <_fpadd_parts+0xde>
    165c:	21 50       	subi	r18, 0x01	; 1
    165e:	30 40       	sbci	r19, 0x00	; 0
    1660:	40 40       	sbci	r20, 0x00	; 0
    1662:	50 40       	sbci	r21, 0x00	; 0
    1664:	2e 21       	and	r18, r14
    1666:	3f 21       	and	r19, r15
    1668:	40 23       	and	r20, r16
    166a:	51 23       	and	r21, r17
    166c:	21 15       	cp	r18, r1
    166e:	31 05       	cpc	r19, r1
    1670:	41 05       	cpc	r20, r1
    1672:	51 05       	cpc	r21, r1
    1674:	21 f0       	breq	.+8      	; 0x167e <_fpadd_parts+0x10c>
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	79 01       	movw	r14, r18
    1680:	8a 01       	movw	r16, r20
    1682:	e6 28       	or	r14, r6
    1684:	f7 28       	or	r15, r7
    1686:	08 29       	or	r16, r8
    1688:	19 29       	or	r17, r9
    168a:	3c c0       	rjmp	.+120    	; 0x1704 <_fpadd_parts+0x192>
    168c:	23 2b       	or	r18, r19
    168e:	d1 f1       	breq	.+116    	; 0x1704 <_fpadd_parts+0x192>
    1690:	26 0e       	add	r2, r22
    1692:	37 1e       	adc	r3, r23
    1694:	35 01       	movw	r6, r10
    1696:	46 01       	movw	r8, r12
    1698:	06 2e       	mov	r0, r22
    169a:	04 c0       	rjmp	.+8      	; 0x16a4 <_fpadd_parts+0x132>
    169c:	96 94       	lsr	r9
    169e:	87 94       	ror	r8
    16a0:	77 94       	ror	r7
    16a2:	67 94       	ror	r6
    16a4:	0a 94       	dec	r0
    16a6:	d2 f7       	brpl	.-12     	; 0x169c <_fpadd_parts+0x12a>
    16a8:	21 e0       	ldi	r18, 0x01	; 1
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <_fpadd_parts+0x148>
    16b2:	22 0f       	add	r18, r18
    16b4:	33 1f       	adc	r19, r19
    16b6:	44 1f       	adc	r20, r20
    16b8:	55 1f       	adc	r21, r21
    16ba:	6a 95       	dec	r22
    16bc:	d2 f7       	brpl	.-12     	; 0x16b2 <_fpadd_parts+0x140>
    16be:	21 50       	subi	r18, 0x01	; 1
    16c0:	30 40       	sbci	r19, 0x00	; 0
    16c2:	40 40       	sbci	r20, 0x00	; 0
    16c4:	50 40       	sbci	r21, 0x00	; 0
    16c6:	2a 21       	and	r18, r10
    16c8:	3b 21       	and	r19, r11
    16ca:	4c 21       	and	r20, r12
    16cc:	5d 21       	and	r21, r13
    16ce:	21 15       	cp	r18, r1
    16d0:	31 05       	cpc	r19, r1
    16d2:	41 05       	cpc	r20, r1
    16d4:	51 05       	cpc	r21, r1
    16d6:	21 f0       	breq	.+8      	; 0x16e0 <_fpadd_parts+0x16e>
    16d8:	21 e0       	ldi	r18, 0x01	; 1
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	59 01       	movw	r10, r18
    16e2:	6a 01       	movw	r12, r20
    16e4:	a6 28       	or	r10, r6
    16e6:	b7 28       	or	r11, r7
    16e8:	c8 28       	or	r12, r8
    16ea:	d9 28       	or	r13, r9
    16ec:	0b c0       	rjmp	.+22     	; 0x1704 <_fpadd_parts+0x192>
    16ee:	82 15       	cp	r24, r2
    16f0:	93 05       	cpc	r25, r3
    16f2:	2c f0       	brlt	.+10     	; 0x16fe <_fpadd_parts+0x18c>
    16f4:	1c 01       	movw	r2, r24
    16f6:	aa 24       	eor	r10, r10
    16f8:	bb 24       	eor	r11, r11
    16fa:	65 01       	movw	r12, r10
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <_fpadd_parts+0x192>
    16fe:	ee 24       	eor	r14, r14
    1700:	ff 24       	eor	r15, r15
    1702:	87 01       	movw	r16, r14
    1704:	11 96       	adiw	r26, 0x01	; 1
    1706:	9c 91       	ld	r25, X
    1708:	d2 01       	movw	r26, r4
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	8c 91       	ld	r24, X
    170e:	98 17       	cp	r25, r24
    1710:	09 f4       	brne	.+2      	; 0x1714 <_fpadd_parts+0x1a2>
    1712:	45 c0       	rjmp	.+138    	; 0x179e <_fpadd_parts+0x22c>
    1714:	99 23       	and	r25, r25
    1716:	39 f0       	breq	.+14     	; 0x1726 <_fpadd_parts+0x1b4>
    1718:	a8 01       	movw	r20, r16
    171a:	97 01       	movw	r18, r14
    171c:	2a 19       	sub	r18, r10
    171e:	3b 09       	sbc	r19, r11
    1720:	4c 09       	sbc	r20, r12
    1722:	5d 09       	sbc	r21, r13
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <_fpadd_parts+0x1c0>
    1726:	a6 01       	movw	r20, r12
    1728:	95 01       	movw	r18, r10
    172a:	2e 19       	sub	r18, r14
    172c:	3f 09       	sbc	r19, r15
    172e:	40 0b       	sbc	r20, r16
    1730:	51 0b       	sbc	r21, r17
    1732:	57 fd       	sbrc	r21, 7
    1734:	08 c0       	rjmp	.+16     	; 0x1746 <_fpadd_parts+0x1d4>
    1736:	11 82       	std	Z+1, r1	; 0x01
    1738:	33 82       	std	Z+3, r3	; 0x03
    173a:	22 82       	std	Z+2, r2	; 0x02
    173c:	24 83       	std	Z+4, r18	; 0x04
    173e:	35 83       	std	Z+5, r19	; 0x05
    1740:	46 83       	std	Z+6, r20	; 0x06
    1742:	57 83       	std	Z+7, r21	; 0x07
    1744:	1d c0       	rjmp	.+58     	; 0x1780 <_fpadd_parts+0x20e>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	81 83       	std	Z+1, r24	; 0x01
    174a:	33 82       	std	Z+3, r3	; 0x03
    174c:	22 82       	std	Z+2, r2	; 0x02
    174e:	88 27       	eor	r24, r24
    1750:	99 27       	eor	r25, r25
    1752:	dc 01       	movw	r26, r24
    1754:	82 1b       	sub	r24, r18
    1756:	93 0b       	sbc	r25, r19
    1758:	a4 0b       	sbc	r26, r20
    175a:	b5 0b       	sbc	r27, r21
    175c:	84 83       	std	Z+4, r24	; 0x04
    175e:	95 83       	std	Z+5, r25	; 0x05
    1760:	a6 83       	std	Z+6, r26	; 0x06
    1762:	b7 83       	std	Z+7, r27	; 0x07
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <_fpadd_parts+0x20e>
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	44 1f       	adc	r20, r20
    176c:	55 1f       	adc	r21, r21
    176e:	24 83       	std	Z+4, r18	; 0x04
    1770:	35 83       	std	Z+5, r19	; 0x05
    1772:	46 83       	std	Z+6, r20	; 0x06
    1774:	57 83       	std	Z+7, r21	; 0x07
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	93 83       	std	Z+3, r25	; 0x03
    177e:	82 83       	std	Z+2, r24	; 0x02
    1780:	24 81       	ldd	r18, Z+4	; 0x04
    1782:	35 81       	ldd	r19, Z+5	; 0x05
    1784:	46 81       	ldd	r20, Z+6	; 0x06
    1786:	57 81       	ldd	r21, Z+7	; 0x07
    1788:	da 01       	movw	r26, r20
    178a:	c9 01       	movw	r24, r18
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	a1 09       	sbc	r26, r1
    1790:	b1 09       	sbc	r27, r1
    1792:	8f 5f       	subi	r24, 0xFF	; 255
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	af 4f       	sbci	r26, 0xFF	; 255
    1798:	bf 43       	sbci	r27, 0x3F	; 63
    179a:	28 f3       	brcs	.-54     	; 0x1766 <_fpadd_parts+0x1f4>
    179c:	0b c0       	rjmp	.+22     	; 0x17b4 <_fpadd_parts+0x242>
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	33 82       	std	Z+3, r3	; 0x03
    17a2:	22 82       	std	Z+2, r2	; 0x02
    17a4:	ea 0c       	add	r14, r10
    17a6:	fb 1c       	adc	r15, r11
    17a8:	0c 1d       	adc	r16, r12
    17aa:	1d 1d       	adc	r17, r13
    17ac:	e4 82       	std	Z+4, r14	; 0x04
    17ae:	f5 82       	std	Z+5, r15	; 0x05
    17b0:	06 83       	std	Z+6, r16	; 0x06
    17b2:	17 83       	std	Z+7, r17	; 0x07
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	80 83       	st	Z, r24
    17b8:	24 81       	ldd	r18, Z+4	; 0x04
    17ba:	35 81       	ldd	r19, Z+5	; 0x05
    17bc:	46 81       	ldd	r20, Z+6	; 0x06
    17be:	57 81       	ldd	r21, Z+7	; 0x07
    17c0:	57 ff       	sbrs	r21, 7
    17c2:	1a c0       	rjmp	.+52     	; 0x17f8 <_fpadd_parts+0x286>
    17c4:	c9 01       	movw	r24, r18
    17c6:	aa 27       	eor	r26, r26
    17c8:	97 fd       	sbrc	r25, 7
    17ca:	a0 95       	com	r26
    17cc:	ba 2f       	mov	r27, r26
    17ce:	81 70       	andi	r24, 0x01	; 1
    17d0:	90 70       	andi	r25, 0x00	; 0
    17d2:	a0 70       	andi	r26, 0x00	; 0
    17d4:	b0 70       	andi	r27, 0x00	; 0
    17d6:	56 95       	lsr	r21
    17d8:	47 95       	ror	r20
    17da:	37 95       	ror	r19
    17dc:	27 95       	ror	r18
    17de:	82 2b       	or	r24, r18
    17e0:	93 2b       	or	r25, r19
    17e2:	a4 2b       	or	r26, r20
    17e4:	b5 2b       	or	r27, r21
    17e6:	84 83       	std	Z+4, r24	; 0x04
    17e8:	95 83       	std	Z+5, r25	; 0x05
    17ea:	a6 83       	std	Z+6, r26	; 0x06
    17ec:	b7 83       	std	Z+7, r27	; 0x07
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	93 83       	std	Z+3, r25	; 0x03
    17f6:	82 83       	std	Z+2, r24	; 0x02
    17f8:	df 01       	movw	r26, r30
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <_fpadd_parts+0x28c>
    17fc:	d2 01       	movw	r26, r4
    17fe:	cd 01       	movw	r24, r26
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	e2 e1       	ldi	r30, 0x12	; 18
    1806:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__>

0000180a <__subsf3>:
    180a:	a0 e2       	ldi	r26, 0x20	; 32
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	eb e0       	ldi	r30, 0x0B	; 11
    1810:	fc e0       	ldi	r31, 0x0C	; 12
    1812:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
    1816:	69 83       	std	Y+1, r22	; 0x01
    1818:	7a 83       	std	Y+2, r23	; 0x02
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	2d 83       	std	Y+5, r18	; 0x05
    1820:	3e 83       	std	Y+6, r19	; 0x06
    1822:	4f 83       	std	Y+7, r20	; 0x07
    1824:	58 87       	std	Y+8, r21	; 0x08
    1826:	e9 e0       	ldi	r30, 0x09	; 9
    1828:	ee 2e       	mov	r14, r30
    182a:	f1 2c       	mov	r15, r1
    182c:	ec 0e       	add	r14, r28
    182e:	fd 1e       	adc	r15, r29
    1830:	ce 01       	movw	r24, r28
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	b7 01       	movw	r22, r14
    1836:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    183a:	8e 01       	movw	r16, r28
    183c:	0f 5e       	subi	r16, 0xEF	; 239
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	ce 01       	movw	r24, r28
    1842:	05 96       	adiw	r24, 0x05	; 5
    1844:	b8 01       	movw	r22, r16
    1846:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    184a:	8a 89       	ldd	r24, Y+18	; 0x12
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	89 27       	eor	r24, r25
    1850:	8a 8b       	std	Y+18, r24	; 0x12
    1852:	c7 01       	movw	r24, r14
    1854:	b8 01       	movw	r22, r16
    1856:	ae 01       	movw	r20, r28
    1858:	47 5e       	subi	r20, 0xE7	; 231
    185a:	5f 4f       	sbci	r21, 0xFF	; 255
    185c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_fpadd_parts>
    1860:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__pack_f>
    1864:	a0 96       	adiw	r28, 0x20	; 32
    1866:	e6 e0       	ldi	r30, 0x06	; 6
    1868:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

0000186c <__addsf3>:
    186c:	a0 e2       	ldi	r26, 0x20	; 32
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	ec e3       	ldi	r30, 0x3C	; 60
    1872:	fc e0       	ldi	r31, 0x0C	; 12
    1874:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
    1878:	69 83       	std	Y+1, r22	; 0x01
    187a:	7a 83       	std	Y+2, r23	; 0x02
    187c:	8b 83       	std	Y+3, r24	; 0x03
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	2d 83       	std	Y+5, r18	; 0x05
    1882:	3e 83       	std	Y+6, r19	; 0x06
    1884:	4f 83       	std	Y+7, r20	; 0x07
    1886:	58 87       	std	Y+8, r21	; 0x08
    1888:	f9 e0       	ldi	r31, 0x09	; 9
    188a:	ef 2e       	mov	r14, r31
    188c:	f1 2c       	mov	r15, r1
    188e:	ec 0e       	add	r14, r28
    1890:	fd 1e       	adc	r15, r29
    1892:	ce 01       	movw	r24, r28
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	b7 01       	movw	r22, r14
    1898:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    189c:	8e 01       	movw	r16, r28
    189e:	0f 5e       	subi	r16, 0xEF	; 239
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	ce 01       	movw	r24, r28
    18a4:	05 96       	adiw	r24, 0x05	; 5
    18a6:	b8 01       	movw	r22, r16
    18a8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    18ac:	c7 01       	movw	r24, r14
    18ae:	b8 01       	movw	r22, r16
    18b0:	ae 01       	movw	r20, r28
    18b2:	47 5e       	subi	r20, 0xE7	; 231
    18b4:	5f 4f       	sbci	r21, 0xFF	; 255
    18b6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_fpadd_parts>
    18ba:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__pack_f>
    18be:	a0 96       	adiw	r28, 0x20	; 32
    18c0:	e6 e0       	ldi	r30, 0x06	; 6
    18c2:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

000018c6 <__mulsf3>:
    18c6:	a0 e2       	ldi	r26, 0x20	; 32
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e9 e6       	ldi	r30, 0x69	; 105
    18cc:	fc e0       	ldi	r31, 0x0C	; 12
    18ce:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__>
    18d2:	69 83       	std	Y+1, r22	; 0x01
    18d4:	7a 83       	std	Y+2, r23	; 0x02
    18d6:	8b 83       	std	Y+3, r24	; 0x03
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	2d 83       	std	Y+5, r18	; 0x05
    18dc:	3e 83       	std	Y+6, r19	; 0x06
    18de:	4f 83       	std	Y+7, r20	; 0x07
    18e0:	58 87       	std	Y+8, r21	; 0x08
    18e2:	ce 01       	movw	r24, r28
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	be 01       	movw	r22, r28
    18e8:	67 5f       	subi	r22, 0xF7	; 247
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    18f0:	ce 01       	movw	r24, r28
    18f2:	05 96       	adiw	r24, 0x05	; 5
    18f4:	be 01       	movw	r22, r28
    18f6:	6f 5e       	subi	r22, 0xEF	; 239
    18f8:	7f 4f       	sbci	r23, 0xFF	; 255
    18fa:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    18fe:	99 85       	ldd	r25, Y+9	; 0x09
    1900:	92 30       	cpi	r25, 0x02	; 2
    1902:	88 f0       	brcs	.+34     	; 0x1926 <__mulsf3+0x60>
    1904:	89 89       	ldd	r24, Y+17	; 0x11
    1906:	82 30       	cpi	r24, 0x02	; 2
    1908:	c8 f0       	brcs	.+50     	; 0x193c <__mulsf3+0x76>
    190a:	94 30       	cpi	r25, 0x04	; 4
    190c:	19 f4       	brne	.+6      	; 0x1914 <__mulsf3+0x4e>
    190e:	82 30       	cpi	r24, 0x02	; 2
    1910:	51 f4       	brne	.+20     	; 0x1926 <__mulsf3+0x60>
    1912:	04 c0       	rjmp	.+8      	; 0x191c <__mulsf3+0x56>
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	29 f4       	brne	.+10     	; 0x1922 <__mulsf3+0x5c>
    1918:	92 30       	cpi	r25, 0x02	; 2
    191a:	81 f4       	brne	.+32     	; 0x193c <__mulsf3+0x76>
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	92 e0       	ldi	r25, 0x02	; 2
    1920:	c6 c0       	rjmp	.+396    	; 0x1aae <__mulsf3+0x1e8>
    1922:	92 30       	cpi	r25, 0x02	; 2
    1924:	49 f4       	brne	.+18     	; 0x1938 <__mulsf3+0x72>
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	9a 85       	ldd	r25, Y+10	; 0x0a
    192a:	8a 89       	ldd	r24, Y+18	; 0x12
    192c:	98 13       	cpse	r25, r24
    192e:	21 e0       	ldi	r18, 0x01	; 1
    1930:	2a 87       	std	Y+10, r18	; 0x0a
    1932:	ce 01       	movw	r24, r28
    1934:	09 96       	adiw	r24, 0x09	; 9
    1936:	bb c0       	rjmp	.+374    	; 0x1aae <__mulsf3+0x1e8>
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	49 f4       	brne	.+18     	; 0x194e <__mulsf3+0x88>
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	8a 89       	ldd	r24, Y+18	; 0x12
    1942:	98 13       	cpse	r25, r24
    1944:	21 e0       	ldi	r18, 0x01	; 1
    1946:	2a 8b       	std	Y+18, r18	; 0x12
    1948:	ce 01       	movw	r24, r28
    194a:	41 96       	adiw	r24, 0x11	; 17
    194c:	b0 c0       	rjmp	.+352    	; 0x1aae <__mulsf3+0x1e8>
    194e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1950:	3e 84       	ldd	r3, Y+14	; 0x0e
    1952:	4f 84       	ldd	r4, Y+15	; 0x0f
    1954:	58 88       	ldd	r5, Y+16	; 0x10
    1956:	6d 88       	ldd	r6, Y+21	; 0x15
    1958:	7e 88       	ldd	r7, Y+22	; 0x16
    195a:	8f 88       	ldd	r8, Y+23	; 0x17
    195c:	98 8c       	ldd	r9, Y+24	; 0x18
    195e:	ee 24       	eor	r14, r14
    1960:	ff 24       	eor	r15, r15
    1962:	87 01       	movw	r16, r14
    1964:	aa 24       	eor	r10, r10
    1966:	bb 24       	eor	r11, r11
    1968:	65 01       	movw	r12, r10
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	e0 e0       	ldi	r30, 0x00	; 0
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	c1 01       	movw	r24, r2
    1978:	81 70       	andi	r24, 0x01	; 1
    197a:	90 70       	andi	r25, 0x00	; 0
    197c:	89 2b       	or	r24, r25
    197e:	e9 f0       	breq	.+58     	; 0x19ba <__mulsf3+0xf4>
    1980:	e6 0c       	add	r14, r6
    1982:	f7 1c       	adc	r15, r7
    1984:	08 1d       	adc	r16, r8
    1986:	19 1d       	adc	r17, r9
    1988:	9a 01       	movw	r18, r20
    198a:	ab 01       	movw	r20, r22
    198c:	2a 0d       	add	r18, r10
    198e:	3b 1d       	adc	r19, r11
    1990:	4c 1d       	adc	r20, r12
    1992:	5d 1d       	adc	r21, r13
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e0       	ldi	r26, 0x00	; 0
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e6 14       	cp	r14, r6
    199e:	f7 04       	cpc	r15, r7
    19a0:	08 05       	cpc	r16, r8
    19a2:	19 05       	cpc	r17, r9
    19a4:	20 f4       	brcc	.+8      	; 0x19ae <__mulsf3+0xe8>
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ba 01       	movw	r22, r20
    19b0:	a9 01       	movw	r20, r18
    19b2:	48 0f       	add	r20, r24
    19b4:	59 1f       	adc	r21, r25
    19b6:	6a 1f       	adc	r22, r26
    19b8:	7b 1f       	adc	r23, r27
    19ba:	aa 0c       	add	r10, r10
    19bc:	bb 1c       	adc	r11, r11
    19be:	cc 1c       	adc	r12, r12
    19c0:	dd 1c       	adc	r13, r13
    19c2:	97 fe       	sbrs	r9, 7
    19c4:	08 c0       	rjmp	.+16     	; 0x19d6 <__mulsf3+0x110>
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a0 e0       	ldi	r26, 0x00	; 0
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	a8 2a       	or	r10, r24
    19d0:	b9 2a       	or	r11, r25
    19d2:	ca 2a       	or	r12, r26
    19d4:	db 2a       	or	r13, r27
    19d6:	31 96       	adiw	r30, 0x01	; 1
    19d8:	e0 32       	cpi	r30, 0x20	; 32
    19da:	f1 05       	cpc	r31, r1
    19dc:	49 f0       	breq	.+18     	; 0x19f0 <__mulsf3+0x12a>
    19de:	66 0c       	add	r6, r6
    19e0:	77 1c       	adc	r7, r7
    19e2:	88 1c       	adc	r8, r8
    19e4:	99 1c       	adc	r9, r9
    19e6:	56 94       	lsr	r5
    19e8:	47 94       	ror	r4
    19ea:	37 94       	ror	r3
    19ec:	27 94       	ror	r2
    19ee:	c3 cf       	rjmp	.-122    	; 0x1976 <__mulsf3+0xb0>
    19f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    19f2:	ea 89       	ldd	r30, Y+18	; 0x12
    19f4:	2b 89       	ldd	r18, Y+19	; 0x13
    19f6:	3c 89       	ldd	r19, Y+20	; 0x14
    19f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    19fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    19fc:	28 0f       	add	r18, r24
    19fe:	39 1f       	adc	r19, r25
    1a00:	2e 5f       	subi	r18, 0xFE	; 254
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	17 c0       	rjmp	.+46     	; 0x1a34 <__mulsf3+0x16e>
    1a06:	ca 01       	movw	r24, r20
    1a08:	81 70       	andi	r24, 0x01	; 1
    1a0a:	90 70       	andi	r25, 0x00	; 0
    1a0c:	89 2b       	or	r24, r25
    1a0e:	61 f0       	breq	.+24     	; 0x1a28 <__mulsf3+0x162>
    1a10:	16 95       	lsr	r17
    1a12:	07 95       	ror	r16
    1a14:	f7 94       	ror	r15
    1a16:	e7 94       	ror	r14
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a0 e0       	ldi	r26, 0x00	; 0
    1a1e:	b0 e8       	ldi	r27, 0x80	; 128
    1a20:	e8 2a       	or	r14, r24
    1a22:	f9 2a       	or	r15, r25
    1a24:	0a 2b       	or	r16, r26
    1a26:	1b 2b       	or	r17, r27
    1a28:	76 95       	lsr	r23
    1a2a:	67 95       	ror	r22
    1a2c:	57 95       	ror	r21
    1a2e:	47 95       	ror	r20
    1a30:	2f 5f       	subi	r18, 0xFF	; 255
    1a32:	3f 4f       	sbci	r19, 0xFF	; 255
    1a34:	77 fd       	sbrc	r23, 7
    1a36:	e7 cf       	rjmp	.-50     	; 0x1a06 <__mulsf3+0x140>
    1a38:	0c c0       	rjmp	.+24     	; 0x1a52 <__mulsf3+0x18c>
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	66 1f       	adc	r22, r22
    1a40:	77 1f       	adc	r23, r23
    1a42:	17 fd       	sbrc	r17, 7
    1a44:	41 60       	ori	r20, 0x01	; 1
    1a46:	ee 0c       	add	r14, r14
    1a48:	ff 1c       	adc	r15, r15
    1a4a:	00 1f       	adc	r16, r16
    1a4c:	11 1f       	adc	r17, r17
    1a4e:	21 50       	subi	r18, 0x01	; 1
    1a50:	30 40       	sbci	r19, 0x00	; 0
    1a52:	40 30       	cpi	r20, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	59 07       	cpc	r21, r25
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	69 07       	cpc	r22, r25
    1a5c:	90 e4       	ldi	r25, 0x40	; 64
    1a5e:	79 07       	cpc	r23, r25
    1a60:	60 f3       	brcs	.-40     	; 0x1a3a <__mulsf3+0x174>
    1a62:	2b 8f       	std	Y+27, r18	; 0x1b
    1a64:	3c 8f       	std	Y+28, r19	; 0x1c
    1a66:	db 01       	movw	r26, r22
    1a68:	ca 01       	movw	r24, r20
    1a6a:	8f 77       	andi	r24, 0x7F	; 127
    1a6c:	90 70       	andi	r25, 0x00	; 0
    1a6e:	a0 70       	andi	r26, 0x00	; 0
    1a70:	b0 70       	andi	r27, 0x00	; 0
    1a72:	80 34       	cpi	r24, 0x40	; 64
    1a74:	91 05       	cpc	r25, r1
    1a76:	a1 05       	cpc	r26, r1
    1a78:	b1 05       	cpc	r27, r1
    1a7a:	61 f4       	brne	.+24     	; 0x1a94 <__mulsf3+0x1ce>
    1a7c:	47 fd       	sbrc	r20, 7
    1a7e:	0a c0       	rjmp	.+20     	; 0x1a94 <__mulsf3+0x1ce>
    1a80:	e1 14       	cp	r14, r1
    1a82:	f1 04       	cpc	r15, r1
    1a84:	01 05       	cpc	r16, r1
    1a86:	11 05       	cpc	r17, r1
    1a88:	29 f0       	breq	.+10     	; 0x1a94 <__mulsf3+0x1ce>
    1a8a:	40 5c       	subi	r20, 0xC0	; 192
    1a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8e:	6f 4f       	sbci	r22, 0xFF	; 255
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	40 78       	andi	r20, 0x80	; 128
    1a94:	1a 8e       	std	Y+26, r1	; 0x1a
    1a96:	fe 17       	cp	r31, r30
    1a98:	11 f0       	breq	.+4      	; 0x1a9e <__mulsf3+0x1d8>
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	8a 8f       	std	Y+26, r24	; 0x1a
    1a9e:	4d 8f       	std	Y+29, r20	; 0x1d
    1aa0:	5e 8f       	std	Y+30, r21	; 0x1e
    1aa2:	6f 8f       	std	Y+31, r22	; 0x1f
    1aa4:	78 a3       	std	Y+32, r23	; 0x20
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	89 8f       	std	Y+25, r24	; 0x19
    1aaa:	ce 01       	movw	r24, r28
    1aac:	49 96       	adiw	r24, 0x19	; 25
    1aae:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__pack_f>
    1ab2:	a0 96       	adiw	r28, 0x20	; 32
    1ab4:	e2 e1       	ldi	r30, 0x12	; 18
    1ab6:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__>

00001aba <__gtsf2>:
    1aba:	a8 e1       	ldi	r26, 0x18	; 24
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e3 e6       	ldi	r30, 0x63	; 99
    1ac0:	fd e0       	ldi	r31, 0x0D	; 13
    1ac2:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
    1ac6:	69 83       	std	Y+1, r22	; 0x01
    1ac8:	7a 83       	std	Y+2, r23	; 0x02
    1aca:	8b 83       	std	Y+3, r24	; 0x03
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	2d 83       	std	Y+5, r18	; 0x05
    1ad0:	3e 83       	std	Y+6, r19	; 0x06
    1ad2:	4f 83       	std	Y+7, r20	; 0x07
    1ad4:	58 87       	std	Y+8, r21	; 0x08
    1ad6:	89 e0       	ldi	r24, 0x09	; 9
    1ad8:	e8 2e       	mov	r14, r24
    1ada:	f1 2c       	mov	r15, r1
    1adc:	ec 0e       	add	r14, r28
    1ade:	fd 1e       	adc	r15, r29
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	b7 01       	movw	r22, r14
    1ae6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    1aea:	8e 01       	movw	r16, r28
    1aec:	0f 5e       	subi	r16, 0xEF	; 239
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	ce 01       	movw	r24, r28
    1af2:	05 96       	adiw	r24, 0x05	; 5
    1af4:	b8 01       	movw	r22, r16
    1af6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	40 f0       	brcs	.+16     	; 0x1b10 <__gtsf2+0x56>
    1b00:	89 89       	ldd	r24, Y+17	; 0x11
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	28 f0       	brcs	.+10     	; 0x1b10 <__gtsf2+0x56>
    1b06:	c7 01       	movw	r24, r14
    1b08:	b8 01       	movw	r22, r16
    1b0a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__fpcmp_parts_f>
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <__gtsf2+0x58>
    1b10:	8f ef       	ldi	r24, 0xFF	; 255
    1b12:	68 96       	adiw	r28, 0x18	; 24
    1b14:	e6 e0       	ldi	r30, 0x06	; 6
    1b16:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

00001b1a <__gesf2>:
    1b1a:	a8 e1       	ldi	r26, 0x18	; 24
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e3 e9       	ldi	r30, 0x93	; 147
    1b20:	fd e0       	ldi	r31, 0x0D	; 13
    1b22:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
    1b26:	69 83       	std	Y+1, r22	; 0x01
    1b28:	7a 83       	std	Y+2, r23	; 0x02
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	9c 83       	std	Y+4, r25	; 0x04
    1b2e:	2d 83       	std	Y+5, r18	; 0x05
    1b30:	3e 83       	std	Y+6, r19	; 0x06
    1b32:	4f 83       	std	Y+7, r20	; 0x07
    1b34:	58 87       	std	Y+8, r21	; 0x08
    1b36:	89 e0       	ldi	r24, 0x09	; 9
    1b38:	e8 2e       	mov	r14, r24
    1b3a:	f1 2c       	mov	r15, r1
    1b3c:	ec 0e       	add	r14, r28
    1b3e:	fd 1e       	adc	r15, r29
    1b40:	ce 01       	movw	r24, r28
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	b7 01       	movw	r22, r14
    1b46:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    1b4a:	8e 01       	movw	r16, r28
    1b4c:	0f 5e       	subi	r16, 0xEF	; 239
    1b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b50:	ce 01       	movw	r24, r28
    1b52:	05 96       	adiw	r24, 0x05	; 5
    1b54:	b8 01       	movw	r22, r16
    1b56:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	82 30       	cpi	r24, 0x02	; 2
    1b5e:	40 f0       	brcs	.+16     	; 0x1b70 <__gesf2+0x56>
    1b60:	89 89       	ldd	r24, Y+17	; 0x11
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	28 f0       	brcs	.+10     	; 0x1b70 <__gesf2+0x56>
    1b66:	c7 01       	movw	r24, r14
    1b68:	b8 01       	movw	r22, r16
    1b6a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__fpcmp_parts_f>
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <__gesf2+0x58>
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	68 96       	adiw	r28, 0x18	; 24
    1b74:	e6 e0       	ldi	r30, 0x06	; 6
    1b76:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

00001b7a <__ltsf2>:
    1b7a:	a8 e1       	ldi	r26, 0x18	; 24
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1b80:	fd e0       	ldi	r31, 0x0D	; 13
    1b82:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
    1b86:	69 83       	std	Y+1, r22	; 0x01
    1b88:	7a 83       	std	Y+2, r23	; 0x02
    1b8a:	8b 83       	std	Y+3, r24	; 0x03
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	2d 83       	std	Y+5, r18	; 0x05
    1b90:	3e 83       	std	Y+6, r19	; 0x06
    1b92:	4f 83       	std	Y+7, r20	; 0x07
    1b94:	58 87       	std	Y+8, r21	; 0x08
    1b96:	89 e0       	ldi	r24, 0x09	; 9
    1b98:	e8 2e       	mov	r14, r24
    1b9a:	f1 2c       	mov	r15, r1
    1b9c:	ec 0e       	add	r14, r28
    1b9e:	fd 1e       	adc	r15, r29
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    1baa:	8e 01       	movw	r16, r28
    1bac:	0f 5e       	subi	r16, 0xEF	; 239
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	05 96       	adiw	r24, 0x05	; 5
    1bb4:	b8 01       	movw	r22, r16
    1bb6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    1bba:	89 85       	ldd	r24, Y+9	; 0x09
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	40 f0       	brcs	.+16     	; 0x1bd0 <__ltsf2+0x56>
    1bc0:	89 89       	ldd	r24, Y+17	; 0x11
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	28 f0       	brcs	.+10     	; 0x1bd0 <__ltsf2+0x56>
    1bc6:	c7 01       	movw	r24, r14
    1bc8:	b8 01       	movw	r22, r16
    1bca:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__fpcmp_parts_f>
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <__ltsf2+0x58>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	68 96       	adiw	r28, 0x18	; 24
    1bd4:	e6 e0       	ldi	r30, 0x06	; 6
    1bd6:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

00001bda <__lesf2>:
    1bda:	a8 e1       	ldi	r26, 0x18	; 24
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e3 ef       	ldi	r30, 0xF3	; 243
    1be0:	fd e0       	ldi	r31, 0x0D	; 13
    1be2:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
    1be6:	69 83       	std	Y+1, r22	; 0x01
    1be8:	7a 83       	std	Y+2, r23	; 0x02
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    1bec:	9c 83       	std	Y+4, r25	; 0x04
    1bee:	2d 83       	std	Y+5, r18	; 0x05
    1bf0:	3e 83       	std	Y+6, r19	; 0x06
    1bf2:	4f 83       	std	Y+7, r20	; 0x07
    1bf4:	58 87       	std	Y+8, r21	; 0x08
    1bf6:	89 e0       	ldi	r24, 0x09	; 9
    1bf8:	e8 2e       	mov	r14, r24
    1bfa:	f1 2c       	mov	r15, r1
    1bfc:	ec 0e       	add	r14, r28
    1bfe:	fd 1e       	adc	r15, r29
    1c00:	ce 01       	movw	r24, r28
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	b7 01       	movw	r22, r14
    1c06:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    1c0a:	8e 01       	movw	r16, r28
    1c0c:	0f 5e       	subi	r16, 0xEF	; 239
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	ce 01       	movw	r24, r28
    1c12:	05 96       	adiw	r24, 0x05	; 5
    1c14:	b8 01       	movw	r22, r16
    1c16:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	82 30       	cpi	r24, 0x02	; 2
    1c1e:	40 f0       	brcs	.+16     	; 0x1c30 <__lesf2+0x56>
    1c20:	89 89       	ldd	r24, Y+17	; 0x11
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	28 f0       	brcs	.+10     	; 0x1c30 <__lesf2+0x56>
    1c26:	c7 01       	movw	r24, r14
    1c28:	b8 01       	movw	r22, r16
    1c2a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__fpcmp_parts_f>
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <__lesf2+0x58>
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	68 96       	adiw	r28, 0x18	; 24
    1c34:	e6 e0       	ldi	r30, 0x06	; 6
    1c36:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

00001c3a <__floatsisf>:
    1c3a:	a8 e0       	ldi	r26, 0x08	; 8
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e3 e2       	ldi	r30, 0x23	; 35
    1c40:	fe e0       	ldi	r31, 0x0E	; 14
    1c42:	0c 94 46 11 	jmp	0x228c	; 0x228c <__prologue_saves__+0x12>
    1c46:	9b 01       	movw	r18, r22
    1c48:	ac 01       	movw	r20, r24
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	da 01       	movw	r26, r20
    1c50:	c9 01       	movw	r24, r18
    1c52:	88 27       	eor	r24, r24
    1c54:	b7 fd       	sbrc	r27, 7
    1c56:	83 95       	inc	r24
    1c58:	99 27       	eor	r25, r25
    1c5a:	aa 27       	eor	r26, r26
    1c5c:	bb 27       	eor	r27, r27
    1c5e:	b8 2e       	mov	r11, r24
    1c60:	21 15       	cp	r18, r1
    1c62:	31 05       	cpc	r19, r1
    1c64:	41 05       	cpc	r20, r1
    1c66:	51 05       	cpc	r21, r1
    1c68:	19 f4       	brne	.+6      	; 0x1c70 <__floatsisf+0x36>
    1c6a:	82 e0       	ldi	r24, 0x02	; 2
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	3a c0       	rjmp	.+116    	; 0x1ce4 <__floatsisf+0xaa>
    1c70:	88 23       	and	r24, r24
    1c72:	a9 f0       	breq	.+42     	; 0x1c9e <__floatsisf+0x64>
    1c74:	20 30       	cpi	r18, 0x00	; 0
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	38 07       	cpc	r19, r24
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	48 07       	cpc	r20, r24
    1c7e:	80 e8       	ldi	r24, 0x80	; 128
    1c80:	58 07       	cpc	r21, r24
    1c82:	29 f4       	brne	.+10     	; 0x1c8e <__floatsisf+0x54>
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	9f ec       	ldi	r25, 0xCF	; 207
    1c8c:	30 c0       	rjmp	.+96     	; 0x1cee <__floatsisf+0xb4>
    1c8e:	ee 24       	eor	r14, r14
    1c90:	ff 24       	eor	r15, r15
    1c92:	87 01       	movw	r16, r14
    1c94:	e2 1a       	sub	r14, r18
    1c96:	f3 0a       	sbc	r15, r19
    1c98:	04 0b       	sbc	r16, r20
    1c9a:	15 0b       	sbc	r17, r21
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <__floatsisf+0x68>
    1c9e:	79 01       	movw	r14, r18
    1ca0:	8a 01       	movw	r16, r20
    1ca2:	8e e1       	ldi	r24, 0x1E	; 30
    1ca4:	c8 2e       	mov	r12, r24
    1ca6:	d1 2c       	mov	r13, r1
    1ca8:	dc 82       	std	Y+4, r13	; 0x04
    1caa:	cb 82       	std	Y+3, r12	; 0x03
    1cac:	ed 82       	std	Y+5, r14	; 0x05
    1cae:	fe 82       	std	Y+6, r15	; 0x06
    1cb0:	0f 83       	std	Y+7, r16	; 0x07
    1cb2:	18 87       	std	Y+8, r17	; 0x08
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	b7 01       	movw	r22, r14
    1cb8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__clzsi2>
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	18 16       	cp	r1, r24
    1cc0:	19 06       	cpc	r1, r25
    1cc2:	84 f4       	brge	.+32     	; 0x1ce4 <__floatsisf+0xaa>
    1cc4:	08 2e       	mov	r0, r24
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <__floatsisf+0x96>
    1cc8:	ee 0c       	add	r14, r14
    1cca:	ff 1c       	adc	r15, r15
    1ccc:	00 1f       	adc	r16, r16
    1cce:	11 1f       	adc	r17, r17
    1cd0:	0a 94       	dec	r0
    1cd2:	d2 f7       	brpl	.-12     	; 0x1cc8 <__floatsisf+0x8e>
    1cd4:	ed 82       	std	Y+5, r14	; 0x05
    1cd6:	fe 82       	std	Y+6, r15	; 0x06
    1cd8:	0f 83       	std	Y+7, r16	; 0x07
    1cda:	18 87       	std	Y+8, r17	; 0x08
    1cdc:	c8 1a       	sub	r12, r24
    1cde:	d9 0a       	sbc	r13, r25
    1ce0:	dc 82       	std	Y+4, r13	; 0x04
    1ce2:	cb 82       	std	Y+3, r12	; 0x03
    1ce4:	ba 82       	std	Y+2, r11	; 0x02
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__pack_f>
    1cee:	28 96       	adiw	r28, 0x08	; 8
    1cf0:	e9 e0       	ldi	r30, 0x09	; 9
    1cf2:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__epilogue_restores__+0x12>

00001cf6 <__fixsfsi>:
    1cf6:	ac e0       	ldi	r26, 0x0C	; 12
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e1 e8       	ldi	r30, 0x81	; 129
    1cfc:	fe e0       	ldi	r31, 0x0E	; 14
    1cfe:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__prologue_saves__+0x20>
    1d02:	69 83       	std	Y+1, r22	; 0x01
    1d04:	7a 83       	std	Y+2, r23	; 0x02
    1d06:	8b 83       	std	Y+3, r24	; 0x03
    1d08:	9c 83       	std	Y+4, r25	; 0x04
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	be 01       	movw	r22, r28
    1d10:	6b 5f       	subi	r22, 0xFB	; 251
    1d12:	7f 4f       	sbci	r23, 0xFF	; 255
    1d14:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__unpack_f>
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	61 f1       	breq	.+88     	; 0x1d76 <__fixsfsi+0x80>
    1d1e:	82 30       	cpi	r24, 0x02	; 2
    1d20:	50 f1       	brcs	.+84     	; 0x1d76 <__fixsfsi+0x80>
    1d22:	84 30       	cpi	r24, 0x04	; 4
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <__fixsfsi+0x38>
    1d26:	8e 81       	ldd	r24, Y+6	; 0x06
    1d28:	88 23       	and	r24, r24
    1d2a:	51 f1       	breq	.+84     	; 0x1d80 <__fixsfsi+0x8a>
    1d2c:	2e c0       	rjmp	.+92     	; 0x1d8a <__fixsfsi+0x94>
    1d2e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d30:	38 85       	ldd	r19, Y+8	; 0x08
    1d32:	37 fd       	sbrc	r19, 7
    1d34:	20 c0       	rjmp	.+64     	; 0x1d76 <__fixsfsi+0x80>
    1d36:	6e 81       	ldd	r22, Y+6	; 0x06
    1d38:	2f 31       	cpi	r18, 0x1F	; 31
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	1c f0       	brlt	.+6      	; 0x1d44 <__fixsfsi+0x4e>
    1d3e:	66 23       	and	r22, r22
    1d40:	f9 f0       	breq	.+62     	; 0x1d80 <__fixsfsi+0x8a>
    1d42:	23 c0       	rjmp	.+70     	; 0x1d8a <__fixsfsi+0x94>
    1d44:	8e e1       	ldi	r24, 0x1E	; 30
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	82 1b       	sub	r24, r18
    1d4a:	93 0b       	sbc	r25, r19
    1d4c:	29 85       	ldd	r18, Y+9	; 0x09
    1d4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d50:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d52:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d54:	04 c0       	rjmp	.+8      	; 0x1d5e <__fixsfsi+0x68>
    1d56:	56 95       	lsr	r21
    1d58:	47 95       	ror	r20
    1d5a:	37 95       	ror	r19
    1d5c:	27 95       	ror	r18
    1d5e:	8a 95       	dec	r24
    1d60:	d2 f7       	brpl	.-12     	; 0x1d56 <__fixsfsi+0x60>
    1d62:	66 23       	and	r22, r22
    1d64:	b1 f0       	breq	.+44     	; 0x1d92 <__fixsfsi+0x9c>
    1d66:	50 95       	com	r21
    1d68:	40 95       	com	r20
    1d6a:	30 95       	com	r19
    1d6c:	21 95       	neg	r18
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	4f 4f       	sbci	r20, 0xFF	; 255
    1d72:	5f 4f       	sbci	r21, 0xFF	; 255
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <__fixsfsi+0x9c>
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <__fixsfsi+0x9c>
    1d80:	2f ef       	ldi	r18, 0xFF	; 255
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	4f ef       	ldi	r20, 0xFF	; 255
    1d86:	5f e7       	ldi	r21, 0x7F	; 127
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <__fixsfsi+0x9c>
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	50 e8       	ldi	r21, 0x80	; 128
    1d92:	b9 01       	movw	r22, r18
    1d94:	ca 01       	movw	r24, r20
    1d96:	2c 96       	adiw	r28, 0x0c	; 12
    1d98:	e2 e0       	ldi	r30, 0x02	; 2
    1d9a:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__epilogue_restores__+0x20>

00001d9e <__floatunsisf>:
    1d9e:	a8 e0       	ldi	r26, 0x08	; 8
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 ed       	ldi	r30, 0xD5	; 213
    1da4:	fe e0       	ldi	r31, 0x0E	; 14
    1da6:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x10>
    1daa:	7b 01       	movw	r14, r22
    1dac:	8c 01       	movw	r16, r24
    1dae:	61 15       	cp	r22, r1
    1db0:	71 05       	cpc	r23, r1
    1db2:	81 05       	cpc	r24, r1
    1db4:	91 05       	cpc	r25, r1
    1db6:	19 f4       	brne	.+6      	; 0x1dbe <__floatunsisf+0x20>
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	60 c0       	rjmp	.+192    	; 0x1e7e <__floatunsisf+0xe0>
    1dbe:	83 e0       	ldi	r24, 0x03	; 3
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	8e e1       	ldi	r24, 0x1E	; 30
    1dc4:	c8 2e       	mov	r12, r24
    1dc6:	d1 2c       	mov	r13, r1
    1dc8:	dc 82       	std	Y+4, r13	; 0x04
    1dca:	cb 82       	std	Y+3, r12	; 0x03
    1dcc:	ed 82       	std	Y+5, r14	; 0x05
    1dce:	fe 82       	std	Y+6, r15	; 0x06
    1dd0:	0f 83       	std	Y+7, r16	; 0x07
    1dd2:	18 87       	std	Y+8, r17	; 0x08
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	b7 01       	movw	r22, r14
    1dd8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__clzsi2>
    1ddc:	fc 01       	movw	r30, r24
    1dde:	31 97       	sbiw	r30, 0x01	; 1
    1de0:	f7 ff       	sbrs	r31, 7
    1de2:	3b c0       	rjmp	.+118    	; 0x1e5a <__floatunsisf+0xbc>
    1de4:	22 27       	eor	r18, r18
    1de6:	33 27       	eor	r19, r19
    1de8:	2e 1b       	sub	r18, r30
    1dea:	3f 0b       	sbc	r19, r31
    1dec:	57 01       	movw	r10, r14
    1dee:	68 01       	movw	r12, r16
    1df0:	02 2e       	mov	r0, r18
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <__floatunsisf+0x5e>
    1df4:	d6 94       	lsr	r13
    1df6:	c7 94       	ror	r12
    1df8:	b7 94       	ror	r11
    1dfa:	a7 94       	ror	r10
    1dfc:	0a 94       	dec	r0
    1dfe:	d2 f7       	brpl	.-12     	; 0x1df4 <__floatunsisf+0x56>
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a0 e0       	ldi	r26, 0x00	; 0
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	04 c0       	rjmp	.+8      	; 0x1e1a <__floatunsisf+0x7c>
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	aa 1f       	adc	r26, r26
    1e18:	bb 1f       	adc	r27, r27
    1e1a:	2a 95       	dec	r18
    1e1c:	d2 f7       	brpl	.-12     	; 0x1e12 <__floatunsisf+0x74>
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	a1 09       	sbc	r26, r1
    1e22:	b1 09       	sbc	r27, r1
    1e24:	8e 21       	and	r24, r14
    1e26:	9f 21       	and	r25, r15
    1e28:	a0 23       	and	r26, r16
    1e2a:	b1 23       	and	r27, r17
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	a1 05       	cpc	r26, r1
    1e30:	b1 05       	cpc	r27, r1
    1e32:	21 f0       	breq	.+8      	; 0x1e3c <__floatunsisf+0x9e>
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	4a 29       	or	r20, r10
    1e3e:	5b 29       	or	r21, r11
    1e40:	6c 29       	or	r22, r12
    1e42:	7d 29       	or	r23, r13
    1e44:	4d 83       	std	Y+5, r20	; 0x05
    1e46:	5e 83       	std	Y+6, r21	; 0x06
    1e48:	6f 83       	std	Y+7, r22	; 0x07
    1e4a:	78 87       	std	Y+8, r23	; 0x08
    1e4c:	8e e1       	ldi	r24, 0x1E	; 30
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	8e 1b       	sub	r24, r30
    1e52:	9f 0b       	sbc	r25, r31
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
    1e58:	12 c0       	rjmp	.+36     	; 0x1e7e <__floatunsisf+0xe0>
    1e5a:	30 97       	sbiw	r30, 0x00	; 0
    1e5c:	81 f0       	breq	.+32     	; 0x1e7e <__floatunsisf+0xe0>
    1e5e:	0e 2e       	mov	r0, r30
    1e60:	04 c0       	rjmp	.+8      	; 0x1e6a <__floatunsisf+0xcc>
    1e62:	ee 0c       	add	r14, r14
    1e64:	ff 1c       	adc	r15, r15
    1e66:	00 1f       	adc	r16, r16
    1e68:	11 1f       	adc	r17, r17
    1e6a:	0a 94       	dec	r0
    1e6c:	d2 f7       	brpl	.-12     	; 0x1e62 <__floatunsisf+0xc4>
    1e6e:	ed 82       	std	Y+5, r14	; 0x05
    1e70:	fe 82       	std	Y+6, r15	; 0x06
    1e72:	0f 83       	std	Y+7, r16	; 0x07
    1e74:	18 87       	std	Y+8, r17	; 0x08
    1e76:	ce 1a       	sub	r12, r30
    1e78:	df 0a       	sbc	r13, r31
    1e7a:	dc 82       	std	Y+4, r13	; 0x04
    1e7c:	cb 82       	std	Y+3, r12	; 0x03
    1e7e:	1a 82       	std	Y+2, r1	; 0x02
    1e80:	ce 01       	movw	r24, r28
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__pack_f>
    1e88:	28 96       	adiw	r28, 0x08	; 8
    1e8a:	ea e0       	ldi	r30, 0x0A	; 10
    1e8c:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x10>

00001e90 <__clzsi2>:
    1e90:	ef 92       	push	r14
    1e92:	ff 92       	push	r15
    1e94:	0f 93       	push	r16
    1e96:	1f 93       	push	r17
    1e98:	7b 01       	movw	r14, r22
    1e9a:	8c 01       	movw	r16, r24
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	e8 16       	cp	r14, r24
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	f8 06       	cpc	r15, r24
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	08 07       	cpc	r16, r24
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	18 07       	cpc	r17, r24
    1eac:	88 f4       	brcc	.+34     	; 0x1ed0 <__clzsi2+0x40>
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	e8 16       	cp	r14, r24
    1eb2:	f1 04       	cpc	r15, r1
    1eb4:	01 05       	cpc	r16, r1
    1eb6:	11 05       	cpc	r17, r1
    1eb8:	31 f0       	breq	.+12     	; 0x1ec6 <__clzsi2+0x36>
    1eba:	28 f0       	brcs	.+10     	; 0x1ec6 <__clzsi2+0x36>
    1ebc:	88 e0       	ldi	r24, 0x08	; 8
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e0       	ldi	r26, 0x00	; 0
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	17 c0       	rjmp	.+46     	; 0x1ef4 <__clzsi2+0x64>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e0       	ldi	r26, 0x00	; 0
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	12 c0       	rjmp	.+36     	; 0x1ef4 <__clzsi2+0x64>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	e8 16       	cp	r14, r24
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	f8 06       	cpc	r15, r24
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	08 07       	cpc	r16, r24
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	18 07       	cpc	r17, r24
    1ee0:	28 f0       	brcs	.+10     	; 0x1eec <__clzsi2+0x5c>
    1ee2:	88 e1       	ldi	r24, 0x18	; 24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a0 e0       	ldi	r26, 0x00	; 0
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	04 c0       	rjmp	.+8      	; 0x1ef4 <__clzsi2+0x64>
    1eec:	80 e1       	ldi	r24, 0x10	; 16
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	20 e2       	ldi	r18, 0x20	; 32
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	28 1b       	sub	r18, r24
    1efe:	39 0b       	sbc	r19, r25
    1f00:	4a 0b       	sbc	r20, r26
    1f02:	5b 0b       	sbc	r21, r27
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <__clzsi2+0x7e>
    1f06:	16 95       	lsr	r17
    1f08:	07 95       	ror	r16
    1f0a:	f7 94       	ror	r15
    1f0c:	e7 94       	ror	r14
    1f0e:	8a 95       	dec	r24
    1f10:	d2 f7       	brpl	.-12     	; 0x1f06 <__clzsi2+0x76>
    1f12:	f7 01       	movw	r30, r14
    1f14:	e8 5f       	subi	r30, 0xF8	; 248
    1f16:	fd 4f       	sbci	r31, 0xFD	; 253
    1f18:	80 81       	ld	r24, Z
    1f1a:	28 1b       	sub	r18, r24
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	41 09       	sbc	r20, r1
    1f20:	51 09       	sbc	r21, r1
    1f22:	c9 01       	movw	r24, r18
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	08 95       	ret

00001f2e <__pack_f>:
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	fc 01       	movw	r30, r24
    1f3a:	e4 80       	ldd	r14, Z+4	; 0x04
    1f3c:	f5 80       	ldd	r15, Z+5	; 0x05
    1f3e:	06 81       	ldd	r16, Z+6	; 0x06
    1f40:	17 81       	ldd	r17, Z+7	; 0x07
    1f42:	d1 80       	ldd	r13, Z+1	; 0x01
    1f44:	80 81       	ld	r24, Z
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	48 f4       	brcc	.+18     	; 0x1f5c <__pack_f+0x2e>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a0 e1       	ldi	r26, 0x10	; 16
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e8 2a       	or	r14, r24
    1f54:	f9 2a       	or	r15, r25
    1f56:	0a 2b       	or	r16, r26
    1f58:	1b 2b       	or	r17, r27
    1f5a:	a5 c0       	rjmp	.+330    	; 0x20a6 <__pack_f+0x178>
    1f5c:	84 30       	cpi	r24, 0x04	; 4
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <__pack_f+0x34>
    1f60:	9f c0       	rjmp	.+318    	; 0x20a0 <__pack_f+0x172>
    1f62:	82 30       	cpi	r24, 0x02	; 2
    1f64:	21 f4       	brne	.+8      	; 0x1f6e <__pack_f+0x40>
    1f66:	ee 24       	eor	r14, r14
    1f68:	ff 24       	eor	r15, r15
    1f6a:	87 01       	movw	r16, r14
    1f6c:	05 c0       	rjmp	.+10     	; 0x1f78 <__pack_f+0x4a>
    1f6e:	e1 14       	cp	r14, r1
    1f70:	f1 04       	cpc	r15, r1
    1f72:	01 05       	cpc	r16, r1
    1f74:	11 05       	cpc	r17, r1
    1f76:	19 f4       	brne	.+6      	; 0x1f7e <__pack_f+0x50>
    1f78:	e0 e0       	ldi	r30, 0x00	; 0
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	96 c0       	rjmp	.+300    	; 0x20aa <__pack_f+0x17c>
    1f7e:	62 81       	ldd	r22, Z+2	; 0x02
    1f80:	73 81       	ldd	r23, Z+3	; 0x03
    1f82:	9f ef       	ldi	r25, 0xFF	; 255
    1f84:	62 38       	cpi	r22, 0x82	; 130
    1f86:	79 07       	cpc	r23, r25
    1f88:	0c f0       	brlt	.+2      	; 0x1f8c <__pack_f+0x5e>
    1f8a:	5b c0       	rjmp	.+182    	; 0x2042 <__pack_f+0x114>
    1f8c:	22 e8       	ldi	r18, 0x82	; 130
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	26 1b       	sub	r18, r22
    1f92:	37 0b       	sbc	r19, r23
    1f94:	2a 31       	cpi	r18, 0x1A	; 26
    1f96:	31 05       	cpc	r19, r1
    1f98:	2c f0       	brlt	.+10     	; 0x1fa4 <__pack_f+0x76>
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	2a c0       	rjmp	.+84     	; 0x1ff8 <__pack_f+0xca>
    1fa4:	b8 01       	movw	r22, r16
    1fa6:	a7 01       	movw	r20, r14
    1fa8:	02 2e       	mov	r0, r18
    1faa:	04 c0       	rjmp	.+8      	; 0x1fb4 <__pack_f+0x86>
    1fac:	76 95       	lsr	r23
    1fae:	67 95       	ror	r22
    1fb0:	57 95       	ror	r21
    1fb2:	47 95       	ror	r20
    1fb4:	0a 94       	dec	r0
    1fb6:	d2 f7       	brpl	.-12     	; 0x1fac <__pack_f+0x7e>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e0       	ldi	r26, 0x00	; 0
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <__pack_f+0x9c>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	aa 1f       	adc	r26, r26
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	2a 95       	dec	r18
    1fcc:	d2 f7       	brpl	.-12     	; 0x1fc2 <__pack_f+0x94>
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	a1 09       	sbc	r26, r1
    1fd2:	b1 09       	sbc	r27, r1
    1fd4:	8e 21       	and	r24, r14
    1fd6:	9f 21       	and	r25, r15
    1fd8:	a0 23       	and	r26, r16
    1fda:	b1 23       	and	r27, r17
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	a1 05       	cpc	r26, r1
    1fe0:	b1 05       	cpc	r27, r1
    1fe2:	21 f0       	breq	.+8      	; 0x1fec <__pack_f+0xbe>
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 e0       	ldi	r26, 0x00	; 0
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	9a 01       	movw	r18, r20
    1fee:	ab 01       	movw	r20, r22
    1ff0:	28 2b       	or	r18, r24
    1ff2:	39 2b       	or	r19, r25
    1ff4:	4a 2b       	or	r20, r26
    1ff6:	5b 2b       	or	r21, r27
    1ff8:	da 01       	movw	r26, r20
    1ffa:	c9 01       	movw	r24, r18
    1ffc:	8f 77       	andi	r24, 0x7F	; 127
    1ffe:	90 70       	andi	r25, 0x00	; 0
    2000:	a0 70       	andi	r26, 0x00	; 0
    2002:	b0 70       	andi	r27, 0x00	; 0
    2004:	80 34       	cpi	r24, 0x40	; 64
    2006:	91 05       	cpc	r25, r1
    2008:	a1 05       	cpc	r26, r1
    200a:	b1 05       	cpc	r27, r1
    200c:	39 f4       	brne	.+14     	; 0x201c <__pack_f+0xee>
    200e:	27 ff       	sbrs	r18, 7
    2010:	09 c0       	rjmp	.+18     	; 0x2024 <__pack_f+0xf6>
    2012:	20 5c       	subi	r18, 0xC0	; 192
    2014:	3f 4f       	sbci	r19, 0xFF	; 255
    2016:	4f 4f       	sbci	r20, 0xFF	; 255
    2018:	5f 4f       	sbci	r21, 0xFF	; 255
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <__pack_f+0xf6>
    201c:	21 5c       	subi	r18, 0xC1	; 193
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	4f 4f       	sbci	r20, 0xFF	; 255
    2022:	5f 4f       	sbci	r21, 0xFF	; 255
    2024:	e0 e0       	ldi	r30, 0x00	; 0
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	20 30       	cpi	r18, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	3a 07       	cpc	r19, r26
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	4a 07       	cpc	r20, r26
    2032:	a0 e4       	ldi	r26, 0x40	; 64
    2034:	5a 07       	cpc	r21, r26
    2036:	10 f0       	brcs	.+4      	; 0x203c <__pack_f+0x10e>
    2038:	e1 e0       	ldi	r30, 0x01	; 1
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	79 01       	movw	r14, r18
    203e:	8a 01       	movw	r16, r20
    2040:	27 c0       	rjmp	.+78     	; 0x2090 <__pack_f+0x162>
    2042:	60 38       	cpi	r22, 0x80	; 128
    2044:	71 05       	cpc	r23, r1
    2046:	64 f5       	brge	.+88     	; 0x20a0 <__pack_f+0x172>
    2048:	fb 01       	movw	r30, r22
    204a:	e1 58       	subi	r30, 0x81	; 129
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	d8 01       	movw	r26, r16
    2050:	c7 01       	movw	r24, r14
    2052:	8f 77       	andi	r24, 0x7F	; 127
    2054:	90 70       	andi	r25, 0x00	; 0
    2056:	a0 70       	andi	r26, 0x00	; 0
    2058:	b0 70       	andi	r27, 0x00	; 0
    205a:	80 34       	cpi	r24, 0x40	; 64
    205c:	91 05       	cpc	r25, r1
    205e:	a1 05       	cpc	r26, r1
    2060:	b1 05       	cpc	r27, r1
    2062:	39 f4       	brne	.+14     	; 0x2072 <__pack_f+0x144>
    2064:	e7 fe       	sbrs	r14, 7
    2066:	0d c0       	rjmp	.+26     	; 0x2082 <__pack_f+0x154>
    2068:	80 e4       	ldi	r24, 0x40	; 64
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e0       	ldi	r26, 0x00	; 0
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	04 c0       	rjmp	.+8      	; 0x207a <__pack_f+0x14c>
    2072:	8f e3       	ldi	r24, 0x3F	; 63
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e0       	ldi	r26, 0x00	; 0
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e8 0e       	add	r14, r24
    207c:	f9 1e       	adc	r15, r25
    207e:	0a 1f       	adc	r16, r26
    2080:	1b 1f       	adc	r17, r27
    2082:	17 ff       	sbrs	r17, 7
    2084:	05 c0       	rjmp	.+10     	; 0x2090 <__pack_f+0x162>
    2086:	16 95       	lsr	r17
    2088:	07 95       	ror	r16
    208a:	f7 94       	ror	r15
    208c:	e7 94       	ror	r14
    208e:	31 96       	adiw	r30, 0x01	; 1
    2090:	87 e0       	ldi	r24, 0x07	; 7
    2092:	16 95       	lsr	r17
    2094:	07 95       	ror	r16
    2096:	f7 94       	ror	r15
    2098:	e7 94       	ror	r14
    209a:	8a 95       	dec	r24
    209c:	d1 f7       	brne	.-12     	; 0x2092 <__pack_f+0x164>
    209e:	05 c0       	rjmp	.+10     	; 0x20aa <__pack_f+0x17c>
    20a0:	ee 24       	eor	r14, r14
    20a2:	ff 24       	eor	r15, r15
    20a4:	87 01       	movw	r16, r14
    20a6:	ef ef       	ldi	r30, 0xFF	; 255
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	6e 2f       	mov	r22, r30
    20ac:	67 95       	ror	r22
    20ae:	66 27       	eor	r22, r22
    20b0:	67 95       	ror	r22
    20b2:	90 2f       	mov	r25, r16
    20b4:	9f 77       	andi	r25, 0x7F	; 127
    20b6:	d7 94       	ror	r13
    20b8:	dd 24       	eor	r13, r13
    20ba:	d7 94       	ror	r13
    20bc:	8e 2f       	mov	r24, r30
    20be:	86 95       	lsr	r24
    20c0:	49 2f       	mov	r20, r25
    20c2:	46 2b       	or	r20, r22
    20c4:	58 2f       	mov	r21, r24
    20c6:	5d 29       	or	r21, r13
    20c8:	b7 01       	movw	r22, r14
    20ca:	ca 01       	movw	r24, r20
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	ff 90       	pop	r15
    20d2:	ef 90       	pop	r14
    20d4:	df 90       	pop	r13
    20d6:	08 95       	ret

000020d8 <__unpack_f>:
    20d8:	fc 01       	movw	r30, r24
    20da:	db 01       	movw	r26, r22
    20dc:	40 81       	ld	r20, Z
    20de:	51 81       	ldd	r21, Z+1	; 0x01
    20e0:	22 81       	ldd	r18, Z+2	; 0x02
    20e2:	62 2f       	mov	r22, r18
    20e4:	6f 77       	andi	r22, 0x7F	; 127
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	22 1f       	adc	r18, r18
    20ea:	22 27       	eor	r18, r18
    20ec:	22 1f       	adc	r18, r18
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	89 2f       	mov	r24, r25
    20f2:	88 0f       	add	r24, r24
    20f4:	82 2b       	or	r24, r18
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	99 1f       	adc	r25, r25
    20fc:	99 27       	eor	r25, r25
    20fe:	99 1f       	adc	r25, r25
    2100:	11 96       	adiw	r26, 0x01	; 1
    2102:	9c 93       	st	X, r25
    2104:	11 97       	sbiw	r26, 0x01	; 1
    2106:	21 15       	cp	r18, r1
    2108:	31 05       	cpc	r19, r1
    210a:	a9 f5       	brne	.+106    	; 0x2176 <__unpack_f+0x9e>
    210c:	41 15       	cp	r20, r1
    210e:	51 05       	cpc	r21, r1
    2110:	61 05       	cpc	r22, r1
    2112:	71 05       	cpc	r23, r1
    2114:	11 f4       	brne	.+4      	; 0x211a <__unpack_f+0x42>
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	37 c0       	rjmp	.+110    	; 0x2188 <__unpack_f+0xb0>
    211a:	82 e8       	ldi	r24, 0x82	; 130
    211c:	9f ef       	ldi	r25, 0xFF	; 255
    211e:	13 96       	adiw	r26, 0x03	; 3
    2120:	9c 93       	st	X, r25
    2122:	8e 93       	st	-X, r24
    2124:	12 97       	sbiw	r26, 0x02	; 2
    2126:	9a 01       	movw	r18, r20
    2128:	ab 01       	movw	r20, r22
    212a:	67 e0       	ldi	r22, 0x07	; 7
    212c:	22 0f       	add	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	44 1f       	adc	r20, r20
    2132:	55 1f       	adc	r21, r21
    2134:	6a 95       	dec	r22
    2136:	d1 f7       	brne	.-12     	; 0x212c <__unpack_f+0x54>
    2138:	83 e0       	ldi	r24, 0x03	; 3
    213a:	8c 93       	st	X, r24
    213c:	0d c0       	rjmp	.+26     	; 0x2158 <__unpack_f+0x80>
    213e:	22 0f       	add	r18, r18
    2140:	33 1f       	adc	r19, r19
    2142:	44 1f       	adc	r20, r20
    2144:	55 1f       	adc	r21, r21
    2146:	12 96       	adiw	r26, 0x02	; 2
    2148:	8d 91       	ld	r24, X+
    214a:	9c 91       	ld	r25, X
    214c:	13 97       	sbiw	r26, 0x03	; 3
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	13 96       	adiw	r26, 0x03	; 3
    2152:	9c 93       	st	X, r25
    2154:	8e 93       	st	-X, r24
    2156:	12 97       	sbiw	r26, 0x02	; 2
    2158:	20 30       	cpi	r18, 0x00	; 0
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	38 07       	cpc	r19, r24
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	48 07       	cpc	r20, r24
    2162:	80 e4       	ldi	r24, 0x40	; 64
    2164:	58 07       	cpc	r21, r24
    2166:	58 f3       	brcs	.-42     	; 0x213e <__unpack_f+0x66>
    2168:	14 96       	adiw	r26, 0x04	; 4
    216a:	2d 93       	st	X+, r18
    216c:	3d 93       	st	X+, r19
    216e:	4d 93       	st	X+, r20
    2170:	5c 93       	st	X, r21
    2172:	17 97       	sbiw	r26, 0x07	; 7
    2174:	08 95       	ret
    2176:	2f 3f       	cpi	r18, 0xFF	; 255
    2178:	31 05       	cpc	r19, r1
    217a:	79 f4       	brne	.+30     	; 0x219a <__unpack_f+0xc2>
    217c:	41 15       	cp	r20, r1
    217e:	51 05       	cpc	r21, r1
    2180:	61 05       	cpc	r22, r1
    2182:	71 05       	cpc	r23, r1
    2184:	19 f4       	brne	.+6      	; 0x218c <__unpack_f+0xb4>
    2186:	84 e0       	ldi	r24, 0x04	; 4
    2188:	8c 93       	st	X, r24
    218a:	08 95       	ret
    218c:	64 ff       	sbrs	r22, 4
    218e:	03 c0       	rjmp	.+6      	; 0x2196 <__unpack_f+0xbe>
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	8c 93       	st	X, r24
    2194:	12 c0       	rjmp	.+36     	; 0x21ba <__unpack_f+0xe2>
    2196:	1c 92       	st	X, r1
    2198:	10 c0       	rjmp	.+32     	; 0x21ba <__unpack_f+0xe2>
    219a:	2f 57       	subi	r18, 0x7F	; 127
    219c:	30 40       	sbci	r19, 0x00	; 0
    219e:	13 96       	adiw	r26, 0x03	; 3
    21a0:	3c 93       	st	X, r19
    21a2:	2e 93       	st	-X, r18
    21a4:	12 97       	sbiw	r26, 0x02	; 2
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	8c 93       	st	X, r24
    21aa:	87 e0       	ldi	r24, 0x07	; 7
    21ac:	44 0f       	add	r20, r20
    21ae:	55 1f       	adc	r21, r21
    21b0:	66 1f       	adc	r22, r22
    21b2:	77 1f       	adc	r23, r23
    21b4:	8a 95       	dec	r24
    21b6:	d1 f7       	brne	.-12     	; 0x21ac <__unpack_f+0xd4>
    21b8:	70 64       	ori	r23, 0x40	; 64
    21ba:	14 96       	adiw	r26, 0x04	; 4
    21bc:	4d 93       	st	X+, r20
    21be:	5d 93       	st	X+, r21
    21c0:	6d 93       	st	X+, r22
    21c2:	7c 93       	st	X, r23
    21c4:	17 97       	sbiw	r26, 0x07	; 7
    21c6:	08 95       	ret

000021c8 <__fpcmp_parts_f>:
    21c8:	1f 93       	push	r17
    21ca:	dc 01       	movw	r26, r24
    21cc:	fb 01       	movw	r30, r22
    21ce:	9c 91       	ld	r25, X
    21d0:	92 30       	cpi	r25, 0x02	; 2
    21d2:	08 f4       	brcc	.+2      	; 0x21d6 <__fpcmp_parts_f+0xe>
    21d4:	47 c0       	rjmp	.+142    	; 0x2264 <__stack+0x65>
    21d6:	80 81       	ld	r24, Z
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	08 f4       	brcc	.+2      	; 0x21de <__fpcmp_parts_f+0x16>
    21dc:	43 c0       	rjmp	.+134    	; 0x2264 <__stack+0x65>
    21de:	94 30       	cpi	r25, 0x04	; 4
    21e0:	51 f4       	brne	.+20     	; 0x21f6 <__fpcmp_parts_f+0x2e>
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	1c 91       	ld	r17, X
    21e6:	84 30       	cpi	r24, 0x04	; 4
    21e8:	99 f5       	brne	.+102    	; 0x2250 <__stack+0x51>
    21ea:	81 81       	ldd	r24, Z+1	; 0x01
    21ec:	68 2f       	mov	r22, r24
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	61 1b       	sub	r22, r17
    21f2:	71 09       	sbc	r23, r1
    21f4:	3f c0       	rjmp	.+126    	; 0x2274 <__stack+0x75>
    21f6:	84 30       	cpi	r24, 0x04	; 4
    21f8:	21 f0       	breq	.+8      	; 0x2202 <__stack+0x3>
    21fa:	92 30       	cpi	r25, 0x02	; 2
    21fc:	31 f4       	brne	.+12     	; 0x220a <__stack+0xb>
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	b9 f1       	breq	.+110    	; 0x2270 <__stack+0x71>
    2202:	81 81       	ldd	r24, Z+1	; 0x01
    2204:	88 23       	and	r24, r24
    2206:	89 f1       	breq	.+98     	; 0x226a <__stack+0x6b>
    2208:	2d c0       	rjmp	.+90     	; 0x2264 <__stack+0x65>
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	1c 91       	ld	r17, X
    220e:	11 97       	sbiw	r26, 0x01	; 1
    2210:	82 30       	cpi	r24, 0x02	; 2
    2212:	f1 f0       	breq	.+60     	; 0x2250 <__stack+0x51>
    2214:	81 81       	ldd	r24, Z+1	; 0x01
    2216:	18 17       	cp	r17, r24
    2218:	d9 f4       	brne	.+54     	; 0x2250 <__stack+0x51>
    221a:	12 96       	adiw	r26, 0x02	; 2
    221c:	2d 91       	ld	r18, X+
    221e:	3c 91       	ld	r19, X
    2220:	13 97       	sbiw	r26, 0x03	; 3
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	82 17       	cp	r24, r18
    2228:	93 07       	cpc	r25, r19
    222a:	94 f0       	brlt	.+36     	; 0x2250 <__stack+0x51>
    222c:	28 17       	cp	r18, r24
    222e:	39 07       	cpc	r19, r25
    2230:	bc f0       	brlt	.+46     	; 0x2260 <__stack+0x61>
    2232:	14 96       	adiw	r26, 0x04	; 4
    2234:	8d 91       	ld	r24, X+
    2236:	9d 91       	ld	r25, X+
    2238:	0d 90       	ld	r0, X+
    223a:	bc 91       	ld	r27, X
    223c:	a0 2d       	mov	r26, r0
    223e:	24 81       	ldd	r18, Z+4	; 0x04
    2240:	35 81       	ldd	r19, Z+5	; 0x05
    2242:	46 81       	ldd	r20, Z+6	; 0x06
    2244:	57 81       	ldd	r21, Z+7	; 0x07
    2246:	28 17       	cp	r18, r24
    2248:	39 07       	cpc	r19, r25
    224a:	4a 07       	cpc	r20, r26
    224c:	5b 07       	cpc	r21, r27
    224e:	18 f4       	brcc	.+6      	; 0x2256 <__stack+0x57>
    2250:	11 23       	and	r17, r17
    2252:	41 f0       	breq	.+16     	; 0x2264 <__stack+0x65>
    2254:	0a c0       	rjmp	.+20     	; 0x226a <__stack+0x6b>
    2256:	82 17       	cp	r24, r18
    2258:	93 07       	cpc	r25, r19
    225a:	a4 07       	cpc	r26, r20
    225c:	b5 07       	cpc	r27, r21
    225e:	40 f4       	brcc	.+16     	; 0x2270 <__stack+0x71>
    2260:	11 23       	and	r17, r17
    2262:	19 f0       	breq	.+6      	; 0x226a <__stack+0x6b>
    2264:	61 e0       	ldi	r22, 0x01	; 1
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	05 c0       	rjmp	.+10     	; 0x2274 <__stack+0x75>
    226a:	6f ef       	ldi	r22, 0xFF	; 255
    226c:	7f ef       	ldi	r23, 0xFF	; 255
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <__stack+0x75>
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	cb 01       	movw	r24, r22
    2276:	1f 91       	pop	r17
    2278:	08 95       	ret

0000227a <__prologue_saves__>:
    227a:	2f 92       	push	r2
    227c:	3f 92       	push	r3
    227e:	4f 92       	push	r4
    2280:	5f 92       	push	r5
    2282:	6f 92       	push	r6
    2284:	7f 92       	push	r7
    2286:	8f 92       	push	r8
    2288:	9f 92       	push	r9
    228a:	af 92       	push	r10
    228c:	bf 92       	push	r11
    228e:	cf 92       	push	r12
    2290:	df 92       	push	r13
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	ca 1b       	sub	r28, r26
    22a4:	db 0b       	sbc	r29, r27
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	19 94       	eijmp

000022b2 <__epilogue_restores__>:
    22b2:	2a 88       	ldd	r2, Y+18	; 0x12
    22b4:	39 88       	ldd	r3, Y+17	; 0x11
    22b6:	48 88       	ldd	r4, Y+16	; 0x10
    22b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    22ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    22bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    22be:	8c 84       	ldd	r8, Y+12	; 0x0c
    22c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    22c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    22c4:	b9 84       	ldd	r11, Y+9	; 0x09
    22c6:	c8 84       	ldd	r12, Y+8	; 0x08
    22c8:	df 80       	ldd	r13, Y+7	; 0x07
    22ca:	ee 80       	ldd	r14, Y+6	; 0x06
    22cc:	fd 80       	ldd	r15, Y+5	; 0x05
    22ce:	0c 81       	ldd	r16, Y+4	; 0x04
    22d0:	1b 81       	ldd	r17, Y+3	; 0x03
    22d2:	aa 81       	ldd	r26, Y+2	; 0x02
    22d4:	b9 81       	ldd	r27, Y+1	; 0x01
    22d6:	ce 0f       	add	r28, r30
    22d8:	d1 1d       	adc	r29, r1
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	ed 01       	movw	r28, r26
    22e6:	08 95       	ret

000022e8 <_exit>:
    22e8:	f8 94       	cli

000022ea <__stop_program>:
    22ea:	ff cf       	rjmp	.-2      	; 0x22ea <__stop_program>
