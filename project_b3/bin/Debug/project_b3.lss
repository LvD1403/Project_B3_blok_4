
bin\Debug\project_b3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  000020e0  00002194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020e0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800308  00800308  0000229c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000229c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  0000229f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000441  00000000  00000000  000024bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c8a  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001661  00000000  00000000  0000558a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cf7  00000000  00000000  00006beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  000088e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f9  00000000  00000000  00008c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  0000910d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009aa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_13>
      38:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__vector_14>
      3c:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_17>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_21>
      58:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_22>
      5c:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__vector_41>
      a8:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__vector_42>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 ee       	ldi	r30, 0xE0	; 224
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 31       	cpi	r26, 0x1A	; 26
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "Header.h"



int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    init();
     132:	0e 94 a4 00 	call	0x148	; 0x148 <init>
    init_motor();
     136:	0e 94 09 09 	call	0x1212	; 0x1212 <init_motor>
    rechte_lijnlinks();
     13a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <rechte_lijnlinks>
    return 0;
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
}
     142:	cf 91       	pop	r28
     144:	df 91       	pop	r29
     146:	08 95       	ret

00000148 <init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Header.h"

void init (void)
{
     148:	df 93       	push	r29
     14a:	cf 93       	push	r28
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
    DDRE |= (1 << PE3);     //pwm links 5
     150:	ad e2       	ldi	r26, 0x2D	; 45
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	ed e2       	ldi	r30, 0x2D	; 45
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	88 60       	ori	r24, 0x08	; 8
     15c:	8c 93       	st	X, r24
    DDRE |= (1 << PE4);     //pwm rechts 2
     15e:	ad e2       	ldi	r26, 0x2D	; 45
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ed e2       	ldi	r30, 0x2D	; 45
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	80 61       	ori	r24, 0x10	; 16
     16a:	8c 93       	st	X, r24
    DDRH |= (1 << PH4);     //lampje 7
     16c:	a1 e0       	ldi	r26, 0x01	; 1
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	e1 e0       	ldi	r30, 0x01	; 1
     172:	f1 e0       	ldi	r31, 0x01	; 1
     174:	80 81       	ld	r24, Z
     176:	80 61       	ori	r24, 0x10	; 16
     178:	8c 93       	st	X, r24
    DDRE |= (1 << PJ1);     //motorrichting links 14
     17a:	ad e2       	ldi	r26, 0x2D	; 45
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	ed e2       	ldi	r30, 0x2D	; 45
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	82 60       	ori	r24, 0x02	; 2
     186:	8c 93       	st	X, r24
    DDRE |= (1 << PJ0);     //motorrichting rechts 15
     188:	ad e2       	ldi	r26, 0x2D	; 45
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	ed e2       	ldi	r30, 0x2D	; 45
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	81 60       	ori	r24, 0x01	; 1
     194:	8c 93       	st	X, r24
    DDRA &= ~(1 << PD0);    //Nadering links 21
     196:	a1 e2       	ldi	r26, 0x21	; 33
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e1 e2       	ldi	r30, 0x21	; 33
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8e 7f       	andi	r24, 0xFE	; 254
     1a2:	8c 93       	st	X, r24
    DDRA &= ~(1 << PD1);    //Nadering rechts 20
     1a4:	a1 e2       	ldi	r26, 0x21	; 33
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e1 e2       	ldi	r30, 0x21	; 33
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8d 7f       	andi	r24, 0xFD	; 253
     1b0:	8c 93       	st	X, r24
    DDRL &= ~(1 << PL0);    //Ultrasoon echopin 49
     1b2:	aa e0       	ldi	r26, 0x0A	; 10
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	ea e0       	ldi	r30, 0x0A	; 10
     1b8:	f1 e0       	ldi	r31, 0x01	; 1
     1ba:	80 81       	ld	r24, Z
     1bc:	8e 7f       	andi	r24, 0xFE	; 254
     1be:	8c 93       	st	X, r24
    DDRC |=  (1 << PC5);    //Ultrasoon trigger 32
     1c0:	a7 e2       	ldi	r26, 0x27	; 39
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e7 e2       	ldi	r30, 0x27	; 39
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	80 62       	ori	r24, 0x20	; 32
     1cc:	8c 93       	st	X, r24
    DDRF &= ~(1 << PF7);    //Ir sensor Analoog 7 links
     1ce:	a0 e3       	ldi	r26, 0x30	; 48
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e0 e3       	ldi	r30, 0x30	; 48
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	8f 77       	andi	r24, 0x7F	; 127
     1da:	8c 93       	st	X, r24
    DDRF &= ~(1 << PF6);    //Ir sensor Analoog 6 rechts
     1dc:	a0 e3       	ldi	r26, 0x30	; 48
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e0 e3       	ldi	r30, 0x30	; 48
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7b       	andi	r24, 0xBF	; 191
     1e8:	8c 93       	st	X, r24
    DDRF &= ~(1 << PF0);    //Noodstop
     1ea:	a0 e3       	ldi	r26, 0x30	; 48
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e0 e3       	ldi	r30, 0x30	; 48
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8e 7f       	andi	r24, 0xFE	; 254
     1f6:	8c 93       	st	X, r24

}
     1f8:	cf 91       	pop	r28
     1fa:	df 91       	pop	r29
     1fc:	08 95       	ret

000001fe <rechte_lijnlinks>:

void rechte_lijnlinks(void)
{
     1fe:	df 93       	push	r29
     200:	cf 93       	push	r28
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	ee 97       	sbiw	r28, 0x3e	; 62
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	cd bf       	out	0x3d, r28	; 61
    int vlag = 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	9e af       	std	Y+62, r25	; 0x3e
     218:	8d af       	std	Y+61, r24	; 0x3d
    TCNT1 = 0;
     21a:	e4 e8       	ldi	r30, 0x84	; 132
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	11 82       	std	Z+1, r1	; 0x01
     220:	10 82       	st	Z, r1
    Grote_klok = 0;
     222:	10 92 0f 03 	sts	0x030F, r1
     226:	10 92 0e 03 	sts	0x030E, r1
     22a:	53 c2       	rjmp	.+1190   	; 0x6d2 <rechte_lijnlinks+0x4d4>
    while (vlag) //(ultrasoon <= 37)
    {
        if  (PINF && (1 << PF0))
     22c:	ef e2       	ldi	r30, 0x2F	; 47
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	88 23       	and	r24, r24
     234:	09 f4       	brne	.+2      	; 0x238 <rechte_lijnlinks+0x3a>
     236:	8b c0       	rjmp	.+278    	; 0x34e <rechte_lijnlinks+0x150>
        {
            motor(0,0);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
            int waarde6 = Grote_klok;
     244:	80 91 0e 03 	lds	r24, 0x030E
     248:	90 91 0f 03 	lds	r25, 0x030F
     24c:	9c af       	std	Y+60, r25	; 0x3c
     24e:	8b af       	std	Y+59, r24	; 0x3b
            while (PINF && (1 << PF0))
     250:	ef e2       	ldi	r30, 0x2F	; 47
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	88 23       	and	r24, r24
     258:	09 f4       	brne	.+2      	; 0x25c <rechte_lijnlinks+0x5e>
     25a:	73 c0       	rjmp	.+230    	; 0x342 <rechte_lijnlinks+0x144>
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b0 e4       	ldi	r27, 0x40	; 64
     264:	8d ab       	std	Y+53, r24	; 0x35
     266:	9e ab       	std	Y+54, r25	; 0x36
     268:	af ab       	std	Y+55, r26	; 0x37
     26a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     26c:	6d a9       	ldd	r22, Y+53	; 0x35
     26e:	7e a9       	ldd	r23, Y+54	; 0x36
     270:	8f a9       	ldd	r24, Y+55	; 0x37
     272:	98 ad       	ldd	r25, Y+56	; 0x38
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	4a e7       	ldi	r20, 0x7A	; 122
     27a:	55 e4       	ldi	r21, 0x45	; 69
     27c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     280:	dc 01       	movw	r26, r24
     282:	cb 01       	movw	r24, r22
     284:	89 ab       	std	Y+49, r24	; 0x31
     286:	9a ab       	std	Y+50, r25	; 0x32
     288:	ab ab       	std	Y+51, r26	; 0x33
     28a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     28c:	69 a9       	ldd	r22, Y+49	; 0x31
     28e:	7a a9       	ldd	r23, Y+50	; 0x32
     290:	8b a9       	ldd	r24, Y+51	; 0x33
     292:	9c a9       	ldd	r25, Y+52	; 0x34
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e8       	ldi	r20, 0x80	; 128
     29a:	5f e3       	ldi	r21, 0x3F	; 63
     29c:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ltsf2>
     2a0:	88 23       	and	r24, r24
     2a2:	2c f4       	brge	.+10     	; 0x2ae <rechte_lijnlinks+0xb0>
		__ticks = 1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	98 ab       	std	Y+48, r25	; 0x30
     2aa:	8f a7       	std	Y+47, r24	; 0x2f
     2ac:	3f c0       	rjmp	.+126    	; 0x32c <rechte_lijnlinks+0x12e>
	else if (__tmp > 65535)
     2ae:	69 a9       	ldd	r22, Y+49	; 0x31
     2b0:	7a a9       	ldd	r23, Y+50	; 0x32
     2b2:	8b a9       	ldd	r24, Y+51	; 0x33
     2b4:	9c a9       	ldd	r25, Y+52	; 0x34
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	3f ef       	ldi	r19, 0xFF	; 255
     2ba:	4f e7       	ldi	r20, 0x7F	; 127
     2bc:	57 e4       	ldi	r21, 0x47	; 71
     2be:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__gtsf2>
     2c2:	18 16       	cp	r1, r24
     2c4:	4c f5       	brge	.+82     	; 0x318 <rechte_lijnlinks+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2c6:	6d a9       	ldd	r22, Y+53	; 0x35
     2c8:	7e a9       	ldd	r23, Y+54	; 0x36
     2ca:	8f a9       	ldd	r24, Y+55	; 0x37
     2cc:	98 ad       	ldd	r25, Y+56	; 0x38
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e2       	ldi	r20, 0x20	; 32
     2d4:	51 e4       	ldi	r21, 0x41	; 65
     2d6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	bc 01       	movw	r22, r24
     2e0:	cd 01       	movw	r24, r26
     2e2:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     2e6:	dc 01       	movw	r26, r24
     2e8:	cb 01       	movw	r24, r22
     2ea:	98 ab       	std	Y+48, r25	; 0x30
     2ec:	8f a7       	std	Y+47, r24	; 0x2f
     2ee:	0f c0       	rjmp	.+30     	; 0x30e <rechte_lijnlinks+0x110>
     2f0:	80 e9       	ldi	r24, 0x90	; 144
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	9e a7       	std	Y+46, r25	; 0x2e
     2f6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f8:	8d a5       	ldd	r24, Y+45	; 0x2d
     2fa:	9e a5       	ldd	r25, Y+46	; 0x2e
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <rechte_lijnlinks+0xfe>
     300:	9e a7       	std	Y+46, r25	; 0x2e
     302:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     304:	8f a5       	ldd	r24, Y+47	; 0x2f
     306:	98 a9       	ldd	r25, Y+48	; 0x30
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	98 ab       	std	Y+48, r25	; 0x30
     30c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     30e:	8f a5       	ldd	r24, Y+47	; 0x2f
     310:	98 a9       	ldd	r25, Y+48	; 0x30
     312:	00 97       	sbiw	r24, 0x00	; 0
     314:	69 f7       	brne	.-38     	; 0x2f0 <rechte_lijnlinks+0xf2>
     316:	9c cf       	rjmp	.-200    	; 0x250 <rechte_lijnlinks+0x52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     318:	69 a9       	ldd	r22, Y+49	; 0x31
     31a:	7a a9       	ldd	r23, Y+50	; 0x32
     31c:	8b a9       	ldd	r24, Y+51	; 0x33
     31e:	9c a9       	ldd	r25, Y+52	; 0x34
     320:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     324:	dc 01       	movw	r26, r24
     326:	cb 01       	movw	r24, r22
     328:	98 ab       	std	Y+48, r25	; 0x30
     32a:	8f a7       	std	Y+47, r24	; 0x2f
     32c:	8f a5       	ldd	r24, Y+47	; 0x2f
     32e:	98 a9       	ldd	r25, Y+48	; 0x30
     330:	9c a7       	std	Y+44, r25	; 0x2c
     332:	8b a7       	std	Y+43, r24	; 0x2b
     334:	8b a5       	ldd	r24, Y+43	; 0x2b
     336:	9c a5       	ldd	r25, Y+44	; 0x2c
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <rechte_lijnlinks+0x13a>
     33c:	9c a7       	std	Y+44, r25	; 0x2c
     33e:	8b a7       	std	Y+43, r24	; 0x2b
     340:	87 cf       	rjmp	.-242    	; 0x250 <rechte_lijnlinks+0x52>
            {
                _delay_ms(2);
            }
            Grote_klok = waarde6;
     342:	8b ad       	ldd	r24, Y+59	; 0x3b
     344:	9c ad       	ldd	r25, Y+60	; 0x3c
     346:	90 93 0f 03 	sts	0x030F, r25
     34a:	80 93 0e 03 	sts	0x030E, r24
        }
        if ((Ir_links < 265)) //boomdectectie
     34e:	80 91 10 03 	lds	r24, 0x0310
     352:	90 91 11 03 	lds	r25, 0x0311
     356:	21 e0       	ldi	r18, 0x01	; 1
     358:	89 30       	cpi	r24, 0x09	; 9
     35a:	92 07       	cpc	r25, r18
     35c:	08 f0       	brcs	.+2      	; 0x360 <rechte_lijnlinks+0x162>
     35e:	27 c1       	rjmp	.+590    	; 0x5ae <rechte_lijnlinks+0x3b0>
        {
            if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
     360:	e0 e2       	ldi	r30, 0x20	; 32
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	88 2f       	mov	r24, r24
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	81 70       	andi	r24, 0x01	; 1
     36c:	90 70       	andi	r25, 0x00	; 0
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	79 f4       	brne	.+30     	; 0x390 <rechte_lijnlinks+0x192>
     372:	e0 e2       	ldi	r30, 0x20	; 32
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	82 70       	andi	r24, 0x02	; 2
     37e:	90 70       	andi	r25, 0x00	; 0
     380:	00 97       	sbiw	r24, 0x00	; 0
     382:	31 f4       	brne	.+12     	; 0x390 <rechte_lijnlinks+0x192>
            {
                motor(170,170);
     384:	8a ea       	ldi	r24, 0xAA	; 170
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	6a ea       	ldi	r22, 0xAA	; 170
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
            }
            if (PINA &(1 << PA0))
     390:	e0 e2       	ldi	r30, 0x20	; 32
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	81 70       	andi	r24, 0x01	; 1
     39c:	90 70       	andi	r25, 0x00	; 0
     39e:	88 23       	and	r24, r24
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <rechte_lijnlinks+0x1a6>
     3a2:	78 c0       	rjmp	.+240    	; 0x494 <rechte_lijnlinks+0x296>
            {
                motor (170,0);
     3a4:	8a ea       	ldi	r24, 0xAA	; 170
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	a0 e2       	ldi	r26, 0x20	; 32
     3b6:	b2 e4       	ldi	r27, 0x42	; 66
     3b8:	8f a3       	std	Y+39, r24	; 0x27
     3ba:	98 a7       	std	Y+40, r25	; 0x28
     3bc:	a9 a7       	std	Y+41, r26	; 0x29
     3be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3c0:	6f a1       	ldd	r22, Y+39	; 0x27
     3c2:	78 a5       	ldd	r23, Y+40	; 0x28
     3c4:	89 a5       	ldd	r24, Y+41	; 0x29
     3c6:	9a a5       	ldd	r25, Y+42	; 0x2a
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	4a e7       	ldi	r20, 0x7A	; 122
     3ce:	55 e4       	ldi	r21, 0x45	; 69
     3d0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     3d4:	dc 01       	movw	r26, r24
     3d6:	cb 01       	movw	r24, r22
     3d8:	8b a3       	std	Y+35, r24	; 0x23
     3da:	9c a3       	std	Y+36, r25	; 0x24
     3dc:	ad a3       	std	Y+37, r26	; 0x25
     3de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     3e0:	6b a1       	ldd	r22, Y+35	; 0x23
     3e2:	7c a1       	ldd	r23, Y+36	; 0x24
     3e4:	8d a1       	ldd	r24, Y+37	; 0x25
     3e6:	9e a1       	ldd	r25, Y+38	; 0x26
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e8       	ldi	r20, 0x80	; 128
     3ee:	5f e3       	ldi	r21, 0x3F	; 63
     3f0:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ltsf2>
     3f4:	88 23       	and	r24, r24
     3f6:	2c f4       	brge	.+10     	; 0x402 <rechte_lijnlinks+0x204>
		__ticks = 1;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	9a a3       	std	Y+34, r25	; 0x22
     3fe:	89 a3       	std	Y+33, r24	; 0x21
     400:	3f c0       	rjmp	.+126    	; 0x480 <rechte_lijnlinks+0x282>
	else if (__tmp > 65535)
     402:	6b a1       	ldd	r22, Y+35	; 0x23
     404:	7c a1       	ldd	r23, Y+36	; 0x24
     406:	8d a1       	ldd	r24, Y+37	; 0x25
     408:	9e a1       	ldd	r25, Y+38	; 0x26
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	3f ef       	ldi	r19, 0xFF	; 255
     40e:	4f e7       	ldi	r20, 0x7F	; 127
     410:	57 e4       	ldi	r21, 0x47	; 71
     412:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__gtsf2>
     416:	18 16       	cp	r1, r24
     418:	4c f5       	brge	.+82     	; 0x46c <rechte_lijnlinks+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41a:	6f a1       	ldd	r22, Y+39	; 0x27
     41c:	78 a5       	ldd	r23, Y+40	; 0x28
     41e:	89 a5       	ldd	r24, Y+41	; 0x29
     420:	9a a5       	ldd	r25, Y+42	; 0x2a
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e2       	ldi	r20, 0x20	; 32
     428:	51 e4       	ldi	r21, 0x41	; 65
     42a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	bc 01       	movw	r22, r24
     434:	cd 01       	movw	r24, r26
     436:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	9a a3       	std	Y+34, r25	; 0x22
     440:	89 a3       	std	Y+33, r24	; 0x21
     442:	0f c0       	rjmp	.+30     	; 0x462 <rechte_lijnlinks+0x264>
     444:	80 e9       	ldi	r24, 0x90	; 144
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	98 a3       	std	Y+32, r25	; 0x20
     44a:	8f 8f       	std	Y+31, r24	; 0x1f
     44c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     44e:	98 a1       	ldd	r25, Y+32	; 0x20
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <rechte_lijnlinks+0x252>
     454:	98 a3       	std	Y+32, r25	; 0x20
     456:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     458:	89 a1       	ldd	r24, Y+33	; 0x21
     45a:	9a a1       	ldd	r25, Y+34	; 0x22
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	9a a3       	std	Y+34, r25	; 0x22
     460:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	89 a1       	ldd	r24, Y+33	; 0x21
     464:	9a a1       	ldd	r25, Y+34	; 0x22
     466:	00 97       	sbiw	r24, 0x00	; 0
     468:	69 f7       	brne	.-38     	; 0x444 <rechte_lijnlinks+0x246>
     46a:	14 c0       	rjmp	.+40     	; 0x494 <rechte_lijnlinks+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     46c:	6b a1       	ldd	r22, Y+35	; 0x23
     46e:	7c a1       	ldd	r23, Y+36	; 0x24
     470:	8d a1       	ldd	r24, Y+37	; 0x25
     472:	9e a1       	ldd	r25, Y+38	; 0x26
     474:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	9a a3       	std	Y+34, r25	; 0x22
     47e:	89 a3       	std	Y+33, r24	; 0x21
     480:	89 a1       	ldd	r24, Y+33	; 0x21
     482:	9a a1       	ldd	r25, Y+34	; 0x22
     484:	9e 8f       	std	Y+30, r25	; 0x1e
     486:	8d 8f       	std	Y+29, r24	; 0x1d
     488:	8d 8d       	ldd	r24, Y+29	; 0x1d
     48a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <rechte_lijnlinks+0x28e>
     490:	9e 8f       	std	Y+30, r25	; 0x1e
     492:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(40);
            }
            if (PINA &(1 << PA1))
     494:	e0 e2       	ldi	r30, 0x20	; 32
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	88 2f       	mov	r24, r24
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	82 70       	andi	r24, 0x02	; 2
     4a0:	90 70       	andi	r25, 0x00	; 0
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <rechte_lijnlinks+0x2aa>
     4a6:	78 c0       	rjmp	.+240    	; 0x598 <rechte_lijnlinks+0x39a>
            {
                motor (0,170);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	6a ea       	ldi	r22, 0xAA	; 170
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	a0 e2       	ldi	r26, 0x20	; 32
     4ba:	b2 e4       	ldi	r27, 0x42	; 66
     4bc:	89 8f       	std	Y+25, r24	; 0x19
     4be:	9a 8f       	std	Y+26, r25	; 0x1a
     4c0:	ab 8f       	std	Y+27, r26	; 0x1b
     4c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4c4:	69 8d       	ldd	r22, Y+25	; 0x19
     4c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	4a e7       	ldi	r20, 0x7A	; 122
     4d2:	55 e4       	ldi	r21, 0x45	; 69
     4d4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     4d8:	dc 01       	movw	r26, r24
     4da:	cb 01       	movw	r24, r22
     4dc:	8d 8b       	std	Y+21, r24	; 0x15
     4de:	9e 8b       	std	Y+22, r25	; 0x16
     4e0:	af 8b       	std	Y+23, r26	; 0x17
     4e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     4e4:	6d 89       	ldd	r22, Y+21	; 0x15
     4e6:	7e 89       	ldd	r23, Y+22	; 0x16
     4e8:	8f 89       	ldd	r24, Y+23	; 0x17
     4ea:	98 8d       	ldd	r25, Y+24	; 0x18
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e8       	ldi	r20, 0x80	; 128
     4f2:	5f e3       	ldi	r21, 0x3F	; 63
     4f4:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ltsf2>
     4f8:	88 23       	and	r24, r24
     4fa:	2c f4       	brge	.+10     	; 0x506 <rechte_lijnlinks+0x308>
		__ticks = 1;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	9c 8b       	std	Y+20, r25	; 0x14
     502:	8b 8b       	std	Y+19, r24	; 0x13
     504:	3f c0       	rjmp	.+126    	; 0x584 <rechte_lijnlinks+0x386>
	else if (__tmp > 65535)
     506:	6d 89       	ldd	r22, Y+21	; 0x15
     508:	7e 89       	ldd	r23, Y+22	; 0x16
     50a:	8f 89       	ldd	r24, Y+23	; 0x17
     50c:	98 8d       	ldd	r25, Y+24	; 0x18
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	3f ef       	ldi	r19, 0xFF	; 255
     512:	4f e7       	ldi	r20, 0x7F	; 127
     514:	57 e4       	ldi	r21, 0x47	; 71
     516:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__gtsf2>
     51a:	18 16       	cp	r1, r24
     51c:	4c f5       	brge	.+82     	; 0x570 <rechte_lijnlinks+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     51e:	69 8d       	ldd	r22, Y+25	; 0x19
     520:	7a 8d       	ldd	r23, Y+26	; 0x1a
     522:	8b 8d       	ldd	r24, Y+27	; 0x1b
     524:	9c 8d       	ldd	r25, Y+28	; 0x1c
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e2       	ldi	r20, 0x20	; 32
     52c:	51 e4       	ldi	r21, 0x41	; 65
     52e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	bc 01       	movw	r22, r24
     538:	cd 01       	movw	r24, r26
     53a:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	9c 8b       	std	Y+20, r25	; 0x14
     544:	8b 8b       	std	Y+19, r24	; 0x13
     546:	0f c0       	rjmp	.+30     	; 0x566 <rechte_lijnlinks+0x368>
     548:	80 e9       	ldi	r24, 0x90	; 144
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	9a 8b       	std	Y+18, r25	; 0x12
     54e:	89 8b       	std	Y+17, r24	; 0x11
     550:	89 89       	ldd	r24, Y+17	; 0x11
     552:	9a 89       	ldd	r25, Y+18	; 0x12
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <rechte_lijnlinks+0x356>
     558:	9a 8b       	std	Y+18, r25	; 0x12
     55a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55c:	8b 89       	ldd	r24, Y+19	; 0x13
     55e:	9c 89       	ldd	r25, Y+20	; 0x14
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	9c 8b       	std	Y+20, r25	; 0x14
     564:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     566:	8b 89       	ldd	r24, Y+19	; 0x13
     568:	9c 89       	ldd	r25, Y+20	; 0x14
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	69 f7       	brne	.-38     	; 0x548 <rechte_lijnlinks+0x34a>
     56e:	14 c0       	rjmp	.+40     	; 0x598 <rechte_lijnlinks+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     570:	6d 89       	ldd	r22, Y+21	; 0x15
     572:	7e 89       	ldd	r23, Y+22	; 0x16
     574:	8f 89       	ldd	r24, Y+23	; 0x17
     576:	98 8d       	ldd	r25, Y+24	; 0x18
     578:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	9c 8b       	std	Y+20, r25	; 0x14
     582:	8b 8b       	std	Y+19, r24	; 0x13
     584:	8b 89       	ldd	r24, Y+19	; 0x13
     586:	9c 89       	ldd	r25, Y+20	; 0x14
     588:	98 8b       	std	Y+16, r25	; 0x10
     58a:	8f 87       	std	Y+15, r24	; 0x0f
     58c:	8f 85       	ldd	r24, Y+15	; 0x0f
     58e:	98 89       	ldd	r25, Y+16	; 0x10
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <rechte_lijnlinks+0x392>
     594:	98 8b       	std	Y+16, r25	; 0x10
     596:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(40);
            }
            if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
     598:	80 91 0e 03 	lds	r24, 0x030E
     59c:	90 91 0f 03 	lds	r25, 0x030F
     5a0:	84 3b       	cpi	r24, 0xB4	; 180
     5a2:	91 05       	cpc	r25, r1
     5a4:	0c f4       	brge	.+2      	; 0x5a8 <rechte_lijnlinks+0x3aa>
     5a6:	95 c0       	rjmp	.+298    	; 0x6d2 <rechte_lijnlinks+0x4d4>
            {
                vlag = 0;
     5a8:	1e ae       	std	Y+62, r1	; 0x3e
     5aa:	1d ae       	std	Y+61, r1	; 0x3d
     5ac:	92 c0       	rjmp	.+292    	; 0x6d2 <rechte_lijnlinks+0x4d4>
            //	Grote_klok = Grote_klok - waarde;
            //}
        }
        else
        {
            int waarde = Grote_klok;
     5ae:	80 91 0e 03 	lds	r24, 0x030E
     5b2:	90 91 0f 03 	lds	r25, 0x030F
     5b6:	9a af       	std	Y+58, r25	; 0x3a
     5b8:	89 af       	std	Y+57, r24	; 0x39
            motor (0,0);
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
            PORTH |=  (1 << PH4);
     5c6:	a2 e0       	ldi	r26, 0x02	; 2
     5c8:	b1 e0       	ldi	r27, 0x01	; 1
     5ca:	e2 e0       	ldi	r30, 0x02	; 2
     5cc:	f1 e0       	ldi	r31, 0x01	; 1
     5ce:	80 81       	ld	r24, Z
     5d0:	80 61       	ori	r24, 0x10	; 16
     5d2:	8c 93       	st	X, r24
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	aa ef       	ldi	r26, 0xFA	; 250
     5da:	b3 e4       	ldi	r27, 0x43	; 67
     5dc:	8b 87       	std	Y+11, r24	; 0x0b
     5de:	9c 87       	std	Y+12, r25	; 0x0c
     5e0:	ad 87       	std	Y+13, r26	; 0x0d
     5e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5e4:	6b 85       	ldd	r22, Y+11	; 0x0b
     5e6:	7c 85       	ldd	r23, Y+12	; 0x0c
     5e8:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ea:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	4a e7       	ldi	r20, 0x7A	; 122
     5f2:	55 e4       	ldi	r21, 0x45	; 69
     5f4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	8f 83       	std	Y+7, r24	; 0x07
     5fe:	98 87       	std	Y+8, r25	; 0x08
     600:	a9 87       	std	Y+9, r26	; 0x09
     602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     604:	6f 81       	ldd	r22, Y+7	; 0x07
     606:	78 85       	ldd	r23, Y+8	; 0x08
     608:	89 85       	ldd	r24, Y+9	; 0x09
     60a:	9a 85       	ldd	r25, Y+10	; 0x0a
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e8       	ldi	r20, 0x80	; 128
     612:	5f e3       	ldi	r21, 0x3F	; 63
     614:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ltsf2>
     618:	88 23       	and	r24, r24
     61a:	2c f4       	brge	.+10     	; 0x626 <rechte_lijnlinks+0x428>
		__ticks = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9e 83       	std	Y+6, r25	; 0x06
     622:	8d 83       	std	Y+5, r24	; 0x05
     624:	3f c0       	rjmp	.+126    	; 0x6a4 <rechte_lijnlinks+0x4a6>
	else if (__tmp > 65535)
     626:	6f 81       	ldd	r22, Y+7	; 0x07
     628:	78 85       	ldd	r23, Y+8	; 0x08
     62a:	89 85       	ldd	r24, Y+9	; 0x09
     62c:	9a 85       	ldd	r25, Y+10	; 0x0a
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	3f ef       	ldi	r19, 0xFF	; 255
     632:	4f e7       	ldi	r20, 0x7F	; 127
     634:	57 e4       	ldi	r21, 0x47	; 71
     636:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__gtsf2>
     63a:	18 16       	cp	r1, r24
     63c:	4c f5       	brge	.+82     	; 0x690 <rechte_lijnlinks+0x492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     63e:	6b 85       	ldd	r22, Y+11	; 0x0b
     640:	7c 85       	ldd	r23, Y+12	; 0x0c
     642:	8d 85       	ldd	r24, Y+13	; 0x0d
     644:	9e 85       	ldd	r25, Y+14	; 0x0e
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e2       	ldi	r20, 0x20	; 32
     64c:	51 e4       	ldi	r21, 0x41	; 65
     64e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	bc 01       	movw	r22, r24
     658:	cd 01       	movw	r24, r26
     65a:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	9e 83       	std	Y+6, r25	; 0x06
     664:	8d 83       	std	Y+5, r24	; 0x05
     666:	0f c0       	rjmp	.+30     	; 0x686 <rechte_lijnlinks+0x488>
     668:	80 e9       	ldi	r24, 0x90	; 144
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	9c 83       	std	Y+4, r25	; 0x04
     66e:	8b 83       	std	Y+3, r24	; 0x03
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	9c 81       	ldd	r25, Y+4	; 0x04
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <rechte_lijnlinks+0x476>
     678:	9c 83       	std	Y+4, r25	; 0x04
     67a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67c:	8d 81       	ldd	r24, Y+5	; 0x05
     67e:	9e 81       	ldd	r25, Y+6	; 0x06
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	9e 83       	std	Y+6, r25	; 0x06
     684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     686:	8d 81       	ldd	r24, Y+5	; 0x05
     688:	9e 81       	ldd	r25, Y+6	; 0x06
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	69 f7       	brne	.-38     	; 0x668 <rechte_lijnlinks+0x46a>
     68e:	14 c0       	rjmp	.+40     	; 0x6b8 <rechte_lijnlinks+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     690:	6f 81       	ldd	r22, Y+7	; 0x07
     692:	78 85       	ldd	r23, Y+8	; 0x08
     694:	89 85       	ldd	r24, Y+9	; 0x09
     696:	9a 85       	ldd	r25, Y+10	; 0x0a
     698:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	9e 83       	std	Y+6, r25	; 0x06
     6a2:	8d 83       	std	Y+5, r24	; 0x05
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	9e 81       	ldd	r25, Y+6	; 0x06
     6a8:	9a 83       	std	Y+2, r25	; 0x02
     6aa:	89 83       	std	Y+1, r24	; 0x01
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	9a 81       	ldd	r25, Y+2	; 0x02
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <rechte_lijnlinks+0x4b2>
     6b4:	9a 83       	std	Y+2, r25	; 0x02
     6b6:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(500);
            PORTH &= ~(1 << PH4);
     6b8:	a2 e0       	ldi	r26, 0x02	; 2
     6ba:	b1 e0       	ldi	r27, 0x01	; 1
     6bc:	e2 e0       	ldi	r30, 0x02	; 2
     6be:	f1 e0       	ldi	r31, 0x01	; 1
     6c0:	80 81       	ld	r24, Z
     6c2:	8f 7e       	andi	r24, 0xEF	; 239
     6c4:	8c 93       	st	X, r24
            Grote_klok = waarde;
     6c6:	89 ad       	ldd	r24, Y+57	; 0x39
     6c8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ca:	90 93 0f 03 	sts	0x030F, r25
     6ce:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnlinks(void)
{
    int vlag = 1;
    TCNT1 = 0;
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
     6d2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6d4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	09 f0       	breq	.+2      	; 0x6dc <rechte_lijnlinks+0x4de>
     6da:	a8 cd       	rjmp	.-1200   	; 0x22c <rechte_lijnlinks+0x2e>
            PORTH &= ~(1 << PH4);
            Grote_klok = waarde;
        }

    }
}
     6dc:	ee 96       	adiw	r28, 0x3e	; 62
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <rechte_lijnbeide>:


void rechte_lijnbeide(void)
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	ee 97       	sbiw	r28, 0x3e	; 62
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
    int vlag = 1;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	9e af       	std	Y+62, r25	; 0x3e
     708:	8d af       	std	Y+61, r24	; 0x3d
    TCNT1 = 0;
     70a:	e4 e8       	ldi	r30, 0x84	; 132
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	11 82       	std	Z+1, r1	; 0x01
     710:	10 82       	st	Z, r1
    Grote_klok = 0;
     712:	10 92 0f 03 	sts	0x030F, r1
     716:	10 92 0e 03 	sts	0x030E, r1
     71a:	5c c2       	rjmp	.+1208   	; 0xbd4 <rechte_lijnbeide+0x4e6>
    while (vlag) //(ultrasoon <= 37)
    {
        if  (PINF && (1 << PF0))
     71c:	ef e2       	ldi	r30, 0x2F	; 47
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	88 23       	and	r24, r24
     724:	09 f4       	brne	.+2      	; 0x728 <rechte_lijnbeide+0x3a>
     726:	8b c0       	rjmp	.+278    	; 0x83e <rechte_lijnbeide+0x150>
        {
            motor(0,0);
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
            int waarde6 = Grote_klok;
     734:	80 91 0e 03 	lds	r24, 0x030E
     738:	90 91 0f 03 	lds	r25, 0x030F
     73c:	9c af       	std	Y+60, r25	; 0x3c
     73e:	8b af       	std	Y+59, r24	; 0x3b
            while (PINF && (1 << PF0))
     740:	ef e2       	ldi	r30, 0x2F	; 47
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	88 23       	and	r24, r24
     748:	09 f4       	brne	.+2      	; 0x74c <rechte_lijnbeide+0x5e>
     74a:	73 c0       	rjmp	.+230    	; 0x832 <rechte_lijnbeide+0x144>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e4       	ldi	r27, 0x40	; 64
     754:	8d ab       	std	Y+53, r24	; 0x35
     756:	9e ab       	std	Y+54, r25	; 0x36
     758:	af ab       	std	Y+55, r26	; 0x37
     75a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     75c:	6d a9       	ldd	r22, Y+53	; 0x35
     75e:	7e a9       	ldd	r23, Y+54	; 0x36
     760:	8f a9       	ldd	r24, Y+55	; 0x37
     762:	98 ad       	ldd	r25, Y+56	; 0x38
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	4a e7       	ldi	r20, 0x7A	; 122
     76a:	55 e4       	ldi	r21, 0x45	; 69
     76c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	89 ab       	std	Y+49, r24	; 0x31
     776:	9a ab       	std	Y+50, r25	; 0x32
     778:	ab ab       	std	Y+51, r26	; 0x33
     77a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     77c:	69 a9       	ldd	r22, Y+49	; 0x31
     77e:	7a a9       	ldd	r23, Y+50	; 0x32
     780:	8b a9       	ldd	r24, Y+51	; 0x33
     782:	9c a9       	ldd	r25, Y+52	; 0x34
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e8       	ldi	r20, 0x80	; 128
     78a:	5f e3       	ldi	r21, 0x3F	; 63
     78c:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ltsf2>
     790:	88 23       	and	r24, r24
     792:	2c f4       	brge	.+10     	; 0x79e <rechte_lijnbeide+0xb0>
		__ticks = 1;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	98 ab       	std	Y+48, r25	; 0x30
     79a:	8f a7       	std	Y+47, r24	; 0x2f
     79c:	3f c0       	rjmp	.+126    	; 0x81c <rechte_lijnbeide+0x12e>
	else if (__tmp > 65535)
     79e:	69 a9       	ldd	r22, Y+49	; 0x31
     7a0:	7a a9       	ldd	r23, Y+50	; 0x32
     7a2:	8b a9       	ldd	r24, Y+51	; 0x33
     7a4:	9c a9       	ldd	r25, Y+52	; 0x34
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	3f ef       	ldi	r19, 0xFF	; 255
     7aa:	4f e7       	ldi	r20, 0x7F	; 127
     7ac:	57 e4       	ldi	r21, 0x47	; 71
     7ae:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__gtsf2>
     7b2:	18 16       	cp	r1, r24
     7b4:	4c f5       	brge	.+82     	; 0x808 <rechte_lijnbeide+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b6:	6d a9       	ldd	r22, Y+53	; 0x35
     7b8:	7e a9       	ldd	r23, Y+54	; 0x36
     7ba:	8f a9       	ldd	r24, Y+55	; 0x37
     7bc:	98 ad       	ldd	r25, Y+56	; 0x38
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e2       	ldi	r20, 0x20	; 32
     7c4:	51 e4       	ldi	r21, 0x41	; 65
     7c6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	98 ab       	std	Y+48, r25	; 0x30
     7dc:	8f a7       	std	Y+47, r24	; 0x2f
     7de:	0f c0       	rjmp	.+30     	; 0x7fe <rechte_lijnbeide+0x110>
     7e0:	80 e9       	ldi	r24, 0x90	; 144
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	9e a7       	std	Y+46, r25	; 0x2e
     7e6:	8d a7       	std	Y+45, r24	; 0x2d
     7e8:	8d a5       	ldd	r24, Y+45	; 0x2d
     7ea:	9e a5       	ldd	r25, Y+46	; 0x2e
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <rechte_lijnbeide+0xfe>
     7f0:	9e a7       	std	Y+46, r25	; 0x2e
     7f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f4:	8f a5       	ldd	r24, Y+47	; 0x2f
     7f6:	98 a9       	ldd	r25, Y+48	; 0x30
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	98 ab       	std	Y+48, r25	; 0x30
     7fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fe:	8f a5       	ldd	r24, Y+47	; 0x2f
     800:	98 a9       	ldd	r25, Y+48	; 0x30
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	69 f7       	brne	.-38     	; 0x7e0 <rechte_lijnbeide+0xf2>
     806:	9c cf       	rjmp	.-200    	; 0x740 <rechte_lijnbeide+0x52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     808:	69 a9       	ldd	r22, Y+49	; 0x31
     80a:	7a a9       	ldd	r23, Y+50	; 0x32
     80c:	8b a9       	ldd	r24, Y+51	; 0x33
     80e:	9c a9       	ldd	r25, Y+52	; 0x34
     810:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	98 ab       	std	Y+48, r25	; 0x30
     81a:	8f a7       	std	Y+47, r24	; 0x2f
     81c:	8f a5       	ldd	r24, Y+47	; 0x2f
     81e:	98 a9       	ldd	r25, Y+48	; 0x30
     820:	9c a7       	std	Y+44, r25	; 0x2c
     822:	8b a7       	std	Y+43, r24	; 0x2b
     824:	8b a5       	ldd	r24, Y+43	; 0x2b
     826:	9c a5       	ldd	r25, Y+44	; 0x2c
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <rechte_lijnbeide+0x13a>
     82c:	9c a7       	std	Y+44, r25	; 0x2c
     82e:	8b a7       	std	Y+43, r24	; 0x2b
     830:	87 cf       	rjmp	.-242    	; 0x740 <rechte_lijnbeide+0x52>
            {
                _delay_ms(2);
            }
            Grote_klok = waarde6;
     832:	8b ad       	ldd	r24, Y+59	; 0x3b
     834:	9c ad       	ldd	r25, Y+60	; 0x3c
     836:	90 93 0f 03 	sts	0x030F, r25
     83a:	80 93 0e 03 	sts	0x030E, r24
        }
        if ((Ir_links < 265) && (Ir_rechts < 265)) //boomdectectie
     83e:	80 91 10 03 	lds	r24, 0x0310
     842:	90 91 11 03 	lds	r25, 0x0311
     846:	21 e0       	ldi	r18, 0x01	; 1
     848:	89 30       	cpi	r24, 0x09	; 9
     84a:	92 07       	cpc	r25, r18
     84c:	08 f0       	brcs	.+2      	; 0x850 <rechte_lijnbeide+0x162>
     84e:	30 c1       	rjmp	.+608    	; 0xab0 <rechte_lijnbeide+0x3c2>
     850:	80 91 0c 03 	lds	r24, 0x030C
     854:	90 91 0d 03 	lds	r25, 0x030D
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	89 30       	cpi	r24, 0x09	; 9
     85c:	92 07       	cpc	r25, r18
     85e:	08 f0       	brcs	.+2      	; 0x862 <rechte_lijnbeide+0x174>
     860:	27 c1       	rjmp	.+590    	; 0xab0 <rechte_lijnbeide+0x3c2>
        {
            if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
     862:	e0 e2       	ldi	r30, 0x20	; 32
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	88 2f       	mov	r24, r24
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	81 70       	andi	r24, 0x01	; 1
     86e:	90 70       	andi	r25, 0x00	; 0
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	79 f4       	brne	.+30     	; 0x892 <rechte_lijnbeide+0x1a4>
     874:	e0 e2       	ldi	r30, 0x20	; 32
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	82 70       	andi	r24, 0x02	; 2
     880:	90 70       	andi	r25, 0x00	; 0
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	31 f4       	brne	.+12     	; 0x892 <rechte_lijnbeide+0x1a4>
            {
                motor(170,170);
     886:	8a ea       	ldi	r24, 0xAA	; 170
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	6a ea       	ldi	r22, 0xAA	; 170
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
            }
            if (PINA &(1 << PA0))
     892:	e0 e2       	ldi	r30, 0x20	; 32
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	88 2f       	mov	r24, r24
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	81 70       	andi	r24, 0x01	; 1
     89e:	90 70       	andi	r25, 0x00	; 0
     8a0:	88 23       	and	r24, r24
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <rechte_lijnbeide+0x1b8>
     8a4:	78 c0       	rjmp	.+240    	; 0x996 <rechte_lijnbeide+0x2a8>
            {
                motor (170,0);
     8a6:	8a ea       	ldi	r24, 0xAA	; 170
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	a0 e2       	ldi	r26, 0x20	; 32
     8b8:	b2 e4       	ldi	r27, 0x42	; 66
     8ba:	8f a3       	std	Y+39, r24	; 0x27
     8bc:	98 a7       	std	Y+40, r25	; 0x28
     8be:	a9 a7       	std	Y+41, r26	; 0x29
     8c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8c2:	6f a1       	ldd	r22, Y+39	; 0x27
     8c4:	78 a5       	ldd	r23, Y+40	; 0x28
     8c6:	89 a5       	ldd	r24, Y+41	; 0x29
     8c8:	9a a5       	ldd	r25, Y+42	; 0x2a
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	4a e7       	ldi	r20, 0x7A	; 122
     8d0:	55 e4       	ldi	r21, 0x45	; 69
     8d2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	8b a3       	std	Y+35, r24	; 0x23
     8dc:	9c a3       	std	Y+36, r25	; 0x24
     8de:	ad a3       	std	Y+37, r26	; 0x25
     8e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8e2:	6b a1       	ldd	r22, Y+35	; 0x23
     8e4:	7c a1       	ldd	r23, Y+36	; 0x24
     8e6:	8d a1       	ldd	r24, Y+37	; 0x25
     8e8:	9e a1       	ldd	r25, Y+38	; 0x26
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 e8       	ldi	r20, 0x80	; 128
     8f0:	5f e3       	ldi	r21, 0x3F	; 63
     8f2:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ltsf2>
     8f6:	88 23       	and	r24, r24
     8f8:	2c f4       	brge	.+10     	; 0x904 <rechte_lijnbeide+0x216>
		__ticks = 1;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	9a a3       	std	Y+34, r25	; 0x22
     900:	89 a3       	std	Y+33, r24	; 0x21
     902:	3f c0       	rjmp	.+126    	; 0x982 <rechte_lijnbeide+0x294>
	else if (__tmp > 65535)
     904:	6b a1       	ldd	r22, Y+35	; 0x23
     906:	7c a1       	ldd	r23, Y+36	; 0x24
     908:	8d a1       	ldd	r24, Y+37	; 0x25
     90a:	9e a1       	ldd	r25, Y+38	; 0x26
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	3f ef       	ldi	r19, 0xFF	; 255
     910:	4f e7       	ldi	r20, 0x7F	; 127
     912:	57 e4       	ldi	r21, 0x47	; 71
     914:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__gtsf2>
     918:	18 16       	cp	r1, r24
     91a:	4c f5       	brge	.+82     	; 0x96e <rechte_lijnbeide+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     91c:	6f a1       	ldd	r22, Y+39	; 0x27
     91e:	78 a5       	ldd	r23, Y+40	; 0x28
     920:	89 a5       	ldd	r24, Y+41	; 0x29
     922:	9a a5       	ldd	r25, Y+42	; 0x2a
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e2       	ldi	r20, 0x20	; 32
     92a:	51 e4       	ldi	r21, 0x41	; 65
     92c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	bc 01       	movw	r22, r24
     936:	cd 01       	movw	r24, r26
     938:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	9a a3       	std	Y+34, r25	; 0x22
     942:	89 a3       	std	Y+33, r24	; 0x21
     944:	0f c0       	rjmp	.+30     	; 0x964 <rechte_lijnbeide+0x276>
     946:	80 e9       	ldi	r24, 0x90	; 144
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	98 a3       	std	Y+32, r25	; 0x20
     94c:	8f 8f       	std	Y+31, r24	; 0x1f
     94e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     950:	98 a1       	ldd	r25, Y+32	; 0x20
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <rechte_lijnbeide+0x264>
     956:	98 a3       	std	Y+32, r25	; 0x20
     958:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95a:	89 a1       	ldd	r24, Y+33	; 0x21
     95c:	9a a1       	ldd	r25, Y+34	; 0x22
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	9a a3       	std	Y+34, r25	; 0x22
     962:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     964:	89 a1       	ldd	r24, Y+33	; 0x21
     966:	9a a1       	ldd	r25, Y+34	; 0x22
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	69 f7       	brne	.-38     	; 0x946 <rechte_lijnbeide+0x258>
     96c:	14 c0       	rjmp	.+40     	; 0x996 <rechte_lijnbeide+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     96e:	6b a1       	ldd	r22, Y+35	; 0x23
     970:	7c a1       	ldd	r23, Y+36	; 0x24
     972:	8d a1       	ldd	r24, Y+37	; 0x25
     974:	9e a1       	ldd	r25, Y+38	; 0x26
     976:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
     97e:	9a a3       	std	Y+34, r25	; 0x22
     980:	89 a3       	std	Y+33, r24	; 0x21
     982:	89 a1       	ldd	r24, Y+33	; 0x21
     984:	9a a1       	ldd	r25, Y+34	; 0x22
     986:	9e 8f       	std	Y+30, r25	; 0x1e
     988:	8d 8f       	std	Y+29, r24	; 0x1d
     98a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     98c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <rechte_lijnbeide+0x2a0>
     992:	9e 8f       	std	Y+30, r25	; 0x1e
     994:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(40);
            }
            if (PINA &(1 << PA1))
     996:	e0 e2       	ldi	r30, 0x20	; 32
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	88 2f       	mov	r24, r24
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	82 70       	andi	r24, 0x02	; 2
     9a2:	90 70       	andi	r25, 0x00	; 0
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	09 f4       	brne	.+2      	; 0x9aa <rechte_lijnbeide+0x2bc>
     9a8:	78 c0       	rjmp	.+240    	; 0xa9a <rechte_lijnbeide+0x3ac>
            {
                motor (0,170);
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	6a ea       	ldi	r22, 0xAA	; 170
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e2       	ldi	r26, 0x20	; 32
     9bc:	b2 e4       	ldi	r27, 0x42	; 66
     9be:	89 8f       	std	Y+25, r24	; 0x19
     9c0:	9a 8f       	std	Y+26, r25	; 0x1a
     9c2:	ab 8f       	std	Y+27, r26	; 0x1b
     9c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9c6:	69 8d       	ldd	r22, Y+25	; 0x19
     9c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	4a e7       	ldi	r20, 0x7A	; 122
     9d4:	55 e4       	ldi	r21, 0x45	; 69
     9d6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	8d 8b       	std	Y+21, r24	; 0x15
     9e0:	9e 8b       	std	Y+22, r25	; 0x16
     9e2:	af 8b       	std	Y+23, r26	; 0x17
     9e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9e6:	6d 89       	ldd	r22, Y+21	; 0x15
     9e8:	7e 89       	ldd	r23, Y+22	; 0x16
     9ea:	8f 89       	ldd	r24, Y+23	; 0x17
     9ec:	98 8d       	ldd	r25, Y+24	; 0x18
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e8       	ldi	r20, 0x80	; 128
     9f4:	5f e3       	ldi	r21, 0x3F	; 63
     9f6:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ltsf2>
     9fa:	88 23       	and	r24, r24
     9fc:	2c f4       	brge	.+10     	; 0xa08 <rechte_lijnbeide+0x31a>
		__ticks = 1;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	9c 8b       	std	Y+20, r25	; 0x14
     a04:	8b 8b       	std	Y+19, r24	; 0x13
     a06:	3f c0       	rjmp	.+126    	; 0xa86 <rechte_lijnbeide+0x398>
	else if (__tmp > 65535)
     a08:	6d 89       	ldd	r22, Y+21	; 0x15
     a0a:	7e 89       	ldd	r23, Y+22	; 0x16
     a0c:	8f 89       	ldd	r24, Y+23	; 0x17
     a0e:	98 8d       	ldd	r25, Y+24	; 0x18
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	3f ef       	ldi	r19, 0xFF	; 255
     a14:	4f e7       	ldi	r20, 0x7F	; 127
     a16:	57 e4       	ldi	r21, 0x47	; 71
     a18:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__gtsf2>
     a1c:	18 16       	cp	r1, r24
     a1e:	4c f5       	brge	.+82     	; 0xa72 <rechte_lijnbeide+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a20:	69 8d       	ldd	r22, Y+25	; 0x19
     a22:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a24:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a26:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e2       	ldi	r20, 0x20	; 32
     a2e:	51 e4       	ldi	r21, 0x41	; 65
     a30:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     a40:	dc 01       	movw	r26, r24
     a42:	cb 01       	movw	r24, r22
     a44:	9c 8b       	std	Y+20, r25	; 0x14
     a46:	8b 8b       	std	Y+19, r24	; 0x13
     a48:	0f c0       	rjmp	.+30     	; 0xa68 <rechte_lijnbeide+0x37a>
     a4a:	80 e9       	ldi	r24, 0x90	; 144
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	9a 8b       	std	Y+18, r25	; 0x12
     a50:	89 8b       	std	Y+17, r24	; 0x11
     a52:	89 89       	ldd	r24, Y+17	; 0x11
     a54:	9a 89       	ldd	r25, Y+18	; 0x12
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <rechte_lijnbeide+0x368>
     a5a:	9a 8b       	std	Y+18, r25	; 0x12
     a5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a5e:	8b 89       	ldd	r24, Y+19	; 0x13
     a60:	9c 89       	ldd	r25, Y+20	; 0x14
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	9c 8b       	std	Y+20, r25	; 0x14
     a66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a68:	8b 89       	ldd	r24, Y+19	; 0x13
     a6a:	9c 89       	ldd	r25, Y+20	; 0x14
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	69 f7       	brne	.-38     	; 0xa4a <rechte_lijnbeide+0x35c>
     a70:	14 c0       	rjmp	.+40     	; 0xa9a <rechte_lijnbeide+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a72:	6d 89       	ldd	r22, Y+21	; 0x15
     a74:	7e 89       	ldd	r23, Y+22	; 0x16
     a76:	8f 89       	ldd	r24, Y+23	; 0x17
     a78:	98 8d       	ldd	r25, Y+24	; 0x18
     a7a:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	9c 8b       	std	Y+20, r25	; 0x14
     a84:	8b 8b       	std	Y+19, r24	; 0x13
     a86:	8b 89       	ldd	r24, Y+19	; 0x13
     a88:	9c 89       	ldd	r25, Y+20	; 0x14
     a8a:	98 8b       	std	Y+16, r25	; 0x10
     a8c:	8f 87       	std	Y+15, r24	; 0x0f
     a8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a90:	98 89       	ldd	r25, Y+16	; 0x10
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <rechte_lijnbeide+0x3a4>
     a96:	98 8b       	std	Y+16, r25	; 0x10
     a98:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(40);
            }
            if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
     a9a:	80 91 0e 03 	lds	r24, 0x030E
     a9e:	90 91 0f 03 	lds	r25, 0x030F
     aa2:	84 3b       	cpi	r24, 0xB4	; 180
     aa4:	91 05       	cpc	r25, r1
     aa6:	0c f4       	brge	.+2      	; 0xaaa <rechte_lijnbeide+0x3bc>
     aa8:	95 c0       	rjmp	.+298    	; 0xbd4 <rechte_lijnbeide+0x4e6>
            {
                vlag = 0;
     aaa:	1e ae       	std	Y+62, r1	; 0x3e
     aac:	1d ae       	std	Y+61, r1	; 0x3d
     aae:	92 c0       	rjmp	.+292    	; 0xbd4 <rechte_lijnbeide+0x4e6>
            //	Grote_klok = Grote_klok - waarde;
            //}
        }
        else
        {
            int waarde = Grote_klok;
     ab0:	80 91 0e 03 	lds	r24, 0x030E
     ab4:	90 91 0f 03 	lds	r25, 0x030F
     ab8:	9a af       	std	Y+58, r25	; 0x3a
     aba:	89 af       	std	Y+57, r24	; 0x39
            motor (0,0);
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
            PORTH |=  (1 << PH4);
     ac8:	a2 e0       	ldi	r26, 0x02	; 2
     aca:	b1 e0       	ldi	r27, 0x01	; 1
     acc:	e2 e0       	ldi	r30, 0x02	; 2
     ace:	f1 e0       	ldi	r31, 0x01	; 1
     ad0:	80 81       	ld	r24, Z
     ad2:	80 61       	ori	r24, 0x10	; 16
     ad4:	8c 93       	st	X, r24
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	aa ef       	ldi	r26, 0xFA	; 250
     adc:	b3 e4       	ldi	r27, 0x43	; 67
     ade:	8b 87       	std	Y+11, r24	; 0x0b
     ae0:	9c 87       	std	Y+12, r25	; 0x0c
     ae2:	ad 87       	std	Y+13, r26	; 0x0d
     ae4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
     aea:	8d 85       	ldd	r24, Y+13	; 0x0d
     aec:	9e 85       	ldd	r25, Y+14	; 0x0e
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	4a e7       	ldi	r20, 0x7A	; 122
     af4:	55 e4       	ldi	r21, 0x45	; 69
     af6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	8f 83       	std	Y+7, r24	; 0x07
     b00:	98 87       	std	Y+8, r25	; 0x08
     b02:	a9 87       	std	Y+9, r26	; 0x09
     b04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b06:	6f 81       	ldd	r22, Y+7	; 0x07
     b08:	78 85       	ldd	r23, Y+8	; 0x08
     b0a:	89 85       	ldd	r24, Y+9	; 0x09
     b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 e8       	ldi	r20, 0x80	; 128
     b14:	5f e3       	ldi	r21, 0x3F	; 63
     b16:	0e 94 b7 0c 	call	0x196e	; 0x196e <__ltsf2>
     b1a:	88 23       	and	r24, r24
     b1c:	2c f4       	brge	.+10     	; 0xb28 <rechte_lijnbeide+0x43a>
		__ticks = 1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	9e 83       	std	Y+6, r25	; 0x06
     b24:	8d 83       	std	Y+5, r24	; 0x05
     b26:	3f c0       	rjmp	.+126    	; 0xba6 <rechte_lijnbeide+0x4b8>
	else if (__tmp > 65535)
     b28:	6f 81       	ldd	r22, Y+7	; 0x07
     b2a:	78 85       	ldd	r23, Y+8	; 0x08
     b2c:	89 85       	ldd	r24, Y+9	; 0x09
     b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	4f e7       	ldi	r20, 0x7F	; 127
     b36:	57 e4       	ldi	r21, 0x47	; 71
     b38:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__gtsf2>
     b3c:	18 16       	cp	r1, r24
     b3e:	4c f5       	brge	.+82     	; 0xb92 <rechte_lijnbeide+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b40:	6b 85       	ldd	r22, Y+11	; 0x0b
     b42:	7c 85       	ldd	r23, Y+12	; 0x0c
     b44:	8d 85       	ldd	r24, Y+13	; 0x0d
     b46:	9e 85       	ldd	r25, Y+14	; 0x0e
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e2       	ldi	r20, 0x20	; 32
     b4e:	51 e4       	ldi	r21, 0x41	; 65
     b50:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	bc 01       	movw	r22, r24
     b5a:	cd 01       	movw	r24, r26
     b5c:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	9e 83       	std	Y+6, r25	; 0x06
     b66:	8d 83       	std	Y+5, r24	; 0x05
     b68:	0f c0       	rjmp	.+30     	; 0xb88 <rechte_lijnbeide+0x49a>
     b6a:	80 e9       	ldi	r24, 0x90	; 144
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	9c 83       	std	Y+4, r25	; 0x04
     b70:	8b 83       	std	Y+3, r24	; 0x03
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <rechte_lijnbeide+0x488>
     b7a:	9c 83       	std	Y+4, r25	; 0x04
     b7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b7e:	8d 81       	ldd	r24, Y+5	; 0x05
     b80:	9e 81       	ldd	r25, Y+6	; 0x06
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	9e 83       	std	Y+6, r25	; 0x06
     b86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	9e 81       	ldd	r25, Y+6	; 0x06
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	69 f7       	brne	.-38     	; 0xb6a <rechte_lijnbeide+0x47c>
     b90:	14 c0       	rjmp	.+40     	; 0xbba <rechte_lijnbeide+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b92:	6f 81       	ldd	r22, Y+7	; 0x07
     b94:	78 85       	ldd	r23, Y+8	; 0x08
     b96:	89 85       	ldd	r24, Y+9	; 0x09
     b98:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9a:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	9e 83       	std	Y+6, r25	; 0x06
     ba4:	8d 83       	std	Y+5, r24	; 0x05
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	9e 81       	ldd	r25, Y+6	; 0x06
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <rechte_lijnbeide+0x4c4>
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(500);
            PORTH &= ~(1 << PH4);
     bba:	a2 e0       	ldi	r26, 0x02	; 2
     bbc:	b1 e0       	ldi	r27, 0x01	; 1
     bbe:	e2 e0       	ldi	r30, 0x02	; 2
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	80 81       	ld	r24, Z
     bc4:	8f 7e       	andi	r24, 0xEF	; 239
     bc6:	8c 93       	st	X, r24
            Grote_klok = waarde;
     bc8:	89 ad       	ldd	r24, Y+57	; 0x39
     bca:	9a ad       	ldd	r25, Y+58	; 0x3a
     bcc:	90 93 0f 03 	sts	0x030F, r25
     bd0:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnbeide(void)
{
    int vlag = 1;
    TCNT1 = 0;
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
     bd4:	8d ad       	ldd	r24, Y+61	; 0x3d
     bd6:	9e ad       	ldd	r25, Y+62	; 0x3e
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	09 f0       	breq	.+2      	; 0xbde <rechte_lijnbeide+0x4f0>
     bdc:	9f cd       	rjmp	.-1218   	; 0x71c <rechte_lijnbeide+0x2e>
            PORTH &= ~(1 << PH4);
            Grote_klok = waarde;
        }

    }
}
     bde:	ee 96       	adiw	r28, 0x3e	; 62
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <bocht_links>:

void bocht_links (void)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	0f 92       	push	r0
     bf6:	0f 92       	push	r0
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
    int vlag;
    TCNT1 = 0;
     bfc:	e4 e8       	ldi	r30, 0x84	; 132
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	11 82       	std	Z+1, r1	; 0x01
     c02:	10 82       	st	Z, r1
    Grote_klok = 0;
     c04:	10 92 0f 03 	sts	0x030F, r1
     c08:	10 92 0e 03 	sts	0x030E, r1
     c0c:	45 c0       	rjmp	.+138    	; 0xc98 <bocht_links+0xa8>
    while ((vlag == 1))// && (PINA &(1 << PA0))
    {
        motor(35,170); //bocht naar rechts maken
     c0e:	83 e2       	ldi	r24, 0x23	; 35
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	6a ea       	ldi	r22, 0xAA	; 170
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
        if ((PINA &(1 << PA0)) && (Grote_klok <= 11.3)) //waarde
     c1a:	e0 e2       	ldi	r30, 0x20	; 32
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	88 2f       	mov	r24, r24
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	81 70       	andi	r24, 0x01	; 1
     c26:	90 70       	andi	r25, 0x00	; 0
     c28:	88 23       	and	r24, r24
     c2a:	d1 f0       	breq	.+52     	; 0xc60 <bocht_links+0x70>
     c2c:	80 91 0e 03 	lds	r24, 0x030E
     c30:	90 91 0f 03 	lds	r25, 0x030F
     c34:	aa 27       	eor	r26, r26
     c36:	97 fd       	sbrc	r25, 7
     c38:	a0 95       	com	r26
     c3a:	ba 2f       	mov	r27, r26
     c3c:	bc 01       	movw	r22, r24
     c3e:	cd 01       	movw	r24, r26
     c40:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__floatsisf>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	bc 01       	movw	r22, r24
     c4a:	cd 01       	movw	r24, r26
     c4c:	2d ec       	ldi	r18, 0xCD	; 205
     c4e:	3c ec       	ldi	r19, 0xCC	; 204
     c50:	44 e3       	ldi	r20, 0x34	; 52
     c52:	51 e4       	ldi	r21, 0x41	; 65
     c54:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__lesf2>
     c58:	18 16       	cp	r1, r24
     c5a:	14 f0       	brlt	.+4      	; 0xc60 <bocht_links+0x70>
        {
            error();
     c5c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <error>
        }
        if (Grote_klok >= 11.3)
     c60:	80 91 0e 03 	lds	r24, 0x030E
     c64:	90 91 0f 03 	lds	r25, 0x030F
     c68:	aa 27       	eor	r26, r26
     c6a:	97 fd       	sbrc	r25, 7
     c6c:	a0 95       	com	r26
     c6e:	ba 2f       	mov	r27, r26
     c70:	bc 01       	movw	r22, r24
     c72:	cd 01       	movw	r24, r26
     c74:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__floatsisf>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	bc 01       	movw	r22, r24
     c7e:	cd 01       	movw	r24, r26
     c80:	2d ec       	ldi	r18, 0xCD	; 205
     c82:	3c ec       	ldi	r19, 0xCC	; 204
     c84:	44 e3       	ldi	r20, 0x34	; 52
     c86:	51 e4       	ldi	r21, 0x41	; 65
     c88:	0e 94 87 0c 	call	0x190e	; 0x190e <__gesf2>
     c8c:	88 23       	and	r24, r24
     c8e:	24 f0       	brlt	.+8      	; 0xc98 <bocht_links+0xa8>
        {
            vlag = 1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
void bocht_links (void)
{
    int vlag;
    TCNT1 = 0;
    Grote_klok = 0;
    while ((vlag == 1))// && (PINA &(1 << PA0))
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	91 05       	cpc	r25, r1
     ca0:	09 f4       	brne	.+2      	; 0xca4 <bocht_links+0xb4>
     ca2:	b5 cf       	rjmp	.-150    	; 0xc0e <bocht_links+0x1e>
            vlag = 1;
        }

    }

}
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <bocht_rechts>:

void bocht_rechts (void)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	0f 92       	push	r0
     cb4:	0f 92       	push	r0
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
    int vlag;
    TCNT1 = 0;
     cba:	e4 e8       	ldi	r30, 0x84	; 132
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	11 82       	std	Z+1, r1	; 0x01
     cc0:	10 82       	st	Z, r1
    Grote_klok = 0;
     cc2:	10 92 0f 03 	sts	0x030F, r1
     cc6:	10 92 0e 03 	sts	0x030E, r1
     cca:	45 c0       	rjmp	.+138    	; 0xd56 <bocht_rechts+0xa8>
    while ((vlag == 1)) //(PINA &(1 << PA0)) &&
    {
        motor(170,35); //bocht naar rechts maken
     ccc:	8a ea       	ldi	r24, 0xAA	; 170
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	63 e2       	ldi	r22, 0x23	; 35
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
        if ((PINA &(1 << PA0)) && (Grote_klok <= 11.3)) //waarde
     cd8:	e0 e2       	ldi	r30, 0x20	; 32
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	81 70       	andi	r24, 0x01	; 1
     ce4:	90 70       	andi	r25, 0x00	; 0
     ce6:	88 23       	and	r24, r24
     ce8:	d1 f0       	breq	.+52     	; 0xd1e <bocht_rechts+0x70>
     cea:	80 91 0e 03 	lds	r24, 0x030E
     cee:	90 91 0f 03 	lds	r25, 0x030F
     cf2:	aa 27       	eor	r26, r26
     cf4:	97 fd       	sbrc	r25, 7
     cf6:	a0 95       	com	r26
     cf8:	ba 2f       	mov	r27, r26
     cfa:	bc 01       	movw	r22, r24
     cfc:	cd 01       	movw	r24, r26
     cfe:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__floatsisf>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	2d ec       	ldi	r18, 0xCD	; 205
     d0c:	3c ec       	ldi	r19, 0xCC	; 204
     d0e:	44 e3       	ldi	r20, 0x34	; 52
     d10:	51 e4       	ldi	r21, 0x41	; 65
     d12:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__lesf2>
     d16:	18 16       	cp	r1, r24
     d18:	14 f0       	brlt	.+4      	; 0xd1e <bocht_rechts+0x70>
        {
            error();
     d1a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <error>
        }
        if (Grote_klok >= 11.3)
     d1e:	80 91 0e 03 	lds	r24, 0x030E
     d22:	90 91 0f 03 	lds	r25, 0x030F
     d26:	aa 27       	eor	r26, r26
     d28:	97 fd       	sbrc	r25, 7
     d2a:	a0 95       	com	r26
     d2c:	ba 2f       	mov	r27, r26
     d2e:	bc 01       	movw	r22, r24
     d30:	cd 01       	movw	r24, r26
     d32:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__floatsisf>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	2d ec       	ldi	r18, 0xCD	; 205
     d40:	3c ec       	ldi	r19, 0xCC	; 204
     d42:	44 e3       	ldi	r20, 0x34	; 52
     d44:	51 e4       	ldi	r21, 0x41	; 65
     d46:	0e 94 87 0c 	call	0x190e	; 0x190e <__gesf2>
     d4a:	88 23       	and	r24, r24
     d4c:	24 f0       	brlt	.+8      	; 0xd56 <bocht_rechts+0xa8>
        {
            vlag = 1;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01
void bocht_rechts (void)
{
    int vlag;
    TCNT1 = 0;
    Grote_klok = 0;
    while ((vlag == 1)) //(PINA &(1 << PA0)) &&
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <bocht_rechts+0xb4>
     d60:	b5 cf       	rjmp	.-150    	; 0xccc <bocht_rechts+0x1e>
            vlag = 1;
        }

    }

}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <error>:

void error (void) //om een probleem optelossen todat we een betere oplossing hebben of niet
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
    while (1)
    {
        motor(0,0);
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <motor>
     d80:	f9 cf       	rjmp	.-14     	; 0xd74 <error+0x8>

00000d82 <__vector_17>:
uint16_t waarde1;
uint16_t waarde2;
uint32_t counts;

ISR(TIMER1_COMPA_vect)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	00 90 5b 00 	lds	r0, 0x005B
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
     da2:	e4 e8       	ldi	r30, 0x84	; 132
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	11 82       	std	Z+1, r1	; 0x01
     da8:	10 82       	st	Z, r1
    Grote_klok++;
     daa:	80 91 0e 03 	lds	r24, 0x030E
     dae:	90 91 0f 03 	lds	r25, 0x030F
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	90 93 0f 03 	sts	0x030F, r25
     db8:	80 93 0e 03 	sts	0x030E, r24
}
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	0f 90       	pop	r0
     dca:	00 92 5b 00 	sts	0x005B, r0
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <__vector_41>:

ISR (TIMER4_CAPT_vect)
{
     dd8:	1f 92       	push	r1
     dda:	0f 92       	push	r0
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	0f 92       	push	r0
     de0:	00 90 5b 00 	lds	r0, 0x005B
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
    if (TCCR4B & (1<<ICES4)) // On rising edge
     e10:	e1 ea       	ldi	r30, 0xA1	; 161
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	80 74       	andi	r24, 0x40	; 64
     e1c:	90 70       	andi	r25, 0x00	; 0
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	81 f0       	breq	.+32     	; 0xe42 <__vector_41+0x6a>
    {
        TCCR4B &= ~(1<<ICES4); // Next time detect falling edge
     e22:	a1 ea       	ldi	r26, 0xA1	; 161
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e1 ea       	ldi	r30, 0xA1	; 161
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 7b       	andi	r24, 0xBF	; 191
     e2e:	8c 93       	st	X, r24
        waarde1 = TCNT4; // Save current count
     e30:	e4 ea       	ldi	r30, 0xA4	; 164
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	90 93 19 03 	sts	0x0319, r25
     e3c:	80 93 18 03 	sts	0x0318, r24
     e40:	50 c0       	rjmp	.+160    	; 0xee2 <__vector_41+0x10a>
    }
    else // On falling edge
    {
        TCCR4B |= 0; // geen interrupts meer
     e42:	a1 ea       	ldi	r26, 0xA1	; 161
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e1 ea       	ldi	r30, 0xA1	; 161
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8c 93       	st	X, r24
        waarde2 = TCNT4; // Save current count
     e4e:	e4 ea       	ldi	r30, 0xA4	; 164
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	90 93 13 03 	sts	0x0313, r25
     e5a:	80 93 12 03 	sts	0x0312, r24
        counts = (uint32_t)waarde2 - (uint32_t)waarde1;
     e5e:	80 91 12 03 	lds	r24, 0x0312
     e62:	90 91 13 03 	lds	r25, 0x0313
     e66:	9c 01       	movw	r18, r24
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	80 91 18 03 	lds	r24, 0x0318
     e70:	90 91 19 03 	lds	r25, 0x0319
     e74:	cc 01       	movw	r24, r24
     e76:	a0 e0       	ldi	r26, 0x00	; 0
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	79 01       	movw	r14, r18
     e7c:	8a 01       	movw	r16, r20
     e7e:	e8 1a       	sub	r14, r24
     e80:	f9 0a       	sbc	r15, r25
     e82:	0a 0b       	sbc	r16, r26
     e84:	1b 0b       	sbc	r17, r27
     e86:	d8 01       	movw	r26, r16
     e88:	c7 01       	movw	r24, r14
     e8a:	80 93 14 03 	sts	0x0314, r24
     e8e:	90 93 15 03 	sts	0x0315, r25
     e92:	a0 93 16 03 	sts	0x0316, r26
     e96:	b0 93 17 03 	sts	0x0317, r27
        ultrasoon = (counts/2)*0.01715; //snelheid van geluid keer de tijd die de klok vertegenwoordigd (16/8 = 2 1/2E6= 5E-7)
     e9a:	80 91 14 03 	lds	r24, 0x0314
     e9e:	90 91 15 03 	lds	r25, 0x0315
     ea2:	a0 91 16 03 	lds	r26, 0x0316
     ea6:	b0 91 17 03 	lds	r27, 0x0317
     eaa:	b6 95       	lsr	r27
     eac:	a7 95       	ror	r26
     eae:	97 95       	ror	r25
     eb0:	87 95       	ror	r24
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__floatunsisf>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	28 e2       	ldi	r18, 0x28	; 40
     ec4:	3e e7       	ldi	r19, 0x7E	; 126
     ec6:	4c e8       	ldi	r20, 0x8C	; 140
     ec8:	5c e3       	ldi	r21, 0x3C	; 60
     eca:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	80 93 08 03 	sts	0x0308, r24
     ed6:	90 93 09 03 	sts	0x0309, r25
     eda:	a0 93 0a 03 	sts	0x030A, r26
     ede:	b0 93 0b 03 	sts	0x030B, r27
    }
}
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	bf 91       	pop	r27
     eec:	af 91       	pop	r26
     eee:	9f 91       	pop	r25
     ef0:	8f 91       	pop	r24
     ef2:	7f 91       	pop	r23
     ef4:	6f 91       	pop	r22
     ef6:	5f 91       	pop	r21
     ef8:	4f 91       	pop	r20
     efa:	3f 91       	pop	r19
     efc:	2f 91       	pop	r18
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	0f 90       	pop	r0
     f08:	00 92 5b 00 	sts	0x005B, r0
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0
     f12:	1f 90       	pop	r1
     f14:	18 95       	reti

00000f16 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	00 90 5b 00 	lds	r0, 0x005B
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	8f 93       	push	r24
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
    TIMSK4 = (1 << ICIE4);
     f38:	e2 e7       	ldi	r30, 0x72	; 114
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 e2       	ldi	r24, 0x20	; 32
     f3e:	80 83       	st	Z, r24
    TCCR4B |= (1 << ICES4);
     f40:	a1 ea       	ldi	r26, 0xA1	; 161
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e1 ea       	ldi	r30, 0xA1	; 161
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	80 64       	ori	r24, 0x40	; 64
     f4c:	8c 93       	st	X, r24
}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	8f 91       	pop	r24
     f5c:	0f 90       	pop	r0
     f5e:	00 92 5b 00 	sts	0x005B, r0
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_15>:

ISR(TIMER2_OVF_vect)
{
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	00 90 5b 00 	lds	r0, 0x005B
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	af 93       	push	r26
     f82:	bf 93       	push	r27
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
    PORTC |= (1<<PC5);
     f90:	a8 e2       	ldi	r26, 0x28	; 40
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e8 e2       	ldi	r30, 0x28	; 40
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 62       	ori	r24, 0x20	; 32
     f9c:	8c 93       	st	X, r24
    TCNT4 =0;
     f9e:	e4 ea       	ldi	r30, 0xA4	; 164
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	11 82       	std	Z+1, r1	; 0x01
     fa4:	10 82       	st	Z, r1
    OCR4A = 20000;
     fa6:	e8 ea       	ldi	r30, 0xA8	; 168
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	9e e4       	ldi	r25, 0x4E	; 78
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	80 83       	st	Z, r24
}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	0f 90       	pop	r0
     fc4:	00 92 5b 00 	sts	0x005B, r0
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	00 90 5b 00 	lds	r0, 0x005B
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
    if (ADCSRA & (1 << ADIF))
     ff6:	ea e7       	ldi	r30, 0x7A	; 122
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	80 71       	andi	r24, 0x10	; 16
    1002:	90 70       	andi	r25, 0x00	; 0
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	41 f0       	breq	.+16     	; 0x1018 <__vector_13+0x46>
    {
        Ir_links= ADC; //waarde ir links wordt upgedate
    1008:	e8 e7       	ldi	r30, 0x78	; 120
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	90 93 11 03 	sts	0x0311, r25
    1014:	80 93 10 03 	sts	0x0310, r24
    }
    ADMUX &= ~(1);// Analoog 6 wissel naar
    1018:	ac e7       	ldi	r26, 0x7C	; 124
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	ec e7       	ldi	r30, 0x7C	; 124
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADSC); //start convertion
    1026:	aa e7       	ldi	r26, 0x7A	; 122
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ea e7       	ldi	r30, 0x7A	; 122
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	8c 93       	st	X, r24
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	ff 91       	pop	r31
    103a:	ef 91       	pop	r30
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	0f 90       	pop	r0
    1046:	00 92 5b 00 	sts	0x005B, r0
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <__vector_14>:

ISR(TIMER2_COMPB_vect)
{
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	0f 92       	push	r0
    105c:	00 90 5b 00 	lds	r0, 0x005B
    1060:	0f 92       	push	r0
    1062:	11 24       	eor	r1, r1
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    if(ADCSRA & (1 << ADIF))
    1078:	ea e7       	ldi	r30, 0x7A	; 122
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	80 71       	andi	r24, 0x10	; 16
    1084:	90 70       	andi	r25, 0x00	; 0
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	41 f0       	breq	.+16     	; 0x109a <__vector_14+0x46>
    {
        Ir_rechts = ADC; //waarde ir links wordt upgedate
    108a:	e8 e7       	ldi	r30, 0x78	; 120
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	91 81       	ldd	r25, Z+1	; 0x01
    1092:	90 93 0d 03 	sts	0x030D, r25
    1096:	80 93 0c 03 	sts	0x030C, r24
    }
    ADMUX |= 7;
    109a:	ac e7       	ldi	r26, 0x7C	; 124
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ec e7       	ldi	r30, 0x7C	; 124
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	87 60       	ori	r24, 0x07	; 7
    10a6:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADSC); //start convertion
    10a8:	aa e7       	ldi	r26, 0x7A	; 122
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e7       	ldi	r30, 0x7A	; 122
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	8c 93       	st	X, r24
}
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	ff 91       	pop	r31
    10bc:	ef 91       	pop	r30
    10be:	bf 91       	pop	r27
    10c0:	af 91       	pop	r26
    10c2:	9f 91       	pop	r25
    10c4:	8f 91       	pop	r24
    10c6:	0f 90       	pop	r0
    10c8:	00 92 5b 00 	sts	0x005B, r0
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	00 90 5b 00 	lds	r0, 0x005B
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	8f 93       	push	r24
    10e8:	af 93       	push	r26
    10ea:	bf 93       	push	r27
    10ec:	ef 93       	push	r30
    10ee:	ff 93       	push	r31
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    if (OCR0A == 0)
    10f8:	e7 e4       	ldi	r30, 0x47	; 71
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 23       	and	r24, r24
    1100:	39 f4       	brne	.+14     	; 0x1110 <__vector_23+0x3a>
    {
        PORTE &= ~(1<<PE4);
    1102:	ae e2       	ldi	r26, 0x2E	; 46
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ee e2       	ldi	r30, 0x2E	; 46
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8f 7e       	andi	r24, 0xEF	; 239
    110e:	8c 93       	st	X, r24
    }
    if (OCR0B == 0)
    1110:	e8 e4       	ldi	r30, 0x48	; 72
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	88 23       	and	r24, r24
    1118:	39 f4       	brne	.+14     	; 0x1128 <__vector_23+0x52>
    {
        PORTE &= ~(1<<PE3);
    111a:	ae e2       	ldi	r26, 0x2E	; 46
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ee e2       	ldi	r30, 0x2E	; 46
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	87 7f       	andi	r24, 0xF7	; 247
    1126:	8c 93       	st	X, r24
    }
    if (OCR0A != 0)
    1128:	e7 e4       	ldi	r30, 0x47	; 71
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	88 23       	and	r24, r24
    1130:	39 f0       	breq	.+14     	; 0x1140 <__vector_23+0x6a>
    {
        PORTE |= (1<<PE4);
    1132:	ae e2       	ldi	r26, 0x2E	; 46
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ee e2       	ldi	r30, 0x2E	; 46
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 61       	ori	r24, 0x10	; 16
    113e:	8c 93       	st	X, r24
    }
    if (OCR0B != 0)
    1140:	e8 e4       	ldi	r30, 0x48	; 72
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	88 23       	and	r24, r24
    1148:	39 f0       	breq	.+14     	; 0x1158 <__vector_23+0x82>
    {
        PORTE |= (1<<PE3);
    114a:	ae e2       	ldi	r26, 0x2E	; 46
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ee e2       	ldi	r30, 0x2E	; 46
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	8c 93       	st	X, r24
    }
}
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	ff 91       	pop	r31
    115e:	ef 91       	pop	r30
    1160:	bf 91       	pop	r27
    1162:	af 91       	pop	r26
    1164:	8f 91       	pop	r24
    1166:	0f 90       	pop	r0
    1168:	00 92 5b 00 	sts	0x005B, r0
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	00 90 5b 00 	lds	r0, 0x005B
    1182:	0f 92       	push	r0
    1184:	11 24       	eor	r1, r1
    1186:	8f 93       	push	r24
    1188:	af 93       	push	r26
    118a:	bf 93       	push	r27
    118c:	ef 93       	push	r30
    118e:	ff 93       	push	r31
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    PORTE &= ~(1<<PE4);
    1198:	ae e2       	ldi	r26, 0x2E	; 46
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ee e2       	ldi	r30, 0x2E	; 46
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8f 7e       	andi	r24, 0xEF	; 239
    11a4:	8c 93       	st	X, r24
}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	8f 91       	pop	r24
    11b4:	0f 90       	pop	r0
    11b6:	00 92 5b 00 	sts	0x005B, r0
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	00 90 5b 00 	lds	r0, 0x005B
    11d0:	0f 92       	push	r0
    11d2:	11 24       	eor	r1, r1
    11d4:	8f 93       	push	r24
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
    11da:	ef 93       	push	r30
    11dc:	ff 93       	push	r31
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    PORTE &= ~(1<<PE3);
    11e6:	ae e2       	ldi	r26, 0x2E	; 46
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ee e2       	ldi	r30, 0x2E	; 46
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	87 7f       	andi	r24, 0xF7	; 247
    11f2:	8c 93       	st	X, r24
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	ff 91       	pop	r31
    11fa:	ef 91       	pop	r30
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	8f 91       	pop	r24
    1202:	0f 90       	pop	r0
    1204:	00 92 5b 00 	sts	0x005B, r0
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <init_motor>:

void init_motor (void)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    // Output low
    PORTE &= ~(1<<PE4); //motor laag
    121a:	ae e2       	ldi	r26, 0x2E	; 46
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ee e2       	ldi	r30, 0x2E	; 46
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8f 7e       	andi	r24, 0xEF	; 239
    1226:	8c 93       	st	X, r24
    PORTE &= ~(1<<PE3);
    1228:	ae e2       	ldi	r26, 0x2E	; 46
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ee e2       	ldi	r30, 0x2E	; 46
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	87 7f       	andi	r24, 0xF7	; 247
    1234:	8c 93       	st	X, r24

    //Use mode 0, clkdiv = 64 klok 0 Pwm signalen
    TCCR0A = 0;
    1236:	e4 e4       	ldi	r30, 0x44	; 68
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	10 82       	st	Z, r1
    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
    123c:	e5 e4       	ldi	r30, 0x45	; 69
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	80 83       	st	Z, r24
    TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0);
    1244:	ee e6       	ldi	r30, 0x6E	; 110
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	87 e0       	ldi	r24, 0x07	; 7
    124a:	80 83       	st	Z, r24
    OCR0A = 0;
    124c:	e7 e4       	ldi	r30, 0x47	; 71
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	10 82       	st	Z, r1
    OCR0B = 0;
    1252:	e8 e4       	ldi	r30, 0x48	; 72
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	10 82       	st	Z, r1

    //Use mode 0, clkdiv = 256 klok 1 globale klok
    TCCR1A = 0;
    1258:	e0 e8       	ldi	r30, 0x80	; 128
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	10 82       	st	Z, r1
    TCCR1B = (1<<CS12) | (0<<CS11) | (0<<CS10);
    125e:	e1 e8       	ldi	r30, 0x81	; 129
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	84 e0       	ldi	r24, 0x04	; 4
    1264:	80 83       	st	Z, r24
    TIMSK1 = (1<<OCIE0A);
    1266:	ef e6       	ldi	r30, 0x6F	; 111
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	80 83       	st	Z, r24
    OCR1A = 6250; //0.1 van een seconde dus kan gebruikt worden om een grote klok te maken voor 25.5 seconden
    126e:	e8 e8       	ldi	r30, 0x88	; 136
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8a e6       	ldi	r24, 0x6A	; 106
    1274:	98 e1       	ldi	r25, 0x18	; 24
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24

    //Use mode 0, clkdiv = 1024   klok 2 globale trigger
    TCCR2A = 0;
    127a:	e0 eb       	ldi	r30, 0xB0	; 176
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	10 82       	st	Z, r1
    TCCR2B = (1<<CS22) | (0<<CS21) | (1<<CS20);
    1280:	e1 eb       	ldi	r30, 0xB1	; 177
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	80 83       	st	Z, r24
    TIMSK2 = (1<<OCIE2B) | (1<<OCIE2A) | (1<<TOIE2);
    1288:	e0 e7       	ldi	r30, 0x70	; 112
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	87 e0       	ldi	r24, 0x07	; 7
    128e:	80 83       	st	Z, r24
    OCR2A = 85;
    1290:	e3 eb       	ldi	r30, 0xB3	; 179
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	85 e5       	ldi	r24, 0x55	; 85
    1296:	80 83       	st	Z, r24
    OCR2B = 170;
    1298:	e4 eb       	ldi	r30, 0xB4	; 180
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8a ea       	ldi	r24, 0xAA	; 170
    129e:	80 83       	st	Z, r24

    //Use mode 0, clkdiv = 8 klok 4 ultrasoon
    TCCR4A = 0;
    12a0:	e0 ea       	ldi	r30, 0xA0	; 160
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	10 82       	st	Z, r1
    TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);
    12a6:	e1 ea       	ldi	r30, 0xA1	; 161
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	80 83       	st	Z, r24
    TIMSK4 = (1<<OCIE4A);
    12ae:	e2 e7       	ldi	r30, 0x72	; 114
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	80 83       	st	Z, r24

// intialisatie ADC goed controleren vrij nieuw
    ADMUX =(0 << REFS1)|(1 << REFS0); //meet vanaf 0 volt
    12b6:	ec e7       	ldi	r30, 0x7C	; 124
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 e4       	ldi	r24, 0x40	; 64
    12bc:	80 83       	st	Z, r24
    ADCSRA = (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);//Division factor van 128
    12be:	ea e7       	ldi	r30, 0x7A	; 122
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	87 e0       	ldi	r24, 0x07	; 7
    12c4:	80 83       	st	Z, r24
    ADCSRA |=(1 << ADEN); // ADC activeren
    12c6:	aa e7       	ldi	r26, 0x7A	; 122
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ea e7       	ldi	r30, 0x7A	; 122
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	8c 93       	st	X, r24

    // Interupts geactiveerd*/
    sei();
    12d4:	78 94       	sei
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <motor>:

void motor (int Af, int Bf)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <motor+0x6>
    12e2:	0f 92       	push	r0
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	7c 83       	std	Y+4, r23	; 0x04
    12ee:	6b 83       	std	Y+3, r22	; 0x03
            OCR0A = Af;
    12f0:	e7 e4       	ldi	r30, 0x47	; 71
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	80 83       	st	Z, r24
            OCR0B = Bf;
    12f8:	e8 e4       	ldi	r30, 0x48	; 72
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	80 83       	st	Z, r24
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <__fixunssfsi>:
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	7b 01       	movw	r14, r22
    1318:	8c 01       	movw	r16, r24
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	5f e4       	ldi	r21, 0x4F	; 79
    1322:	0e 94 87 0c 	call	0x190e	; 0x190e <__gesf2>
    1326:	88 23       	and	r24, r24
    1328:	8c f0       	brlt	.+34     	; 0x134c <__fixunssfsi+0x3e>
    132a:	c8 01       	movw	r24, r16
    132c:	b7 01       	movw	r22, r14
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	5f e4       	ldi	r21, 0x4F	; 79
    1336:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__subsf3>
    133a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fixsfsi>
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	20 50       	subi	r18, 0x00	; 0
    1344:	30 40       	sbci	r19, 0x00	; 0
    1346:	40 40       	sbci	r20, 0x00	; 0
    1348:	50 48       	sbci	r21, 0x80	; 128
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <__fixunssfsi+0x4a>
    134c:	c8 01       	movw	r24, r16
    134e:	b7 01       	movw	r22, r14
    1350:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fixsfsi>
    1354:	9b 01       	movw	r18, r22
    1356:	ac 01       	movw	r20, r24
    1358:	b9 01       	movw	r22, r18
    135a:	ca 01       	movw	r24, r20
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	08 95       	ret

00001366 <_fpadd_parts>:
    1366:	a0 e0       	ldi	r26, 0x00	; 0
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e9 eb       	ldi	r30, 0xB9	; 185
    136c:	f9 e0       	ldi	r31, 0x09	; 9
    136e:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__>
    1372:	dc 01       	movw	r26, r24
    1374:	2b 01       	movw	r4, r22
    1376:	fa 01       	movw	r30, r20
    1378:	9c 91       	ld	r25, X
    137a:	92 30       	cpi	r25, 0x02	; 2
    137c:	08 f4       	brcc	.+2      	; 0x1380 <_fpadd_parts+0x1a>
    137e:	39 c1       	rjmp	.+626    	; 0x15f2 <_fpadd_parts+0x28c>
    1380:	eb 01       	movw	r28, r22
    1382:	88 81       	ld	r24, Y
    1384:	82 30       	cpi	r24, 0x02	; 2
    1386:	08 f4       	brcc	.+2      	; 0x138a <_fpadd_parts+0x24>
    1388:	33 c1       	rjmp	.+614    	; 0x15f0 <_fpadd_parts+0x28a>
    138a:	94 30       	cpi	r25, 0x04	; 4
    138c:	69 f4       	brne	.+26     	; 0x13a8 <_fpadd_parts+0x42>
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	09 f0       	breq	.+2      	; 0x1394 <_fpadd_parts+0x2e>
    1392:	2f c1       	rjmp	.+606    	; 0x15f2 <_fpadd_parts+0x28c>
    1394:	11 96       	adiw	r26, 0x01	; 1
    1396:	9c 91       	ld	r25, X
    1398:	11 97       	sbiw	r26, 0x01	; 1
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	98 17       	cp	r25, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <_fpadd_parts+0x3c>
    13a0:	28 c1       	rjmp	.+592    	; 0x15f2 <_fpadd_parts+0x28c>
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b2 e0       	ldi	r27, 0x02	; 2
    13a6:	25 c1       	rjmp	.+586    	; 0x15f2 <_fpadd_parts+0x28c>
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	09 f4       	brne	.+2      	; 0x13ae <_fpadd_parts+0x48>
    13ac:	21 c1       	rjmp	.+578    	; 0x15f0 <_fpadd_parts+0x28a>
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	a9 f4       	brne	.+42     	; 0x13dc <_fpadd_parts+0x76>
    13b2:	92 30       	cpi	r25, 0x02	; 2
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <_fpadd_parts+0x52>
    13b6:	1d c1       	rjmp	.+570    	; 0x15f2 <_fpadd_parts+0x28c>
    13b8:	9a 01       	movw	r18, r20
    13ba:	ad 01       	movw	r20, r26
    13bc:	88 e0       	ldi	r24, 0x08	; 8
    13be:	ea 01       	movw	r28, r20
    13c0:	09 90       	ld	r0, Y+
    13c2:	ae 01       	movw	r20, r28
    13c4:	e9 01       	movw	r28, r18
    13c6:	09 92       	st	Y+, r0
    13c8:	9e 01       	movw	r18, r28
    13ca:	81 50       	subi	r24, 0x01	; 1
    13cc:	c1 f7       	brne	.-16     	; 0x13be <_fpadd_parts+0x58>
    13ce:	e2 01       	movw	r28, r4
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	11 96       	adiw	r26, 0x01	; 1
    13d4:	9c 91       	ld	r25, X
    13d6:	89 23       	and	r24, r25
    13d8:	81 83       	std	Z+1, r24	; 0x01
    13da:	08 c1       	rjmp	.+528    	; 0x15ec <_fpadd_parts+0x286>
    13dc:	92 30       	cpi	r25, 0x02	; 2
    13de:	09 f4       	brne	.+2      	; 0x13e2 <_fpadd_parts+0x7c>
    13e0:	07 c1       	rjmp	.+526    	; 0x15f0 <_fpadd_parts+0x28a>
    13e2:	12 96       	adiw	r26, 0x02	; 2
    13e4:	2d 90       	ld	r2, X+
    13e6:	3c 90       	ld	r3, X
    13e8:	13 97       	sbiw	r26, 0x03	; 3
    13ea:	eb 01       	movw	r28, r22
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	14 96       	adiw	r26, 0x04	; 4
    13f2:	ad 90       	ld	r10, X+
    13f4:	bd 90       	ld	r11, X+
    13f6:	cd 90       	ld	r12, X+
    13f8:	dc 90       	ld	r13, X
    13fa:	17 97       	sbiw	r26, 0x07	; 7
    13fc:	ec 80       	ldd	r14, Y+4	; 0x04
    13fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1400:	0e 81       	ldd	r16, Y+6	; 0x06
    1402:	1f 81       	ldd	r17, Y+7	; 0x07
    1404:	91 01       	movw	r18, r2
    1406:	28 1b       	sub	r18, r24
    1408:	39 0b       	sbc	r19, r25
    140a:	b9 01       	movw	r22, r18
    140c:	37 ff       	sbrs	r19, 7
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <_fpadd_parts+0xb2>
    1410:	66 27       	eor	r22, r22
    1412:	77 27       	eor	r23, r23
    1414:	62 1b       	sub	r22, r18
    1416:	73 0b       	sbc	r23, r19
    1418:	60 32       	cpi	r22, 0x20	; 32
    141a:	71 05       	cpc	r23, r1
    141c:	0c f0       	brlt	.+2      	; 0x1420 <_fpadd_parts+0xba>
    141e:	61 c0       	rjmp	.+194    	; 0x14e2 <_fpadd_parts+0x17c>
    1420:	12 16       	cp	r1, r18
    1422:	13 06       	cpc	r1, r19
    1424:	6c f5       	brge	.+90     	; 0x1480 <_fpadd_parts+0x11a>
    1426:	37 01       	movw	r6, r14
    1428:	48 01       	movw	r8, r16
    142a:	06 2e       	mov	r0, r22
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <_fpadd_parts+0xd0>
    142e:	96 94       	lsr	r9
    1430:	87 94       	ror	r8
    1432:	77 94       	ror	r7
    1434:	67 94       	ror	r6
    1436:	0a 94       	dec	r0
    1438:	d2 f7       	brpl	.-12     	; 0x142e <_fpadd_parts+0xc8>
    143a:	21 e0       	ldi	r18, 0x01	; 1
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	04 c0       	rjmp	.+8      	; 0x144c <_fpadd_parts+0xe6>
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	44 1f       	adc	r20, r20
    144a:	55 1f       	adc	r21, r21
    144c:	6a 95       	dec	r22
    144e:	d2 f7       	brpl	.-12     	; 0x1444 <_fpadd_parts+0xde>
    1450:	21 50       	subi	r18, 0x01	; 1
    1452:	30 40       	sbci	r19, 0x00	; 0
    1454:	40 40       	sbci	r20, 0x00	; 0
    1456:	50 40       	sbci	r21, 0x00	; 0
    1458:	2e 21       	and	r18, r14
    145a:	3f 21       	and	r19, r15
    145c:	40 23       	and	r20, r16
    145e:	51 23       	and	r21, r17
    1460:	21 15       	cp	r18, r1
    1462:	31 05       	cpc	r19, r1
    1464:	41 05       	cpc	r20, r1
    1466:	51 05       	cpc	r21, r1
    1468:	21 f0       	breq	.+8      	; 0x1472 <_fpadd_parts+0x10c>
    146a:	21 e0       	ldi	r18, 0x01	; 1
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	79 01       	movw	r14, r18
    1474:	8a 01       	movw	r16, r20
    1476:	e6 28       	or	r14, r6
    1478:	f7 28       	or	r15, r7
    147a:	08 29       	or	r16, r8
    147c:	19 29       	or	r17, r9
    147e:	3c c0       	rjmp	.+120    	; 0x14f8 <_fpadd_parts+0x192>
    1480:	23 2b       	or	r18, r19
    1482:	d1 f1       	breq	.+116    	; 0x14f8 <_fpadd_parts+0x192>
    1484:	26 0e       	add	r2, r22
    1486:	37 1e       	adc	r3, r23
    1488:	35 01       	movw	r6, r10
    148a:	46 01       	movw	r8, r12
    148c:	06 2e       	mov	r0, r22
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <_fpadd_parts+0x132>
    1490:	96 94       	lsr	r9
    1492:	87 94       	ror	r8
    1494:	77 94       	ror	r7
    1496:	67 94       	ror	r6
    1498:	0a 94       	dec	r0
    149a:	d2 f7       	brpl	.-12     	; 0x1490 <_fpadd_parts+0x12a>
    149c:	21 e0       	ldi	r18, 0x01	; 1
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <_fpadd_parts+0x148>
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	44 1f       	adc	r20, r20
    14ac:	55 1f       	adc	r21, r21
    14ae:	6a 95       	dec	r22
    14b0:	d2 f7       	brpl	.-12     	; 0x14a6 <_fpadd_parts+0x140>
    14b2:	21 50       	subi	r18, 0x01	; 1
    14b4:	30 40       	sbci	r19, 0x00	; 0
    14b6:	40 40       	sbci	r20, 0x00	; 0
    14b8:	50 40       	sbci	r21, 0x00	; 0
    14ba:	2a 21       	and	r18, r10
    14bc:	3b 21       	and	r19, r11
    14be:	4c 21       	and	r20, r12
    14c0:	5d 21       	and	r21, r13
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	41 05       	cpc	r20, r1
    14c8:	51 05       	cpc	r21, r1
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <_fpadd_parts+0x16e>
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	59 01       	movw	r10, r18
    14d6:	6a 01       	movw	r12, r20
    14d8:	a6 28       	or	r10, r6
    14da:	b7 28       	or	r11, r7
    14dc:	c8 28       	or	r12, r8
    14de:	d9 28       	or	r13, r9
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <_fpadd_parts+0x192>
    14e2:	82 15       	cp	r24, r2
    14e4:	93 05       	cpc	r25, r3
    14e6:	2c f0       	brlt	.+10     	; 0x14f2 <_fpadd_parts+0x18c>
    14e8:	1c 01       	movw	r2, r24
    14ea:	aa 24       	eor	r10, r10
    14ec:	bb 24       	eor	r11, r11
    14ee:	65 01       	movw	r12, r10
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <_fpadd_parts+0x192>
    14f2:	ee 24       	eor	r14, r14
    14f4:	ff 24       	eor	r15, r15
    14f6:	87 01       	movw	r16, r14
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	9c 91       	ld	r25, X
    14fc:	d2 01       	movw	r26, r4
    14fe:	11 96       	adiw	r26, 0x01	; 1
    1500:	8c 91       	ld	r24, X
    1502:	98 17       	cp	r25, r24
    1504:	09 f4       	brne	.+2      	; 0x1508 <_fpadd_parts+0x1a2>
    1506:	45 c0       	rjmp	.+138    	; 0x1592 <_fpadd_parts+0x22c>
    1508:	99 23       	and	r25, r25
    150a:	39 f0       	breq	.+14     	; 0x151a <_fpadd_parts+0x1b4>
    150c:	a8 01       	movw	r20, r16
    150e:	97 01       	movw	r18, r14
    1510:	2a 19       	sub	r18, r10
    1512:	3b 09       	sbc	r19, r11
    1514:	4c 09       	sbc	r20, r12
    1516:	5d 09       	sbc	r21, r13
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <_fpadd_parts+0x1c0>
    151a:	a6 01       	movw	r20, r12
    151c:	95 01       	movw	r18, r10
    151e:	2e 19       	sub	r18, r14
    1520:	3f 09       	sbc	r19, r15
    1522:	40 0b       	sbc	r20, r16
    1524:	51 0b       	sbc	r21, r17
    1526:	57 fd       	sbrc	r21, 7
    1528:	08 c0       	rjmp	.+16     	; 0x153a <_fpadd_parts+0x1d4>
    152a:	11 82       	std	Z+1, r1	; 0x01
    152c:	33 82       	std	Z+3, r3	; 0x03
    152e:	22 82       	std	Z+2, r2	; 0x02
    1530:	24 83       	std	Z+4, r18	; 0x04
    1532:	35 83       	std	Z+5, r19	; 0x05
    1534:	46 83       	std	Z+6, r20	; 0x06
    1536:	57 83       	std	Z+7, r21	; 0x07
    1538:	1d c0       	rjmp	.+58     	; 0x1574 <_fpadd_parts+0x20e>
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	81 83       	std	Z+1, r24	; 0x01
    153e:	33 82       	std	Z+3, r3	; 0x03
    1540:	22 82       	std	Z+2, r2	; 0x02
    1542:	88 27       	eor	r24, r24
    1544:	99 27       	eor	r25, r25
    1546:	dc 01       	movw	r26, r24
    1548:	82 1b       	sub	r24, r18
    154a:	93 0b       	sbc	r25, r19
    154c:	a4 0b       	sbc	r26, r20
    154e:	b5 0b       	sbc	r27, r21
    1550:	84 83       	std	Z+4, r24	; 0x04
    1552:	95 83       	std	Z+5, r25	; 0x05
    1554:	a6 83       	std	Z+6, r26	; 0x06
    1556:	b7 83       	std	Z+7, r27	; 0x07
    1558:	0d c0       	rjmp	.+26     	; 0x1574 <_fpadd_parts+0x20e>
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	44 1f       	adc	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	24 83       	std	Z+4, r18	; 0x04
    1564:	35 83       	std	Z+5, r19	; 0x05
    1566:	46 83       	std	Z+6, r20	; 0x06
    1568:	57 83       	std	Z+7, r21	; 0x07
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	93 81       	ldd	r25, Z+3	; 0x03
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	93 83       	std	Z+3, r25	; 0x03
    1572:	82 83       	std	Z+2, r24	; 0x02
    1574:	24 81       	ldd	r18, Z+4	; 0x04
    1576:	35 81       	ldd	r19, Z+5	; 0x05
    1578:	46 81       	ldd	r20, Z+6	; 0x06
    157a:	57 81       	ldd	r21, Z+7	; 0x07
    157c:	da 01       	movw	r26, r20
    157e:	c9 01       	movw	r24, r18
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	a1 09       	sbc	r26, r1
    1584:	b1 09       	sbc	r27, r1
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	af 4f       	sbci	r26, 0xFF	; 255
    158c:	bf 43       	sbci	r27, 0x3F	; 63
    158e:	28 f3       	brcs	.-54     	; 0x155a <_fpadd_parts+0x1f4>
    1590:	0b c0       	rjmp	.+22     	; 0x15a8 <_fpadd_parts+0x242>
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	33 82       	std	Z+3, r3	; 0x03
    1596:	22 82       	std	Z+2, r2	; 0x02
    1598:	ea 0c       	add	r14, r10
    159a:	fb 1c       	adc	r15, r11
    159c:	0c 1d       	adc	r16, r12
    159e:	1d 1d       	adc	r17, r13
    15a0:	e4 82       	std	Z+4, r14	; 0x04
    15a2:	f5 82       	std	Z+5, r15	; 0x05
    15a4:	06 83       	std	Z+6, r16	; 0x06
    15a6:	17 83       	std	Z+7, r17	; 0x07
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	80 83       	st	Z, r24
    15ac:	24 81       	ldd	r18, Z+4	; 0x04
    15ae:	35 81       	ldd	r19, Z+5	; 0x05
    15b0:	46 81       	ldd	r20, Z+6	; 0x06
    15b2:	57 81       	ldd	r21, Z+7	; 0x07
    15b4:	57 ff       	sbrs	r21, 7
    15b6:	1a c0       	rjmp	.+52     	; 0x15ec <_fpadd_parts+0x286>
    15b8:	c9 01       	movw	r24, r18
    15ba:	aa 27       	eor	r26, r26
    15bc:	97 fd       	sbrc	r25, 7
    15be:	a0 95       	com	r26
    15c0:	ba 2f       	mov	r27, r26
    15c2:	81 70       	andi	r24, 0x01	; 1
    15c4:	90 70       	andi	r25, 0x00	; 0
    15c6:	a0 70       	andi	r26, 0x00	; 0
    15c8:	b0 70       	andi	r27, 0x00	; 0
    15ca:	56 95       	lsr	r21
    15cc:	47 95       	ror	r20
    15ce:	37 95       	ror	r19
    15d0:	27 95       	ror	r18
    15d2:	82 2b       	or	r24, r18
    15d4:	93 2b       	or	r25, r19
    15d6:	a4 2b       	or	r26, r20
    15d8:	b5 2b       	or	r27, r21
    15da:	84 83       	std	Z+4, r24	; 0x04
    15dc:	95 83       	std	Z+5, r25	; 0x05
    15de:	a6 83       	std	Z+6, r26	; 0x06
    15e0:	b7 83       	std	Z+7, r27	; 0x07
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	93 83       	std	Z+3, r25	; 0x03
    15ea:	82 83       	std	Z+2, r24	; 0x02
    15ec:	df 01       	movw	r26, r30
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <_fpadd_parts+0x28c>
    15f0:	d2 01       	movw	r26, r4
    15f2:	cd 01       	movw	r24, r26
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	e2 e1       	ldi	r30, 0x12	; 18
    15fa:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__>

000015fe <__subsf3>:
    15fe:	a0 e2       	ldi	r26, 0x20	; 32
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e0       	ldi	r30, 0x05	; 5
    1604:	fb e0       	ldi	r31, 0x0B	; 11
    1606:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__prologue_saves__+0x18>
    160a:	69 83       	std	Y+1, r22	; 0x01
    160c:	7a 83       	std	Y+2, r23	; 0x02
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	9c 83       	std	Y+4, r25	; 0x04
    1612:	2d 83       	std	Y+5, r18	; 0x05
    1614:	3e 83       	std	Y+6, r19	; 0x06
    1616:	4f 83       	std	Y+7, r20	; 0x07
    1618:	58 87       	std	Y+8, r21	; 0x08
    161a:	e9 e0       	ldi	r30, 0x09	; 9
    161c:	ee 2e       	mov	r14, r30
    161e:	f1 2c       	mov	r15, r1
    1620:	ec 0e       	add	r14, r28
    1622:	fd 1e       	adc	r15, r29
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	b7 01       	movw	r22, r14
    162a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    162e:	8e 01       	movw	r16, r28
    1630:	0f 5e       	subi	r16, 0xEF	; 239
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	ce 01       	movw	r24, r28
    1636:	05 96       	adiw	r24, 0x05	; 5
    1638:	b8 01       	movw	r22, r16
    163a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    163e:	8a 89       	ldd	r24, Y+18	; 0x12
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	89 27       	eor	r24, r25
    1644:	8a 8b       	std	Y+18, r24	; 0x12
    1646:	c7 01       	movw	r24, r14
    1648:	b8 01       	movw	r22, r16
    164a:	ae 01       	movw	r20, r28
    164c:	47 5e       	subi	r20, 0xE7	; 231
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	0e 94 b3 09 	call	0x1366	; 0x1366 <_fpadd_parts>
    1654:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__pack_f>
    1658:	a0 96       	adiw	r28, 0x20	; 32
    165a:	e6 e0       	ldi	r30, 0x06	; 6
    165c:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__epilogue_restores__+0x18>

00001660 <__addsf3>:
    1660:	a0 e2       	ldi	r26, 0x20	; 32
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e6 e3       	ldi	r30, 0x36	; 54
    1666:	fb e0       	ldi	r31, 0x0B	; 11
    1668:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__prologue_saves__+0x18>
    166c:	69 83       	std	Y+1, r22	; 0x01
    166e:	7a 83       	std	Y+2, r23	; 0x02
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	2d 83       	std	Y+5, r18	; 0x05
    1676:	3e 83       	std	Y+6, r19	; 0x06
    1678:	4f 83       	std	Y+7, r20	; 0x07
    167a:	58 87       	std	Y+8, r21	; 0x08
    167c:	f9 e0       	ldi	r31, 0x09	; 9
    167e:	ef 2e       	mov	r14, r31
    1680:	f1 2c       	mov	r15, r1
    1682:	ec 0e       	add	r14, r28
    1684:	fd 1e       	adc	r15, r29
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	b7 01       	movw	r22, r14
    168c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    1690:	8e 01       	movw	r16, r28
    1692:	0f 5e       	subi	r16, 0xEF	; 239
    1694:	1f 4f       	sbci	r17, 0xFF	; 255
    1696:	ce 01       	movw	r24, r28
    1698:	05 96       	adiw	r24, 0x05	; 5
    169a:	b8 01       	movw	r22, r16
    169c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    16a0:	c7 01       	movw	r24, r14
    16a2:	b8 01       	movw	r22, r16
    16a4:	ae 01       	movw	r20, r28
    16a6:	47 5e       	subi	r20, 0xE7	; 231
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	0e 94 b3 09 	call	0x1366	; 0x1366 <_fpadd_parts>
    16ae:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__pack_f>
    16b2:	a0 96       	adiw	r28, 0x20	; 32
    16b4:	e6 e0       	ldi	r30, 0x06	; 6
    16b6:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__epilogue_restores__+0x18>

000016ba <__mulsf3>:
    16ba:	a0 e2       	ldi	r26, 0x20	; 32
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e3 e6       	ldi	r30, 0x63	; 99
    16c0:	fb e0       	ldi	r31, 0x0B	; 11
    16c2:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__>
    16c6:	69 83       	std	Y+1, r22	; 0x01
    16c8:	7a 83       	std	Y+2, r23	; 0x02
    16ca:	8b 83       	std	Y+3, r24	; 0x03
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	2d 83       	std	Y+5, r18	; 0x05
    16d0:	3e 83       	std	Y+6, r19	; 0x06
    16d2:	4f 83       	std	Y+7, r20	; 0x07
    16d4:	58 87       	std	Y+8, r21	; 0x08
    16d6:	ce 01       	movw	r24, r28
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	be 01       	movw	r22, r28
    16dc:	67 5f       	subi	r22, 0xF7	; 247
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    16e4:	ce 01       	movw	r24, r28
    16e6:	05 96       	adiw	r24, 0x05	; 5
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5e       	subi	r22, 0xEF	; 239
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    16f2:	99 85       	ldd	r25, Y+9	; 0x09
    16f4:	92 30       	cpi	r25, 0x02	; 2
    16f6:	88 f0       	brcs	.+34     	; 0x171a <__mulsf3+0x60>
    16f8:	89 89       	ldd	r24, Y+17	; 0x11
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	c8 f0       	brcs	.+50     	; 0x1730 <__mulsf3+0x76>
    16fe:	94 30       	cpi	r25, 0x04	; 4
    1700:	19 f4       	brne	.+6      	; 0x1708 <__mulsf3+0x4e>
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	51 f4       	brne	.+20     	; 0x171a <__mulsf3+0x60>
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <__mulsf3+0x56>
    1708:	84 30       	cpi	r24, 0x04	; 4
    170a:	29 f4       	brne	.+10     	; 0x1716 <__mulsf3+0x5c>
    170c:	92 30       	cpi	r25, 0x02	; 2
    170e:	81 f4       	brne	.+32     	; 0x1730 <__mulsf3+0x76>
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	c6 c0       	rjmp	.+396    	; 0x18a2 <__mulsf3+0x1e8>
    1716:	92 30       	cpi	r25, 0x02	; 2
    1718:	49 f4       	brne	.+18     	; 0x172c <__mulsf3+0x72>
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	9a 85       	ldd	r25, Y+10	; 0x0a
    171e:	8a 89       	ldd	r24, Y+18	; 0x12
    1720:	98 13       	cpse	r25, r24
    1722:	21 e0       	ldi	r18, 0x01	; 1
    1724:	2a 87       	std	Y+10, r18	; 0x0a
    1726:	ce 01       	movw	r24, r28
    1728:	09 96       	adiw	r24, 0x09	; 9
    172a:	bb c0       	rjmp	.+374    	; 0x18a2 <__mulsf3+0x1e8>
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	49 f4       	brne	.+18     	; 0x1742 <__mulsf3+0x88>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	8a 89       	ldd	r24, Y+18	; 0x12
    1736:	98 13       	cpse	r25, r24
    1738:	21 e0       	ldi	r18, 0x01	; 1
    173a:	2a 8b       	std	Y+18, r18	; 0x12
    173c:	ce 01       	movw	r24, r28
    173e:	41 96       	adiw	r24, 0x11	; 17
    1740:	b0 c0       	rjmp	.+352    	; 0x18a2 <__mulsf3+0x1e8>
    1742:	2d 84       	ldd	r2, Y+13	; 0x0d
    1744:	3e 84       	ldd	r3, Y+14	; 0x0e
    1746:	4f 84       	ldd	r4, Y+15	; 0x0f
    1748:	58 88       	ldd	r5, Y+16	; 0x10
    174a:	6d 88       	ldd	r6, Y+21	; 0x15
    174c:	7e 88       	ldd	r7, Y+22	; 0x16
    174e:	8f 88       	ldd	r8, Y+23	; 0x17
    1750:	98 8c       	ldd	r9, Y+24	; 0x18
    1752:	ee 24       	eor	r14, r14
    1754:	ff 24       	eor	r15, r15
    1756:	87 01       	movw	r16, r14
    1758:	aa 24       	eor	r10, r10
    175a:	bb 24       	eor	r11, r11
    175c:	65 01       	movw	r12, r10
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	e0 e0       	ldi	r30, 0x00	; 0
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	c1 01       	movw	r24, r2
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	89 2b       	or	r24, r25
    1772:	e9 f0       	breq	.+58     	; 0x17ae <__mulsf3+0xf4>
    1774:	e6 0c       	add	r14, r6
    1776:	f7 1c       	adc	r15, r7
    1778:	08 1d       	adc	r16, r8
    177a:	19 1d       	adc	r17, r9
    177c:	9a 01       	movw	r18, r20
    177e:	ab 01       	movw	r20, r22
    1780:	2a 0d       	add	r18, r10
    1782:	3b 1d       	adc	r19, r11
    1784:	4c 1d       	adc	r20, r12
    1786:	5d 1d       	adc	r21, r13
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e6 14       	cp	r14, r6
    1792:	f7 04       	cpc	r15, r7
    1794:	08 05       	cpc	r16, r8
    1796:	19 05       	cpc	r17, r9
    1798:	20 f4       	brcc	.+8      	; 0x17a2 <__mulsf3+0xe8>
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e0       	ldi	r26, 0x00	; 0
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	ba 01       	movw	r22, r20
    17a4:	a9 01       	movw	r20, r18
    17a6:	48 0f       	add	r20, r24
    17a8:	59 1f       	adc	r21, r25
    17aa:	6a 1f       	adc	r22, r26
    17ac:	7b 1f       	adc	r23, r27
    17ae:	aa 0c       	add	r10, r10
    17b0:	bb 1c       	adc	r11, r11
    17b2:	cc 1c       	adc	r12, r12
    17b4:	dd 1c       	adc	r13, r13
    17b6:	97 fe       	sbrs	r9, 7
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <__mulsf3+0x110>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e0       	ldi	r26, 0x00	; 0
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	a8 2a       	or	r10, r24
    17c4:	b9 2a       	or	r11, r25
    17c6:	ca 2a       	or	r12, r26
    17c8:	db 2a       	or	r13, r27
    17ca:	31 96       	adiw	r30, 0x01	; 1
    17cc:	e0 32       	cpi	r30, 0x20	; 32
    17ce:	f1 05       	cpc	r31, r1
    17d0:	49 f0       	breq	.+18     	; 0x17e4 <__mulsf3+0x12a>
    17d2:	66 0c       	add	r6, r6
    17d4:	77 1c       	adc	r7, r7
    17d6:	88 1c       	adc	r8, r8
    17d8:	99 1c       	adc	r9, r9
    17da:	56 94       	lsr	r5
    17dc:	47 94       	ror	r4
    17de:	37 94       	ror	r3
    17e0:	27 94       	ror	r2
    17e2:	c3 cf       	rjmp	.-122    	; 0x176a <__mulsf3+0xb0>
    17e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    17e6:	ea 89       	ldd	r30, Y+18	; 0x12
    17e8:	2b 89       	ldd	r18, Y+19	; 0x13
    17ea:	3c 89       	ldd	r19, Y+20	; 0x14
    17ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f0:	28 0f       	add	r18, r24
    17f2:	39 1f       	adc	r19, r25
    17f4:	2e 5f       	subi	r18, 0xFE	; 254
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	17 c0       	rjmp	.+46     	; 0x1828 <__mulsf3+0x16e>
    17fa:	ca 01       	movw	r24, r20
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	89 2b       	or	r24, r25
    1802:	61 f0       	breq	.+24     	; 0x181c <__mulsf3+0x162>
    1804:	16 95       	lsr	r17
    1806:	07 95       	ror	r16
    1808:	f7 94       	ror	r15
    180a:	e7 94       	ror	r14
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e8       	ldi	r27, 0x80	; 128
    1814:	e8 2a       	or	r14, r24
    1816:	f9 2a       	or	r15, r25
    1818:	0a 2b       	or	r16, r26
    181a:	1b 2b       	or	r17, r27
    181c:	76 95       	lsr	r23
    181e:	67 95       	ror	r22
    1820:	57 95       	ror	r21
    1822:	47 95       	ror	r20
    1824:	2f 5f       	subi	r18, 0xFF	; 255
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	77 fd       	sbrc	r23, 7
    182a:	e7 cf       	rjmp	.-50     	; 0x17fa <__mulsf3+0x140>
    182c:	0c c0       	rjmp	.+24     	; 0x1846 <__mulsf3+0x18c>
    182e:	44 0f       	add	r20, r20
    1830:	55 1f       	adc	r21, r21
    1832:	66 1f       	adc	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	17 fd       	sbrc	r17, 7
    1838:	41 60       	ori	r20, 0x01	; 1
    183a:	ee 0c       	add	r14, r14
    183c:	ff 1c       	adc	r15, r15
    183e:	00 1f       	adc	r16, r16
    1840:	11 1f       	adc	r17, r17
    1842:	21 50       	subi	r18, 0x01	; 1
    1844:	30 40       	sbci	r19, 0x00	; 0
    1846:	40 30       	cpi	r20, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	59 07       	cpc	r21, r25
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	69 07       	cpc	r22, r25
    1850:	90 e4       	ldi	r25, 0x40	; 64
    1852:	79 07       	cpc	r23, r25
    1854:	60 f3       	brcs	.-40     	; 0x182e <__mulsf3+0x174>
    1856:	2b 8f       	std	Y+27, r18	; 0x1b
    1858:	3c 8f       	std	Y+28, r19	; 0x1c
    185a:	db 01       	movw	r26, r22
    185c:	ca 01       	movw	r24, r20
    185e:	8f 77       	andi	r24, 0x7F	; 127
    1860:	90 70       	andi	r25, 0x00	; 0
    1862:	a0 70       	andi	r26, 0x00	; 0
    1864:	b0 70       	andi	r27, 0x00	; 0
    1866:	80 34       	cpi	r24, 0x40	; 64
    1868:	91 05       	cpc	r25, r1
    186a:	a1 05       	cpc	r26, r1
    186c:	b1 05       	cpc	r27, r1
    186e:	61 f4       	brne	.+24     	; 0x1888 <__mulsf3+0x1ce>
    1870:	47 fd       	sbrc	r20, 7
    1872:	0a c0       	rjmp	.+20     	; 0x1888 <__mulsf3+0x1ce>
    1874:	e1 14       	cp	r14, r1
    1876:	f1 04       	cpc	r15, r1
    1878:	01 05       	cpc	r16, r1
    187a:	11 05       	cpc	r17, r1
    187c:	29 f0       	breq	.+10     	; 0x1888 <__mulsf3+0x1ce>
    187e:	40 5c       	subi	r20, 0xC0	; 192
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	6f 4f       	sbci	r22, 0xFF	; 255
    1884:	7f 4f       	sbci	r23, 0xFF	; 255
    1886:	40 78       	andi	r20, 0x80	; 128
    1888:	1a 8e       	std	Y+26, r1	; 0x1a
    188a:	fe 17       	cp	r31, r30
    188c:	11 f0       	breq	.+4      	; 0x1892 <__mulsf3+0x1d8>
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	8a 8f       	std	Y+26, r24	; 0x1a
    1892:	4d 8f       	std	Y+29, r20	; 0x1d
    1894:	5e 8f       	std	Y+30, r21	; 0x1e
    1896:	6f 8f       	std	Y+31, r22	; 0x1f
    1898:	78 a3       	std	Y+32, r23	; 0x20
    189a:	83 e0       	ldi	r24, 0x03	; 3
    189c:	89 8f       	std	Y+25, r24	; 0x19
    189e:	ce 01       	movw	r24, r28
    18a0:	49 96       	adiw	r24, 0x19	; 25
    18a2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__pack_f>
    18a6:	a0 96       	adiw	r28, 0x20	; 32
    18a8:	e2 e1       	ldi	r30, 0x12	; 18
    18aa:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__>

000018ae <__gtsf2>:
    18ae:	a8 e1       	ldi	r26, 0x18	; 24
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ed e5       	ldi	r30, 0x5D	; 93
    18b4:	fc e0       	ldi	r31, 0x0C	; 12
    18b6:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__prologue_saves__+0x18>
    18ba:	69 83       	std	Y+1, r22	; 0x01
    18bc:	7a 83       	std	Y+2, r23	; 0x02
    18be:	8b 83       	std	Y+3, r24	; 0x03
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	2d 83       	std	Y+5, r18	; 0x05
    18c4:	3e 83       	std	Y+6, r19	; 0x06
    18c6:	4f 83       	std	Y+7, r20	; 0x07
    18c8:	58 87       	std	Y+8, r21	; 0x08
    18ca:	89 e0       	ldi	r24, 0x09	; 9
    18cc:	e8 2e       	mov	r14, r24
    18ce:	f1 2c       	mov	r15, r1
    18d0:	ec 0e       	add	r14, r28
    18d2:	fd 1e       	adc	r15, r29
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	b7 01       	movw	r22, r14
    18da:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    18de:	8e 01       	movw	r16, r28
    18e0:	0f 5e       	subi	r16, 0xEF	; 239
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	ce 01       	movw	r24, r28
    18e6:	05 96       	adiw	r24, 0x05	; 5
    18e8:	b8 01       	movw	r22, r16
    18ea:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    18ee:	89 85       	ldd	r24, Y+9	; 0x09
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	40 f0       	brcs	.+16     	; 0x1904 <__gtsf2+0x56>
    18f4:	89 89       	ldd	r24, Y+17	; 0x11
    18f6:	82 30       	cpi	r24, 0x02	; 2
    18f8:	28 f0       	brcs	.+10     	; 0x1904 <__gtsf2+0x56>
    18fa:	c7 01       	movw	r24, r14
    18fc:	b8 01       	movw	r22, r16
    18fe:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fpcmp_parts_f>
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <__gtsf2+0x58>
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	68 96       	adiw	r28, 0x18	; 24
    1908:	e6 e0       	ldi	r30, 0x06	; 6
    190a:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__epilogue_restores__+0x18>

0000190e <__gesf2>:
    190e:	a8 e1       	ldi	r26, 0x18	; 24
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ed e8       	ldi	r30, 0x8D	; 141
    1914:	fc e0       	ldi	r31, 0x0C	; 12
    1916:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__prologue_saves__+0x18>
    191a:	69 83       	std	Y+1, r22	; 0x01
    191c:	7a 83       	std	Y+2, r23	; 0x02
    191e:	8b 83       	std	Y+3, r24	; 0x03
    1920:	9c 83       	std	Y+4, r25	; 0x04
    1922:	2d 83       	std	Y+5, r18	; 0x05
    1924:	3e 83       	std	Y+6, r19	; 0x06
    1926:	4f 83       	std	Y+7, r20	; 0x07
    1928:	58 87       	std	Y+8, r21	; 0x08
    192a:	89 e0       	ldi	r24, 0x09	; 9
    192c:	e8 2e       	mov	r14, r24
    192e:	f1 2c       	mov	r15, r1
    1930:	ec 0e       	add	r14, r28
    1932:	fd 1e       	adc	r15, r29
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	b7 01       	movw	r22, r14
    193a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    193e:	8e 01       	movw	r16, r28
    1940:	0f 5e       	subi	r16, 0xEF	; 239
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	ce 01       	movw	r24, r28
    1946:	05 96       	adiw	r24, 0x05	; 5
    1948:	b8 01       	movw	r22, r16
    194a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	40 f0       	brcs	.+16     	; 0x1964 <__gesf2+0x56>
    1954:	89 89       	ldd	r24, Y+17	; 0x11
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	28 f0       	brcs	.+10     	; 0x1964 <__gesf2+0x56>
    195a:	c7 01       	movw	r24, r14
    195c:	b8 01       	movw	r22, r16
    195e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fpcmp_parts_f>
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <__gesf2+0x58>
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	68 96       	adiw	r28, 0x18	; 24
    1968:	e6 e0       	ldi	r30, 0x06	; 6
    196a:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__epilogue_restores__+0x18>

0000196e <__ltsf2>:
    196e:	a8 e1       	ldi	r26, 0x18	; 24
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ed eb       	ldi	r30, 0xBD	; 189
    1974:	fc e0       	ldi	r31, 0x0C	; 12
    1976:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__prologue_saves__+0x18>
    197a:	69 83       	std	Y+1, r22	; 0x01
    197c:	7a 83       	std	Y+2, r23	; 0x02
    197e:	8b 83       	std	Y+3, r24	; 0x03
    1980:	9c 83       	std	Y+4, r25	; 0x04
    1982:	2d 83       	std	Y+5, r18	; 0x05
    1984:	3e 83       	std	Y+6, r19	; 0x06
    1986:	4f 83       	std	Y+7, r20	; 0x07
    1988:	58 87       	std	Y+8, r21	; 0x08
    198a:	89 e0       	ldi	r24, 0x09	; 9
    198c:	e8 2e       	mov	r14, r24
    198e:	f1 2c       	mov	r15, r1
    1990:	ec 0e       	add	r14, r28
    1992:	fd 1e       	adc	r15, r29
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	b7 01       	movw	r22, r14
    199a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    199e:	8e 01       	movw	r16, r28
    19a0:	0f 5e       	subi	r16, 0xEF	; 239
    19a2:	1f 4f       	sbci	r17, 0xFF	; 255
    19a4:	ce 01       	movw	r24, r28
    19a6:	05 96       	adiw	r24, 0x05	; 5
    19a8:	b8 01       	movw	r22, r16
    19aa:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	40 f0       	brcs	.+16     	; 0x19c4 <__ltsf2+0x56>
    19b4:	89 89       	ldd	r24, Y+17	; 0x11
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	28 f0       	brcs	.+10     	; 0x19c4 <__ltsf2+0x56>
    19ba:	c7 01       	movw	r24, r14
    19bc:	b8 01       	movw	r22, r16
    19be:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fpcmp_parts_f>
    19c2:	01 c0       	rjmp	.+2      	; 0x19c6 <__ltsf2+0x58>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	68 96       	adiw	r28, 0x18	; 24
    19c8:	e6 e0       	ldi	r30, 0x06	; 6
    19ca:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__epilogue_restores__+0x18>

000019ce <__lesf2>:
    19ce:	a8 e1       	ldi	r26, 0x18	; 24
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ed ee       	ldi	r30, 0xED	; 237
    19d4:	fc e0       	ldi	r31, 0x0C	; 12
    19d6:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__prologue_saves__+0x18>
    19da:	69 83       	std	Y+1, r22	; 0x01
    19dc:	7a 83       	std	Y+2, r23	; 0x02
    19de:	8b 83       	std	Y+3, r24	; 0x03
    19e0:	9c 83       	std	Y+4, r25	; 0x04
    19e2:	2d 83       	std	Y+5, r18	; 0x05
    19e4:	3e 83       	std	Y+6, r19	; 0x06
    19e6:	4f 83       	std	Y+7, r20	; 0x07
    19e8:	58 87       	std	Y+8, r21	; 0x08
    19ea:	89 e0       	ldi	r24, 0x09	; 9
    19ec:	e8 2e       	mov	r14, r24
    19ee:	f1 2c       	mov	r15, r1
    19f0:	ec 0e       	add	r14, r28
    19f2:	fd 1e       	adc	r15, r29
    19f4:	ce 01       	movw	r24, r28
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	b7 01       	movw	r22, r14
    19fa:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    19fe:	8e 01       	movw	r16, r28
    1a00:	0f 5e       	subi	r16, 0xEF	; 239
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	ce 01       	movw	r24, r28
    1a06:	05 96       	adiw	r24, 0x05	; 5
    1a08:	b8 01       	movw	r22, r16
    1a0a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    1a0e:	89 85       	ldd	r24, Y+9	; 0x09
    1a10:	82 30       	cpi	r24, 0x02	; 2
    1a12:	40 f0       	brcs	.+16     	; 0x1a24 <__lesf2+0x56>
    1a14:	89 89       	ldd	r24, Y+17	; 0x11
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	28 f0       	brcs	.+10     	; 0x1a24 <__lesf2+0x56>
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	b8 01       	movw	r22, r16
    1a1e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fpcmp_parts_f>
    1a22:	01 c0       	rjmp	.+2      	; 0x1a26 <__lesf2+0x58>
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	68 96       	adiw	r28, 0x18	; 24
    1a28:	e6 e0       	ldi	r30, 0x06	; 6
    1a2a:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__epilogue_restores__+0x18>

00001a2e <__floatsisf>:
    1a2e:	a8 e0       	ldi	r26, 0x08	; 8
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	ed e1       	ldi	r30, 0x1D	; 29
    1a34:	fd e0       	ldi	r31, 0x0D	; 13
    1a36:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__prologue_saves__+0x12>
    1a3a:	9b 01       	movw	r18, r22
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	da 01       	movw	r26, r20
    1a44:	c9 01       	movw	r24, r18
    1a46:	88 27       	eor	r24, r24
    1a48:	b7 fd       	sbrc	r27, 7
    1a4a:	83 95       	inc	r24
    1a4c:	99 27       	eor	r25, r25
    1a4e:	aa 27       	eor	r26, r26
    1a50:	bb 27       	eor	r27, r27
    1a52:	b8 2e       	mov	r11, r24
    1a54:	21 15       	cp	r18, r1
    1a56:	31 05       	cpc	r19, r1
    1a58:	41 05       	cpc	r20, r1
    1a5a:	51 05       	cpc	r21, r1
    1a5c:	19 f4       	brne	.+6      	; 0x1a64 <__floatsisf+0x36>
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	3a c0       	rjmp	.+116    	; 0x1ad8 <__floatsisf+0xaa>
    1a64:	88 23       	and	r24, r24
    1a66:	a9 f0       	breq	.+42     	; 0x1a92 <__floatsisf+0x64>
    1a68:	20 30       	cpi	r18, 0x00	; 0
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	38 07       	cpc	r19, r24
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	48 07       	cpc	r20, r24
    1a72:	80 e8       	ldi	r24, 0x80	; 128
    1a74:	58 07       	cpc	r21, r24
    1a76:	29 f4       	brne	.+10     	; 0x1a82 <__floatsisf+0x54>
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	9f ec       	ldi	r25, 0xCF	; 207
    1a80:	30 c0       	rjmp	.+96     	; 0x1ae2 <__floatsisf+0xb4>
    1a82:	ee 24       	eor	r14, r14
    1a84:	ff 24       	eor	r15, r15
    1a86:	87 01       	movw	r16, r14
    1a88:	e2 1a       	sub	r14, r18
    1a8a:	f3 0a       	sbc	r15, r19
    1a8c:	04 0b       	sbc	r16, r20
    1a8e:	15 0b       	sbc	r17, r21
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <__floatsisf+0x68>
    1a92:	79 01       	movw	r14, r18
    1a94:	8a 01       	movw	r16, r20
    1a96:	8e e1       	ldi	r24, 0x1E	; 30
    1a98:	c8 2e       	mov	r12, r24
    1a9a:	d1 2c       	mov	r13, r1
    1a9c:	dc 82       	std	Y+4, r13	; 0x04
    1a9e:	cb 82       	std	Y+3, r12	; 0x03
    1aa0:	ed 82       	std	Y+5, r14	; 0x05
    1aa2:	fe 82       	std	Y+6, r15	; 0x06
    1aa4:	0f 83       	std	Y+7, r16	; 0x07
    1aa6:	18 87       	std	Y+8, r17	; 0x08
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	b7 01       	movw	r22, r14
    1aac:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__clzsi2>
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	18 16       	cp	r1, r24
    1ab4:	19 06       	cpc	r1, r25
    1ab6:	84 f4       	brge	.+32     	; 0x1ad8 <__floatsisf+0xaa>
    1ab8:	08 2e       	mov	r0, r24
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <__floatsisf+0x96>
    1abc:	ee 0c       	add	r14, r14
    1abe:	ff 1c       	adc	r15, r15
    1ac0:	00 1f       	adc	r16, r16
    1ac2:	11 1f       	adc	r17, r17
    1ac4:	0a 94       	dec	r0
    1ac6:	d2 f7       	brpl	.-12     	; 0x1abc <__floatsisf+0x8e>
    1ac8:	ed 82       	std	Y+5, r14	; 0x05
    1aca:	fe 82       	std	Y+6, r15	; 0x06
    1acc:	0f 83       	std	Y+7, r16	; 0x07
    1ace:	18 87       	std	Y+8, r17	; 0x08
    1ad0:	c8 1a       	sub	r12, r24
    1ad2:	d9 0a       	sbc	r13, r25
    1ad4:	dc 82       	std	Y+4, r13	; 0x04
    1ad6:	cb 82       	std	Y+3, r12	; 0x03
    1ad8:	ba 82       	std	Y+2, r11	; 0x02
    1ada:	ce 01       	movw	r24, r28
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__pack_f>
    1ae2:	28 96       	adiw	r28, 0x08	; 8
    1ae4:	e9 e0       	ldi	r30, 0x09	; 9
    1ae6:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__epilogue_restores__+0x12>

00001aea <__fixsfsi>:
    1aea:	ac e0       	ldi	r26, 0x0C	; 12
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e7       	ldi	r30, 0x7B	; 123
    1af0:	fd e0       	ldi	r31, 0x0D	; 13
    1af2:	0c 94 47 10 	jmp	0x208e	; 0x208e <__prologue_saves__+0x20>
    1af6:	69 83       	std	Y+1, r22	; 0x01
    1af8:	7a 83       	std	Y+2, r23	; 0x02
    1afa:	8b 83       	std	Y+3, r24	; 0x03
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	ce 01       	movw	r24, r28
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	be 01       	movw	r22, r28
    1b04:	6b 5f       	subi	r22, 0xFB	; 251
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__unpack_f>
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	61 f1       	breq	.+88     	; 0x1b6a <__fixsfsi+0x80>
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	50 f1       	brcs	.+84     	; 0x1b6a <__fixsfsi+0x80>
    1b16:	84 30       	cpi	r24, 0x04	; 4
    1b18:	21 f4       	brne	.+8      	; 0x1b22 <__fixsfsi+0x38>
    1b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1c:	88 23       	and	r24, r24
    1b1e:	51 f1       	breq	.+84     	; 0x1b74 <__fixsfsi+0x8a>
    1b20:	2e c0       	rjmp	.+92     	; 0x1b7e <__fixsfsi+0x94>
    1b22:	2f 81       	ldd	r18, Y+7	; 0x07
    1b24:	38 85       	ldd	r19, Y+8	; 0x08
    1b26:	37 fd       	sbrc	r19, 7
    1b28:	20 c0       	rjmp	.+64     	; 0x1b6a <__fixsfsi+0x80>
    1b2a:	6e 81       	ldd	r22, Y+6	; 0x06
    1b2c:	2f 31       	cpi	r18, 0x1F	; 31
    1b2e:	31 05       	cpc	r19, r1
    1b30:	1c f0       	brlt	.+6      	; 0x1b38 <__fixsfsi+0x4e>
    1b32:	66 23       	and	r22, r22
    1b34:	f9 f0       	breq	.+62     	; 0x1b74 <__fixsfsi+0x8a>
    1b36:	23 c0       	rjmp	.+70     	; 0x1b7e <__fixsfsi+0x94>
    1b38:	8e e1       	ldi	r24, 0x1E	; 30
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	82 1b       	sub	r24, r18
    1b3e:	93 0b       	sbc	r25, r19
    1b40:	29 85       	ldd	r18, Y+9	; 0x09
    1b42:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b44:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b46:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__fixsfsi+0x68>
    1b4a:	56 95       	lsr	r21
    1b4c:	47 95       	ror	r20
    1b4e:	37 95       	ror	r19
    1b50:	27 95       	ror	r18
    1b52:	8a 95       	dec	r24
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__fixsfsi+0x60>
    1b56:	66 23       	and	r22, r22
    1b58:	b1 f0       	breq	.+44     	; 0x1b86 <__fixsfsi+0x9c>
    1b5a:	50 95       	com	r21
    1b5c:	40 95       	com	r20
    1b5e:	30 95       	com	r19
    1b60:	21 95       	neg	r18
    1b62:	3f 4f       	sbci	r19, 0xFF	; 255
    1b64:	4f 4f       	sbci	r20, 0xFF	; 255
    1b66:	5f 4f       	sbci	r21, 0xFF	; 255
    1b68:	0e c0       	rjmp	.+28     	; 0x1b86 <__fixsfsi+0x9c>
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	09 c0       	rjmp	.+18     	; 0x1b86 <__fixsfsi+0x9c>
    1b74:	2f ef       	ldi	r18, 0xFF	; 255
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f ef       	ldi	r20, 0xFF	; 255
    1b7a:	5f e7       	ldi	r21, 0x7F	; 127
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <__fixsfsi+0x9c>
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	50 e8       	ldi	r21, 0x80	; 128
    1b86:	b9 01       	movw	r22, r18
    1b88:	ca 01       	movw	r24, r20
    1b8a:	2c 96       	adiw	r28, 0x0c	; 12
    1b8c:	e2 e0       	ldi	r30, 0x02	; 2
    1b8e:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__epilogue_restores__+0x20>

00001b92 <__floatunsisf>:
    1b92:	a8 e0       	ldi	r26, 0x08	; 8
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	ef ec       	ldi	r30, 0xCF	; 207
    1b98:	fd e0       	ldi	r31, 0x0D	; 13
    1b9a:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__prologue_saves__+0x10>
    1b9e:	7b 01       	movw	r14, r22
    1ba0:	8c 01       	movw	r16, r24
    1ba2:	61 15       	cp	r22, r1
    1ba4:	71 05       	cpc	r23, r1
    1ba6:	81 05       	cpc	r24, r1
    1ba8:	91 05       	cpc	r25, r1
    1baa:	19 f4       	brne	.+6      	; 0x1bb2 <__floatunsisf+0x20>
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	60 c0       	rjmp	.+192    	; 0x1c72 <__floatunsisf+0xe0>
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	8e e1       	ldi	r24, 0x1E	; 30
    1bb8:	c8 2e       	mov	r12, r24
    1bba:	d1 2c       	mov	r13, r1
    1bbc:	dc 82       	std	Y+4, r13	; 0x04
    1bbe:	cb 82       	std	Y+3, r12	; 0x03
    1bc0:	ed 82       	std	Y+5, r14	; 0x05
    1bc2:	fe 82       	std	Y+6, r15	; 0x06
    1bc4:	0f 83       	std	Y+7, r16	; 0x07
    1bc6:	18 87       	std	Y+8, r17	; 0x08
    1bc8:	c8 01       	movw	r24, r16
    1bca:	b7 01       	movw	r22, r14
    1bcc:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__clzsi2>
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	31 97       	sbiw	r30, 0x01	; 1
    1bd4:	f7 ff       	sbrs	r31, 7
    1bd6:	3b c0       	rjmp	.+118    	; 0x1c4e <__floatunsisf+0xbc>
    1bd8:	22 27       	eor	r18, r18
    1bda:	33 27       	eor	r19, r19
    1bdc:	2e 1b       	sub	r18, r30
    1bde:	3f 0b       	sbc	r19, r31
    1be0:	57 01       	movw	r10, r14
    1be2:	68 01       	movw	r12, r16
    1be4:	02 2e       	mov	r0, r18
    1be6:	04 c0       	rjmp	.+8      	; 0x1bf0 <__floatunsisf+0x5e>
    1be8:	d6 94       	lsr	r13
    1bea:	c7 94       	ror	r12
    1bec:	b7 94       	ror	r11
    1bee:	a7 94       	ror	r10
    1bf0:	0a 94       	dec	r0
    1bf2:	d2 f7       	brpl	.-12     	; 0x1be8 <__floatunsisf+0x56>
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a0 e0       	ldi	r26, 0x00	; 0
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <__floatunsisf+0x7c>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	aa 1f       	adc	r26, r26
    1c0c:	bb 1f       	adc	r27, r27
    1c0e:	2a 95       	dec	r18
    1c10:	d2 f7       	brpl	.-12     	; 0x1c06 <__floatunsisf+0x74>
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	a1 09       	sbc	r26, r1
    1c16:	b1 09       	sbc	r27, r1
    1c18:	8e 21       	and	r24, r14
    1c1a:	9f 21       	and	r25, r15
    1c1c:	a0 23       	and	r26, r16
    1c1e:	b1 23       	and	r27, r17
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	a1 05       	cpc	r26, r1
    1c24:	b1 05       	cpc	r27, r1
    1c26:	21 f0       	breq	.+8      	; 0x1c30 <__floatunsisf+0x9e>
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	4a 29       	or	r20, r10
    1c32:	5b 29       	or	r21, r11
    1c34:	6c 29       	or	r22, r12
    1c36:	7d 29       	or	r23, r13
    1c38:	4d 83       	std	Y+5, r20	; 0x05
    1c3a:	5e 83       	std	Y+6, r21	; 0x06
    1c3c:	6f 83       	std	Y+7, r22	; 0x07
    1c3e:	78 87       	std	Y+8, r23	; 0x08
    1c40:	8e e1       	ldi	r24, 0x1E	; 30
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	8e 1b       	sub	r24, r30
    1c46:	9f 0b       	sbc	r25, r31
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
    1c4c:	12 c0       	rjmp	.+36     	; 0x1c72 <__floatunsisf+0xe0>
    1c4e:	30 97       	sbiw	r30, 0x00	; 0
    1c50:	81 f0       	breq	.+32     	; 0x1c72 <__floatunsisf+0xe0>
    1c52:	0e 2e       	mov	r0, r30
    1c54:	04 c0       	rjmp	.+8      	; 0x1c5e <__floatunsisf+0xcc>
    1c56:	ee 0c       	add	r14, r14
    1c58:	ff 1c       	adc	r15, r15
    1c5a:	00 1f       	adc	r16, r16
    1c5c:	11 1f       	adc	r17, r17
    1c5e:	0a 94       	dec	r0
    1c60:	d2 f7       	brpl	.-12     	; 0x1c56 <__floatunsisf+0xc4>
    1c62:	ed 82       	std	Y+5, r14	; 0x05
    1c64:	fe 82       	std	Y+6, r15	; 0x06
    1c66:	0f 83       	std	Y+7, r16	; 0x07
    1c68:	18 87       	std	Y+8, r17	; 0x08
    1c6a:	ce 1a       	sub	r12, r30
    1c6c:	df 0a       	sbc	r13, r31
    1c6e:	dc 82       	std	Y+4, r13	; 0x04
    1c70:	cb 82       	std	Y+3, r12	; 0x03
    1c72:	1a 82       	std	Y+2, r1	; 0x02
    1c74:	ce 01       	movw	r24, r28
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__pack_f>
    1c7c:	28 96       	adiw	r28, 0x08	; 8
    1c7e:	ea e0       	ldi	r30, 0x0A	; 10
    1c80:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__epilogue_restores__+0x10>

00001c84 <__clzsi2>:
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	7b 01       	movw	r14, r22
    1c8e:	8c 01       	movw	r16, r24
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	e8 16       	cp	r14, r24
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	f8 06       	cpc	r15, r24
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	08 07       	cpc	r16, r24
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	18 07       	cpc	r17, r24
    1ca0:	88 f4       	brcc	.+34     	; 0x1cc4 <__clzsi2+0x40>
    1ca2:	8f ef       	ldi	r24, 0xFF	; 255
    1ca4:	e8 16       	cp	r14, r24
    1ca6:	f1 04       	cpc	r15, r1
    1ca8:	01 05       	cpc	r16, r1
    1caa:	11 05       	cpc	r17, r1
    1cac:	31 f0       	breq	.+12     	; 0x1cba <__clzsi2+0x36>
    1cae:	28 f0       	brcs	.+10     	; 0x1cba <__clzsi2+0x36>
    1cb0:	88 e0       	ldi	r24, 0x08	; 8
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a0 e0       	ldi	r26, 0x00	; 0
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	17 c0       	rjmp	.+46     	; 0x1ce8 <__clzsi2+0x64>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 e0       	ldi	r26, 0x00	; 0
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	12 c0       	rjmp	.+36     	; 0x1ce8 <__clzsi2+0x64>
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	e8 16       	cp	r14, r24
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	f8 06       	cpc	r15, r24
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	08 07       	cpc	r16, r24
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	18 07       	cpc	r17, r24
    1cd4:	28 f0       	brcs	.+10     	; 0x1ce0 <__clzsi2+0x5c>
    1cd6:	88 e1       	ldi	r24, 0x18	; 24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e0       	ldi	r26, 0x00	; 0
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	04 c0       	rjmp	.+8      	; 0x1ce8 <__clzsi2+0x64>
    1ce0:	80 e1       	ldi	r24, 0x10	; 16
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a0 e0       	ldi	r26, 0x00	; 0
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	20 e2       	ldi	r18, 0x20	; 32
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	28 1b       	sub	r18, r24
    1cf2:	39 0b       	sbc	r19, r25
    1cf4:	4a 0b       	sbc	r20, r26
    1cf6:	5b 0b       	sbc	r21, r27
    1cf8:	04 c0       	rjmp	.+8      	; 0x1d02 <__clzsi2+0x7e>
    1cfa:	16 95       	lsr	r17
    1cfc:	07 95       	ror	r16
    1cfe:	f7 94       	ror	r15
    1d00:	e7 94       	ror	r14
    1d02:	8a 95       	dec	r24
    1d04:	d2 f7       	brpl	.-12     	; 0x1cfa <__clzsi2+0x76>
    1d06:	f7 01       	movw	r30, r14
    1d08:	e8 5f       	subi	r30, 0xF8	; 248
    1d0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0c:	80 81       	ld	r24, Z
    1d0e:	28 1b       	sub	r18, r24
    1d10:	31 09       	sbc	r19, r1
    1d12:	41 09       	sbc	r20, r1
    1d14:	51 09       	sbc	r21, r1
    1d16:	c9 01       	movw	r24, r18
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	08 95       	ret

00001d22 <__pack_f>:
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	e4 80       	ldd	r14, Z+4	; 0x04
    1d30:	f5 80       	ldd	r15, Z+5	; 0x05
    1d32:	06 81       	ldd	r16, Z+6	; 0x06
    1d34:	17 81       	ldd	r17, Z+7	; 0x07
    1d36:	d1 80       	ldd	r13, Z+1	; 0x01
    1d38:	80 81       	ld	r24, Z
    1d3a:	82 30       	cpi	r24, 0x02	; 2
    1d3c:	48 f4       	brcc	.+18     	; 0x1d50 <__pack_f+0x2e>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e1       	ldi	r26, 0x10	; 16
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e8 2a       	or	r14, r24
    1d48:	f9 2a       	or	r15, r25
    1d4a:	0a 2b       	or	r16, r26
    1d4c:	1b 2b       	or	r17, r27
    1d4e:	a5 c0       	rjmp	.+330    	; 0x1e9a <__pack_f+0x178>
    1d50:	84 30       	cpi	r24, 0x04	; 4
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <__pack_f+0x34>
    1d54:	9f c0       	rjmp	.+318    	; 0x1e94 <__pack_f+0x172>
    1d56:	82 30       	cpi	r24, 0x02	; 2
    1d58:	21 f4       	brne	.+8      	; 0x1d62 <__pack_f+0x40>
    1d5a:	ee 24       	eor	r14, r14
    1d5c:	ff 24       	eor	r15, r15
    1d5e:	87 01       	movw	r16, r14
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <__pack_f+0x4a>
    1d62:	e1 14       	cp	r14, r1
    1d64:	f1 04       	cpc	r15, r1
    1d66:	01 05       	cpc	r16, r1
    1d68:	11 05       	cpc	r17, r1
    1d6a:	19 f4       	brne	.+6      	; 0x1d72 <__pack_f+0x50>
    1d6c:	e0 e0       	ldi	r30, 0x00	; 0
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	96 c0       	rjmp	.+300    	; 0x1e9e <__pack_f+0x17c>
    1d72:	62 81       	ldd	r22, Z+2	; 0x02
    1d74:	73 81       	ldd	r23, Z+3	; 0x03
    1d76:	9f ef       	ldi	r25, 0xFF	; 255
    1d78:	62 38       	cpi	r22, 0x82	; 130
    1d7a:	79 07       	cpc	r23, r25
    1d7c:	0c f0       	brlt	.+2      	; 0x1d80 <__pack_f+0x5e>
    1d7e:	5b c0       	rjmp	.+182    	; 0x1e36 <__pack_f+0x114>
    1d80:	22 e8       	ldi	r18, 0x82	; 130
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	26 1b       	sub	r18, r22
    1d86:	37 0b       	sbc	r19, r23
    1d88:	2a 31       	cpi	r18, 0x1A	; 26
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	2c f0       	brlt	.+10     	; 0x1d98 <__pack_f+0x76>
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	2a c0       	rjmp	.+84     	; 0x1dec <__pack_f+0xca>
    1d98:	b8 01       	movw	r22, r16
    1d9a:	a7 01       	movw	r20, r14
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <__pack_f+0x86>
    1da0:	76 95       	lsr	r23
    1da2:	67 95       	ror	r22
    1da4:	57 95       	ror	r21
    1da6:	47 95       	ror	r20
    1da8:	0a 94       	dec	r0
    1daa:	d2 f7       	brpl	.-12     	; 0x1da0 <__pack_f+0x7e>
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e0       	ldi	r26, 0x00	; 0
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <__pack_f+0x9c>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	aa 1f       	adc	r26, r26
    1dbc:	bb 1f       	adc	r27, r27
    1dbe:	2a 95       	dec	r18
    1dc0:	d2 f7       	brpl	.-12     	; 0x1db6 <__pack_f+0x94>
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	a1 09       	sbc	r26, r1
    1dc6:	b1 09       	sbc	r27, r1
    1dc8:	8e 21       	and	r24, r14
    1dca:	9f 21       	and	r25, r15
    1dcc:	a0 23       	and	r26, r16
    1dce:	b1 23       	and	r27, r17
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	a1 05       	cpc	r26, r1
    1dd4:	b1 05       	cpc	r27, r1
    1dd6:	21 f0       	breq	.+8      	; 0x1de0 <__pack_f+0xbe>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e0       	ldi	r26, 0x00	; 0
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	9a 01       	movw	r18, r20
    1de2:	ab 01       	movw	r20, r22
    1de4:	28 2b       	or	r18, r24
    1de6:	39 2b       	or	r19, r25
    1de8:	4a 2b       	or	r20, r26
    1dea:	5b 2b       	or	r21, r27
    1dec:	da 01       	movw	r26, r20
    1dee:	c9 01       	movw	r24, r18
    1df0:	8f 77       	andi	r24, 0x7F	; 127
    1df2:	90 70       	andi	r25, 0x00	; 0
    1df4:	a0 70       	andi	r26, 0x00	; 0
    1df6:	b0 70       	andi	r27, 0x00	; 0
    1df8:	80 34       	cpi	r24, 0x40	; 64
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	a1 05       	cpc	r26, r1
    1dfe:	b1 05       	cpc	r27, r1
    1e00:	39 f4       	brne	.+14     	; 0x1e10 <__pack_f+0xee>
    1e02:	27 ff       	sbrs	r18, 7
    1e04:	09 c0       	rjmp	.+18     	; 0x1e18 <__pack_f+0xf6>
    1e06:	20 5c       	subi	r18, 0xC0	; 192
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <__pack_f+0xf6>
    1e10:	21 5c       	subi	r18, 0xC1	; 193
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	4f 4f       	sbci	r20, 0xFF	; 255
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	e0 e0       	ldi	r30, 0x00	; 0
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	20 30       	cpi	r18, 0x00	; 0
    1e1e:	a0 e0       	ldi	r26, 0x00	; 0
    1e20:	3a 07       	cpc	r19, r26
    1e22:	a0 e0       	ldi	r26, 0x00	; 0
    1e24:	4a 07       	cpc	r20, r26
    1e26:	a0 e4       	ldi	r26, 0x40	; 64
    1e28:	5a 07       	cpc	r21, r26
    1e2a:	10 f0       	brcs	.+4      	; 0x1e30 <__pack_f+0x10e>
    1e2c:	e1 e0       	ldi	r30, 0x01	; 1
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	79 01       	movw	r14, r18
    1e32:	8a 01       	movw	r16, r20
    1e34:	27 c0       	rjmp	.+78     	; 0x1e84 <__pack_f+0x162>
    1e36:	60 38       	cpi	r22, 0x80	; 128
    1e38:	71 05       	cpc	r23, r1
    1e3a:	64 f5       	brge	.+88     	; 0x1e94 <__pack_f+0x172>
    1e3c:	fb 01       	movw	r30, r22
    1e3e:	e1 58       	subi	r30, 0x81	; 129
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	d8 01       	movw	r26, r16
    1e44:	c7 01       	movw	r24, r14
    1e46:	8f 77       	andi	r24, 0x7F	; 127
    1e48:	90 70       	andi	r25, 0x00	; 0
    1e4a:	a0 70       	andi	r26, 0x00	; 0
    1e4c:	b0 70       	andi	r27, 0x00	; 0
    1e4e:	80 34       	cpi	r24, 0x40	; 64
    1e50:	91 05       	cpc	r25, r1
    1e52:	a1 05       	cpc	r26, r1
    1e54:	b1 05       	cpc	r27, r1
    1e56:	39 f4       	brne	.+14     	; 0x1e66 <__pack_f+0x144>
    1e58:	e7 fe       	sbrs	r14, 7
    1e5a:	0d c0       	rjmp	.+26     	; 0x1e76 <__pack_f+0x154>
    1e5c:	80 e4       	ldi	r24, 0x40	; 64
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e0       	ldi	r26, 0x00	; 0
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <__pack_f+0x14c>
    1e66:	8f e3       	ldi	r24, 0x3F	; 63
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 e0       	ldi	r26, 0x00	; 0
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e8 0e       	add	r14, r24
    1e70:	f9 1e       	adc	r15, r25
    1e72:	0a 1f       	adc	r16, r26
    1e74:	1b 1f       	adc	r17, r27
    1e76:	17 ff       	sbrs	r17, 7
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <__pack_f+0x162>
    1e7a:	16 95       	lsr	r17
    1e7c:	07 95       	ror	r16
    1e7e:	f7 94       	ror	r15
    1e80:	e7 94       	ror	r14
    1e82:	31 96       	adiw	r30, 0x01	; 1
    1e84:	87 e0       	ldi	r24, 0x07	; 7
    1e86:	16 95       	lsr	r17
    1e88:	07 95       	ror	r16
    1e8a:	f7 94       	ror	r15
    1e8c:	e7 94       	ror	r14
    1e8e:	8a 95       	dec	r24
    1e90:	d1 f7       	brne	.-12     	; 0x1e86 <__pack_f+0x164>
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <__pack_f+0x17c>
    1e94:	ee 24       	eor	r14, r14
    1e96:	ff 24       	eor	r15, r15
    1e98:	87 01       	movw	r16, r14
    1e9a:	ef ef       	ldi	r30, 0xFF	; 255
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	6e 2f       	mov	r22, r30
    1ea0:	67 95       	ror	r22
    1ea2:	66 27       	eor	r22, r22
    1ea4:	67 95       	ror	r22
    1ea6:	90 2f       	mov	r25, r16
    1ea8:	9f 77       	andi	r25, 0x7F	; 127
    1eaa:	d7 94       	ror	r13
    1eac:	dd 24       	eor	r13, r13
    1eae:	d7 94       	ror	r13
    1eb0:	8e 2f       	mov	r24, r30
    1eb2:	86 95       	lsr	r24
    1eb4:	49 2f       	mov	r20, r25
    1eb6:	46 2b       	or	r20, r22
    1eb8:	58 2f       	mov	r21, r24
    1eba:	5d 29       	or	r21, r13
    1ebc:	b7 01       	movw	r22, r14
    1ebe:	ca 01       	movw	r24, r20
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	df 90       	pop	r13
    1eca:	08 95       	ret

00001ecc <__unpack_f>:
    1ecc:	fc 01       	movw	r30, r24
    1ece:	db 01       	movw	r26, r22
    1ed0:	40 81       	ld	r20, Z
    1ed2:	51 81       	ldd	r21, Z+1	; 0x01
    1ed4:	22 81       	ldd	r18, Z+2	; 0x02
    1ed6:	62 2f       	mov	r22, r18
    1ed8:	6f 77       	andi	r22, 0x7F	; 127
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	22 1f       	adc	r18, r18
    1ede:	22 27       	eor	r18, r18
    1ee0:	22 1f       	adc	r18, r18
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	89 2f       	mov	r24, r25
    1ee6:	88 0f       	add	r24, r24
    1ee8:	82 2b       	or	r24, r18
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	99 1f       	adc	r25, r25
    1ef0:	99 27       	eor	r25, r25
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	11 96       	adiw	r26, 0x01	; 1
    1ef6:	9c 93       	st	X, r25
    1ef8:	11 97       	sbiw	r26, 0x01	; 1
    1efa:	21 15       	cp	r18, r1
    1efc:	31 05       	cpc	r19, r1
    1efe:	a9 f5       	brne	.+106    	; 0x1f6a <__unpack_f+0x9e>
    1f00:	41 15       	cp	r20, r1
    1f02:	51 05       	cpc	r21, r1
    1f04:	61 05       	cpc	r22, r1
    1f06:	71 05       	cpc	r23, r1
    1f08:	11 f4       	brne	.+4      	; 0x1f0e <__unpack_f+0x42>
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	37 c0       	rjmp	.+110    	; 0x1f7c <__unpack_f+0xb0>
    1f0e:	82 e8       	ldi	r24, 0x82	; 130
    1f10:	9f ef       	ldi	r25, 0xFF	; 255
    1f12:	13 96       	adiw	r26, 0x03	; 3
    1f14:	9c 93       	st	X, r25
    1f16:	8e 93       	st	-X, r24
    1f18:	12 97       	sbiw	r26, 0x02	; 2
    1f1a:	9a 01       	movw	r18, r20
    1f1c:	ab 01       	movw	r20, r22
    1f1e:	67 e0       	ldi	r22, 0x07	; 7
    1f20:	22 0f       	add	r18, r18
    1f22:	33 1f       	adc	r19, r19
    1f24:	44 1f       	adc	r20, r20
    1f26:	55 1f       	adc	r21, r21
    1f28:	6a 95       	dec	r22
    1f2a:	d1 f7       	brne	.-12     	; 0x1f20 <__unpack_f+0x54>
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	8c 93       	st	X, r24
    1f30:	0d c0       	rjmp	.+26     	; 0x1f4c <__unpack_f+0x80>
    1f32:	22 0f       	add	r18, r18
    1f34:	33 1f       	adc	r19, r19
    1f36:	44 1f       	adc	r20, r20
    1f38:	55 1f       	adc	r21, r21
    1f3a:	12 96       	adiw	r26, 0x02	; 2
    1f3c:	8d 91       	ld	r24, X+
    1f3e:	9c 91       	ld	r25, X
    1f40:	13 97       	sbiw	r26, 0x03	; 3
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	13 96       	adiw	r26, 0x03	; 3
    1f46:	9c 93       	st	X, r25
    1f48:	8e 93       	st	-X, r24
    1f4a:	12 97       	sbiw	r26, 0x02	; 2
    1f4c:	20 30       	cpi	r18, 0x00	; 0
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	38 07       	cpc	r19, r24
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	48 07       	cpc	r20, r24
    1f56:	80 e4       	ldi	r24, 0x40	; 64
    1f58:	58 07       	cpc	r21, r24
    1f5a:	58 f3       	brcs	.-42     	; 0x1f32 <__unpack_f+0x66>
    1f5c:	14 96       	adiw	r26, 0x04	; 4
    1f5e:	2d 93       	st	X+, r18
    1f60:	3d 93       	st	X+, r19
    1f62:	4d 93       	st	X+, r20
    1f64:	5c 93       	st	X, r21
    1f66:	17 97       	sbiw	r26, 0x07	; 7
    1f68:	08 95       	ret
    1f6a:	2f 3f       	cpi	r18, 0xFF	; 255
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	79 f4       	brne	.+30     	; 0x1f8e <__unpack_f+0xc2>
    1f70:	41 15       	cp	r20, r1
    1f72:	51 05       	cpc	r21, r1
    1f74:	61 05       	cpc	r22, r1
    1f76:	71 05       	cpc	r23, r1
    1f78:	19 f4       	brne	.+6      	; 0x1f80 <__unpack_f+0xb4>
    1f7a:	84 e0       	ldi	r24, 0x04	; 4
    1f7c:	8c 93       	st	X, r24
    1f7e:	08 95       	ret
    1f80:	64 ff       	sbrs	r22, 4
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <__unpack_f+0xbe>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	8c 93       	st	X, r24
    1f88:	12 c0       	rjmp	.+36     	; 0x1fae <__unpack_f+0xe2>
    1f8a:	1c 92       	st	X, r1
    1f8c:	10 c0       	rjmp	.+32     	; 0x1fae <__unpack_f+0xe2>
    1f8e:	2f 57       	subi	r18, 0x7F	; 127
    1f90:	30 40       	sbci	r19, 0x00	; 0
    1f92:	13 96       	adiw	r26, 0x03	; 3
    1f94:	3c 93       	st	X, r19
    1f96:	2e 93       	st	-X, r18
    1f98:	12 97       	sbiw	r26, 0x02	; 2
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	8c 93       	st	X, r24
    1f9e:	87 e0       	ldi	r24, 0x07	; 7
    1fa0:	44 0f       	add	r20, r20
    1fa2:	55 1f       	adc	r21, r21
    1fa4:	66 1f       	adc	r22, r22
    1fa6:	77 1f       	adc	r23, r23
    1fa8:	8a 95       	dec	r24
    1faa:	d1 f7       	brne	.-12     	; 0x1fa0 <__unpack_f+0xd4>
    1fac:	70 64       	ori	r23, 0x40	; 64
    1fae:	14 96       	adiw	r26, 0x04	; 4
    1fb0:	4d 93       	st	X+, r20
    1fb2:	5d 93       	st	X+, r21
    1fb4:	6d 93       	st	X+, r22
    1fb6:	7c 93       	st	X, r23
    1fb8:	17 97       	sbiw	r26, 0x07	; 7
    1fba:	08 95       	ret

00001fbc <__fpcmp_parts_f>:
    1fbc:	1f 93       	push	r17
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	fb 01       	movw	r30, r22
    1fc2:	9c 91       	ld	r25, X
    1fc4:	92 30       	cpi	r25, 0x02	; 2
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <__fpcmp_parts_f+0xe>
    1fc8:	47 c0       	rjmp	.+142    	; 0x2058 <__fpcmp_parts_f+0x9c>
    1fca:	80 81       	ld	r24, Z
    1fcc:	82 30       	cpi	r24, 0x02	; 2
    1fce:	08 f4       	brcc	.+2      	; 0x1fd2 <__fpcmp_parts_f+0x16>
    1fd0:	43 c0       	rjmp	.+134    	; 0x2058 <__fpcmp_parts_f+0x9c>
    1fd2:	94 30       	cpi	r25, 0x04	; 4
    1fd4:	51 f4       	brne	.+20     	; 0x1fea <__fpcmp_parts_f+0x2e>
    1fd6:	11 96       	adiw	r26, 0x01	; 1
    1fd8:	1c 91       	ld	r17, X
    1fda:	84 30       	cpi	r24, 0x04	; 4
    1fdc:	99 f5       	brne	.+102    	; 0x2044 <__fpcmp_parts_f+0x88>
    1fde:	81 81       	ldd	r24, Z+1	; 0x01
    1fe0:	68 2f       	mov	r22, r24
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	61 1b       	sub	r22, r17
    1fe6:	71 09       	sbc	r23, r1
    1fe8:	3f c0       	rjmp	.+126    	; 0x2068 <__fpcmp_parts_f+0xac>
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	21 f0       	breq	.+8      	; 0x1ff6 <__fpcmp_parts_f+0x3a>
    1fee:	92 30       	cpi	r25, 0x02	; 2
    1ff0:	31 f4       	brne	.+12     	; 0x1ffe <__fpcmp_parts_f+0x42>
    1ff2:	82 30       	cpi	r24, 0x02	; 2
    1ff4:	b9 f1       	breq	.+110    	; 0x2064 <__fpcmp_parts_f+0xa8>
    1ff6:	81 81       	ldd	r24, Z+1	; 0x01
    1ff8:	88 23       	and	r24, r24
    1ffa:	89 f1       	breq	.+98     	; 0x205e <__fpcmp_parts_f+0xa2>
    1ffc:	2d c0       	rjmp	.+90     	; 0x2058 <__fpcmp_parts_f+0x9c>
    1ffe:	11 96       	adiw	r26, 0x01	; 1
    2000:	1c 91       	ld	r17, X
    2002:	11 97       	sbiw	r26, 0x01	; 1
    2004:	82 30       	cpi	r24, 0x02	; 2
    2006:	f1 f0       	breq	.+60     	; 0x2044 <__fpcmp_parts_f+0x88>
    2008:	81 81       	ldd	r24, Z+1	; 0x01
    200a:	18 17       	cp	r17, r24
    200c:	d9 f4       	brne	.+54     	; 0x2044 <__fpcmp_parts_f+0x88>
    200e:	12 96       	adiw	r26, 0x02	; 2
    2010:	2d 91       	ld	r18, X+
    2012:	3c 91       	ld	r19, X
    2014:	13 97       	sbiw	r26, 0x03	; 3
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	82 17       	cp	r24, r18
    201c:	93 07       	cpc	r25, r19
    201e:	94 f0       	brlt	.+36     	; 0x2044 <__fpcmp_parts_f+0x88>
    2020:	28 17       	cp	r18, r24
    2022:	39 07       	cpc	r19, r25
    2024:	bc f0       	brlt	.+46     	; 0x2054 <__fpcmp_parts_f+0x98>
    2026:	14 96       	adiw	r26, 0x04	; 4
    2028:	8d 91       	ld	r24, X+
    202a:	9d 91       	ld	r25, X+
    202c:	0d 90       	ld	r0, X+
    202e:	bc 91       	ld	r27, X
    2030:	a0 2d       	mov	r26, r0
    2032:	24 81       	ldd	r18, Z+4	; 0x04
    2034:	35 81       	ldd	r19, Z+5	; 0x05
    2036:	46 81       	ldd	r20, Z+6	; 0x06
    2038:	57 81       	ldd	r21, Z+7	; 0x07
    203a:	28 17       	cp	r18, r24
    203c:	39 07       	cpc	r19, r25
    203e:	4a 07       	cpc	r20, r26
    2040:	5b 07       	cpc	r21, r27
    2042:	18 f4       	brcc	.+6      	; 0x204a <__fpcmp_parts_f+0x8e>
    2044:	11 23       	and	r17, r17
    2046:	41 f0       	breq	.+16     	; 0x2058 <__fpcmp_parts_f+0x9c>
    2048:	0a c0       	rjmp	.+20     	; 0x205e <__fpcmp_parts_f+0xa2>
    204a:	82 17       	cp	r24, r18
    204c:	93 07       	cpc	r25, r19
    204e:	a4 07       	cpc	r26, r20
    2050:	b5 07       	cpc	r27, r21
    2052:	40 f4       	brcc	.+16     	; 0x2064 <__fpcmp_parts_f+0xa8>
    2054:	11 23       	and	r17, r17
    2056:	19 f0       	breq	.+6      	; 0x205e <__fpcmp_parts_f+0xa2>
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	05 c0       	rjmp	.+10     	; 0x2068 <__fpcmp_parts_f+0xac>
    205e:	6f ef       	ldi	r22, 0xFF	; 255
    2060:	7f ef       	ldi	r23, 0xFF	; 255
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <__fpcmp_parts_f+0xac>
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	cb 01       	movw	r24, r22
    206a:	1f 91       	pop	r17
    206c:	08 95       	ret

0000206e <__prologue_saves__>:
    206e:	2f 92       	push	r2
    2070:	3f 92       	push	r3
    2072:	4f 92       	push	r4
    2074:	5f 92       	push	r5
    2076:	6f 92       	push	r6
    2078:	7f 92       	push	r7
    207a:	8f 92       	push	r8
    207c:	9f 92       	push	r9
    207e:	af 92       	push	r10
    2080:	bf 92       	push	r11
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	ca 1b       	sub	r28, r26
    2098:	db 0b       	sbc	r29, r27
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	19 94       	eijmp

000020a6 <__epilogue_restores__>:
    20a6:	2a 88       	ldd	r2, Y+18	; 0x12
    20a8:	39 88       	ldd	r3, Y+17	; 0x11
    20aa:	48 88       	ldd	r4, Y+16	; 0x10
    20ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    20b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    20b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    20b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    20b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    20b8:	b9 84       	ldd	r11, Y+9	; 0x09
    20ba:	c8 84       	ldd	r12, Y+8	; 0x08
    20bc:	df 80       	ldd	r13, Y+7	; 0x07
    20be:	ee 80       	ldd	r14, Y+6	; 0x06
    20c0:	fd 80       	ldd	r15, Y+5	; 0x05
    20c2:	0c 81       	ldd	r16, Y+4	; 0x04
    20c4:	1b 81       	ldd	r17, Y+3	; 0x03
    20c6:	aa 81       	ldd	r26, Y+2	; 0x02
    20c8:	b9 81       	ldd	r27, Y+1	; 0x01
    20ca:	ce 0f       	add	r28, r30
    20cc:	d1 1d       	adc	r29, r1
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	ed 01       	movw	r28, r26
    20da:	08 95       	ret

000020dc <_exit>:
    20dc:	f8 94       	cli

000020de <__stop_program>:
    20de:	ff cf       	rjmp	.-2      	; 0x20de <__stop_program>
