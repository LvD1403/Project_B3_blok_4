
bin\Debug\project_b3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  0000211c  000021d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000211c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800308  00800308  000022d8  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000022d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  000022db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000441  00000000  00000000  000024fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c8a  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001661  00000000  00000000  000055c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cff  00000000  00000000  00006c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00008928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f9  00000000  00000000  00008c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  00009151  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009ae7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__vector_13>
      38:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_14>
      3c:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__vector_17>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_21>
      58:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__vector_22>
      5c:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__vector_41>
      a8:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__vector_42>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e1       	ldi	r30, 0x1C	; 28
      fc:	f1 e2       	ldi	r31, 0x21	; 33
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 31       	cpi	r26, 0x1A	; 26
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "Header.h"



int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    init();
     132:	0e 94 a4 00 	call	0x148	; 0x148 <init>
    init_motor();
     136:	0e 94 24 09 	call	0x1248	; 0x1248 <init_motor>
    rechte_lijnbeide();
     13a:	0e 94 77 03 	call	0x6ee	; 0x6ee <rechte_lijnbeide>
    return 0;
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
}
     142:	cf 91       	pop	r28
     144:	df 91       	pop	r29
     146:	08 95       	ret

00000148 <init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Header.h"

void init (void)
{
     148:	df 93       	push	r29
     14a:	cf 93       	push	r28
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
    DDRE |= (1 << PE3);     //pwm links 5
     150:	ad e2       	ldi	r26, 0x2D	; 45
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	ed e2       	ldi	r30, 0x2D	; 45
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	88 60       	ori	r24, 0x08	; 8
     15c:	8c 93       	st	X, r24
    DDRE |= (1 << PE4);     //pwm rechts 2
     15e:	ad e2       	ldi	r26, 0x2D	; 45
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ed e2       	ldi	r30, 0x2D	; 45
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	80 61       	ori	r24, 0x10	; 16
     16a:	8c 93       	st	X, r24
    DDRH |= (1 << PH4);     //lampje 7
     16c:	a1 e0       	ldi	r26, 0x01	; 1
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	e1 e0       	ldi	r30, 0x01	; 1
     172:	f1 e0       	ldi	r31, 0x01	; 1
     174:	80 81       	ld	r24, Z
     176:	80 61       	ori	r24, 0x10	; 16
     178:	8c 93       	st	X, r24
    DDRE |= (1 << PJ1);     //motorrichting links 14
     17a:	ad e2       	ldi	r26, 0x2D	; 45
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	ed e2       	ldi	r30, 0x2D	; 45
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	82 60       	ori	r24, 0x02	; 2
     186:	8c 93       	st	X, r24
    DDRE |= (1 << PJ0);     //motorrichting rechts 15
     188:	ad e2       	ldi	r26, 0x2D	; 45
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	ed e2       	ldi	r30, 0x2D	; 45
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	81 60       	ori	r24, 0x01	; 1
     194:	8c 93       	st	X, r24
    DDRA &= ~(1 << PD0);    //Nadering links 21
     196:	a1 e2       	ldi	r26, 0x21	; 33
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e1 e2       	ldi	r30, 0x21	; 33
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8e 7f       	andi	r24, 0xFE	; 254
     1a2:	8c 93       	st	X, r24
    DDRA &= ~(1 << PD1);    //Nadering rechts 20
     1a4:	a1 e2       	ldi	r26, 0x21	; 33
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e1 e2       	ldi	r30, 0x21	; 33
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8d 7f       	andi	r24, 0xFD	; 253
     1b0:	8c 93       	st	X, r24
    DDRL &= ~(1 << PL0);    //Ultrasoon echopin 49
     1b2:	aa e0       	ldi	r26, 0x0A	; 10
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	ea e0       	ldi	r30, 0x0A	; 10
     1b8:	f1 e0       	ldi	r31, 0x01	; 1
     1ba:	80 81       	ld	r24, Z
     1bc:	8e 7f       	andi	r24, 0xFE	; 254
     1be:	8c 93       	st	X, r24
    DDRC |=  (1 << PC5);    //Ultrasoon trigger 32
     1c0:	a7 e2       	ldi	r26, 0x27	; 39
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e7 e2       	ldi	r30, 0x27	; 39
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	80 62       	ori	r24, 0x20	; 32
     1cc:	8c 93       	st	X, r24
    DDRF &= ~(1 << PF7);    //Ir sensor Analoog 7 links
     1ce:	a0 e3       	ldi	r26, 0x30	; 48
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e0 e3       	ldi	r30, 0x30	; 48
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	8f 77       	andi	r24, 0x7F	; 127
     1da:	8c 93       	st	X, r24
    DDRF &= ~(1 << PF6);    //Ir sensor Analoog 6 rechts
     1dc:	a0 e3       	ldi	r26, 0x30	; 48
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e0 e3       	ldi	r30, 0x30	; 48
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7b       	andi	r24, 0xBF	; 191
     1e8:	8c 93       	st	X, r24
    DDRF &= ~(1 << PF0);    //Noodstop
     1ea:	a0 e3       	ldi	r26, 0x30	; 48
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e0 e3       	ldi	r30, 0x30	; 48
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8e 7f       	andi	r24, 0xFE	; 254
     1f6:	8c 93       	st	X, r24

}
     1f8:	cf 91       	pop	r28
     1fa:	df 91       	pop	r29
     1fc:	08 95       	ret

000001fe <rechte_lijnlinks>:

void rechte_lijnlinks(void)
{
     1fe:	df 93       	push	r29
     200:	cf 93       	push	r28
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	ee 97       	sbiw	r28, 0x3e	; 62
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	cd bf       	out	0x3d, r28	; 61
    int vlag = 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	9e af       	std	Y+62, r25	; 0x3e
     218:	8d af       	std	Y+61, r24	; 0x3d
    TCNT1 = 0;
     21a:	e4 e8       	ldi	r30, 0x84	; 132
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	11 82       	std	Z+1, r1	; 0x01
     220:	10 82       	st	Z, r1
    Grote_klok = 0;
     222:	10 92 0f 03 	sts	0x030F, r1
     226:	10 92 0e 03 	sts	0x030E, r1
     22a:	53 c2       	rjmp	.+1190   	; 0x6d2 <rechte_lijnlinks+0x4d4>
    while (vlag) //(ultrasoon <= 37)
    {
        if  (PINF && (1 << PF0))
     22c:	ef e2       	ldi	r30, 0x2F	; 47
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	88 23       	and	r24, r24
     234:	09 f4       	brne	.+2      	; 0x238 <rechte_lijnlinks+0x3a>
     236:	8b c0       	rjmp	.+278    	; 0x34e <rechte_lijnlinks+0x150>
        {
            motor(0,0);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
            int waarde6 = Grote_klok;
     244:	80 91 0e 03 	lds	r24, 0x030E
     248:	90 91 0f 03 	lds	r25, 0x030F
     24c:	9c af       	std	Y+60, r25	; 0x3c
     24e:	8b af       	std	Y+59, r24	; 0x3b
            while (PINF && (1 << PF0))
     250:	ef e2       	ldi	r30, 0x2F	; 47
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	88 23       	and	r24, r24
     258:	09 f4       	brne	.+2      	; 0x25c <rechte_lijnlinks+0x5e>
     25a:	73 c0       	rjmp	.+230    	; 0x342 <rechte_lijnlinks+0x144>
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b0 e4       	ldi	r27, 0x40	; 64
     264:	8d ab       	std	Y+53, r24	; 0x35
     266:	9e ab       	std	Y+54, r25	; 0x36
     268:	af ab       	std	Y+55, r26	; 0x37
     26a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     26c:	6d a9       	ldd	r22, Y+53	; 0x35
     26e:	7e a9       	ldd	r23, Y+54	; 0x36
     270:	8f a9       	ldd	r24, Y+55	; 0x37
     272:	98 ad       	ldd	r25, Y+56	; 0x38
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	4a e7       	ldi	r20, 0x7A	; 122
     27a:	55 e4       	ldi	r21, 0x45	; 69
     27c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     280:	dc 01       	movw	r26, r24
     282:	cb 01       	movw	r24, r22
     284:	89 ab       	std	Y+49, r24	; 0x31
     286:	9a ab       	std	Y+50, r25	; 0x32
     288:	ab ab       	std	Y+51, r26	; 0x33
     28a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     28c:	69 a9       	ldd	r22, Y+49	; 0x31
     28e:	7a a9       	ldd	r23, Y+50	; 0x32
     290:	8b a9       	ldd	r24, Y+51	; 0x33
     292:	9c a9       	ldd	r25, Y+52	; 0x34
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e8       	ldi	r20, 0x80	; 128
     29a:	5f e3       	ldi	r21, 0x3F	; 63
     29c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__ltsf2>
     2a0:	88 23       	and	r24, r24
     2a2:	2c f4       	brge	.+10     	; 0x2ae <rechte_lijnlinks+0xb0>
		__ticks = 1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	98 ab       	std	Y+48, r25	; 0x30
     2aa:	8f a7       	std	Y+47, r24	; 0x2f
     2ac:	3f c0       	rjmp	.+126    	; 0x32c <rechte_lijnlinks+0x12e>
	else if (__tmp > 65535)
     2ae:	69 a9       	ldd	r22, Y+49	; 0x31
     2b0:	7a a9       	ldd	r23, Y+50	; 0x32
     2b2:	8b a9       	ldd	r24, Y+51	; 0x33
     2b4:	9c a9       	ldd	r25, Y+52	; 0x34
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	3f ef       	ldi	r19, 0xFF	; 255
     2ba:	4f e7       	ldi	r20, 0x7F	; 127
     2bc:	57 e4       	ldi	r21, 0x47	; 71
     2be:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__gtsf2>
     2c2:	18 16       	cp	r1, r24
     2c4:	4c f5       	brge	.+82     	; 0x318 <rechte_lijnlinks+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2c6:	6d a9       	ldd	r22, Y+53	; 0x35
     2c8:	7e a9       	ldd	r23, Y+54	; 0x36
     2ca:	8f a9       	ldd	r24, Y+55	; 0x37
     2cc:	98 ad       	ldd	r25, Y+56	; 0x38
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e2       	ldi	r20, 0x20	; 32
     2d4:	51 e4       	ldi	r21, 0x41	; 65
     2d6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	bc 01       	movw	r22, r24
     2e0:	cd 01       	movw	r24, r26
     2e2:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     2e6:	dc 01       	movw	r26, r24
     2e8:	cb 01       	movw	r24, r22
     2ea:	98 ab       	std	Y+48, r25	; 0x30
     2ec:	8f a7       	std	Y+47, r24	; 0x2f
     2ee:	0f c0       	rjmp	.+30     	; 0x30e <rechte_lijnlinks+0x110>
     2f0:	80 e9       	ldi	r24, 0x90	; 144
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	9e a7       	std	Y+46, r25	; 0x2e
     2f6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f8:	8d a5       	ldd	r24, Y+45	; 0x2d
     2fa:	9e a5       	ldd	r25, Y+46	; 0x2e
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <rechte_lijnlinks+0xfe>
     300:	9e a7       	std	Y+46, r25	; 0x2e
     302:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     304:	8f a5       	ldd	r24, Y+47	; 0x2f
     306:	98 a9       	ldd	r25, Y+48	; 0x30
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	98 ab       	std	Y+48, r25	; 0x30
     30c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     30e:	8f a5       	ldd	r24, Y+47	; 0x2f
     310:	98 a9       	ldd	r25, Y+48	; 0x30
     312:	00 97       	sbiw	r24, 0x00	; 0
     314:	69 f7       	brne	.-38     	; 0x2f0 <rechte_lijnlinks+0xf2>
     316:	9c cf       	rjmp	.-200    	; 0x250 <rechte_lijnlinks+0x52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     318:	69 a9       	ldd	r22, Y+49	; 0x31
     31a:	7a a9       	ldd	r23, Y+50	; 0x32
     31c:	8b a9       	ldd	r24, Y+51	; 0x33
     31e:	9c a9       	ldd	r25, Y+52	; 0x34
     320:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     324:	dc 01       	movw	r26, r24
     326:	cb 01       	movw	r24, r22
     328:	98 ab       	std	Y+48, r25	; 0x30
     32a:	8f a7       	std	Y+47, r24	; 0x2f
     32c:	8f a5       	ldd	r24, Y+47	; 0x2f
     32e:	98 a9       	ldd	r25, Y+48	; 0x30
     330:	9c a7       	std	Y+44, r25	; 0x2c
     332:	8b a7       	std	Y+43, r24	; 0x2b
     334:	8b a5       	ldd	r24, Y+43	; 0x2b
     336:	9c a5       	ldd	r25, Y+44	; 0x2c
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <rechte_lijnlinks+0x13a>
     33c:	9c a7       	std	Y+44, r25	; 0x2c
     33e:	8b a7       	std	Y+43, r24	; 0x2b
     340:	87 cf       	rjmp	.-242    	; 0x250 <rechte_lijnlinks+0x52>
            {
                _delay_ms(2);
            }
            Grote_klok = waarde6;
     342:	8b ad       	ldd	r24, Y+59	; 0x3b
     344:	9c ad       	ldd	r25, Y+60	; 0x3c
     346:	90 93 0f 03 	sts	0x030F, r25
     34a:	80 93 0e 03 	sts	0x030E, r24
        }
        if ((Ir_links < 265)) //boomdectectie
     34e:	80 91 10 03 	lds	r24, 0x0310
     352:	90 91 11 03 	lds	r25, 0x0311
     356:	21 e0       	ldi	r18, 0x01	; 1
     358:	89 30       	cpi	r24, 0x09	; 9
     35a:	92 07       	cpc	r25, r18
     35c:	08 f0       	brcs	.+2      	; 0x360 <rechte_lijnlinks+0x162>
     35e:	27 c1       	rjmp	.+590    	; 0x5ae <rechte_lijnlinks+0x3b0>
        {
            if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
     360:	e0 e2       	ldi	r30, 0x20	; 32
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	88 2f       	mov	r24, r24
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	81 70       	andi	r24, 0x01	; 1
     36c:	90 70       	andi	r25, 0x00	; 0
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	79 f4       	brne	.+30     	; 0x390 <rechte_lijnlinks+0x192>
     372:	e0 e2       	ldi	r30, 0x20	; 32
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	82 70       	andi	r24, 0x02	; 2
     37e:	90 70       	andi	r25, 0x00	; 0
     380:	00 97       	sbiw	r24, 0x00	; 0
     382:	31 f4       	brne	.+12     	; 0x390 <rechte_lijnlinks+0x192>
            {
                motor(170,170);
     384:	8a ea       	ldi	r24, 0xAA	; 170
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	6a ea       	ldi	r22, 0xAA	; 170
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
            }
            if (PINA &(1 << PA0))
     390:	e0 e2       	ldi	r30, 0x20	; 32
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	81 70       	andi	r24, 0x01	; 1
     39c:	90 70       	andi	r25, 0x00	; 0
     39e:	88 23       	and	r24, r24
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <rechte_lijnlinks+0x1a6>
     3a2:	78 c0       	rjmp	.+240    	; 0x494 <rechte_lijnlinks+0x296>
            {
                motor (170,0);
     3a4:	8a ea       	ldi	r24, 0xAA	; 170
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	a0 e2       	ldi	r26, 0x20	; 32
     3b6:	b2 e4       	ldi	r27, 0x42	; 66
     3b8:	8f a3       	std	Y+39, r24	; 0x27
     3ba:	98 a7       	std	Y+40, r25	; 0x28
     3bc:	a9 a7       	std	Y+41, r26	; 0x29
     3be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3c0:	6f a1       	ldd	r22, Y+39	; 0x27
     3c2:	78 a5       	ldd	r23, Y+40	; 0x28
     3c4:	89 a5       	ldd	r24, Y+41	; 0x29
     3c6:	9a a5       	ldd	r25, Y+42	; 0x2a
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	4a e7       	ldi	r20, 0x7A	; 122
     3ce:	55 e4       	ldi	r21, 0x45	; 69
     3d0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     3d4:	dc 01       	movw	r26, r24
     3d6:	cb 01       	movw	r24, r22
     3d8:	8b a3       	std	Y+35, r24	; 0x23
     3da:	9c a3       	std	Y+36, r25	; 0x24
     3dc:	ad a3       	std	Y+37, r26	; 0x25
     3de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     3e0:	6b a1       	ldd	r22, Y+35	; 0x23
     3e2:	7c a1       	ldd	r23, Y+36	; 0x24
     3e4:	8d a1       	ldd	r24, Y+37	; 0x25
     3e6:	9e a1       	ldd	r25, Y+38	; 0x26
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e8       	ldi	r20, 0x80	; 128
     3ee:	5f e3       	ldi	r21, 0x3F	; 63
     3f0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__ltsf2>
     3f4:	88 23       	and	r24, r24
     3f6:	2c f4       	brge	.+10     	; 0x402 <rechte_lijnlinks+0x204>
		__ticks = 1;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	9a a3       	std	Y+34, r25	; 0x22
     3fe:	89 a3       	std	Y+33, r24	; 0x21
     400:	3f c0       	rjmp	.+126    	; 0x480 <rechte_lijnlinks+0x282>
	else if (__tmp > 65535)
     402:	6b a1       	ldd	r22, Y+35	; 0x23
     404:	7c a1       	ldd	r23, Y+36	; 0x24
     406:	8d a1       	ldd	r24, Y+37	; 0x25
     408:	9e a1       	ldd	r25, Y+38	; 0x26
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	3f ef       	ldi	r19, 0xFF	; 255
     40e:	4f e7       	ldi	r20, 0x7F	; 127
     410:	57 e4       	ldi	r21, 0x47	; 71
     412:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__gtsf2>
     416:	18 16       	cp	r1, r24
     418:	4c f5       	brge	.+82     	; 0x46c <rechte_lijnlinks+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41a:	6f a1       	ldd	r22, Y+39	; 0x27
     41c:	78 a5       	ldd	r23, Y+40	; 0x28
     41e:	89 a5       	ldd	r24, Y+41	; 0x29
     420:	9a a5       	ldd	r25, Y+42	; 0x2a
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e2       	ldi	r20, 0x20	; 32
     428:	51 e4       	ldi	r21, 0x41	; 65
     42a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	bc 01       	movw	r22, r24
     434:	cd 01       	movw	r24, r26
     436:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	9a a3       	std	Y+34, r25	; 0x22
     440:	89 a3       	std	Y+33, r24	; 0x21
     442:	0f c0       	rjmp	.+30     	; 0x462 <rechte_lijnlinks+0x264>
     444:	80 e9       	ldi	r24, 0x90	; 144
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	98 a3       	std	Y+32, r25	; 0x20
     44a:	8f 8f       	std	Y+31, r24	; 0x1f
     44c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     44e:	98 a1       	ldd	r25, Y+32	; 0x20
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <rechte_lijnlinks+0x252>
     454:	98 a3       	std	Y+32, r25	; 0x20
     456:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     458:	89 a1       	ldd	r24, Y+33	; 0x21
     45a:	9a a1       	ldd	r25, Y+34	; 0x22
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	9a a3       	std	Y+34, r25	; 0x22
     460:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	89 a1       	ldd	r24, Y+33	; 0x21
     464:	9a a1       	ldd	r25, Y+34	; 0x22
     466:	00 97       	sbiw	r24, 0x00	; 0
     468:	69 f7       	brne	.-38     	; 0x444 <rechte_lijnlinks+0x246>
     46a:	14 c0       	rjmp	.+40     	; 0x494 <rechte_lijnlinks+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     46c:	6b a1       	ldd	r22, Y+35	; 0x23
     46e:	7c a1       	ldd	r23, Y+36	; 0x24
     470:	8d a1       	ldd	r24, Y+37	; 0x25
     472:	9e a1       	ldd	r25, Y+38	; 0x26
     474:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	9a a3       	std	Y+34, r25	; 0x22
     47e:	89 a3       	std	Y+33, r24	; 0x21
     480:	89 a1       	ldd	r24, Y+33	; 0x21
     482:	9a a1       	ldd	r25, Y+34	; 0x22
     484:	9e 8f       	std	Y+30, r25	; 0x1e
     486:	8d 8f       	std	Y+29, r24	; 0x1d
     488:	8d 8d       	ldd	r24, Y+29	; 0x1d
     48a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <rechte_lijnlinks+0x28e>
     490:	9e 8f       	std	Y+30, r25	; 0x1e
     492:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(40);
            }
            if (PINA &(1 << PA1))
     494:	e0 e2       	ldi	r30, 0x20	; 32
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	88 2f       	mov	r24, r24
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	82 70       	andi	r24, 0x02	; 2
     4a0:	90 70       	andi	r25, 0x00	; 0
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <rechte_lijnlinks+0x2aa>
     4a6:	78 c0       	rjmp	.+240    	; 0x598 <rechte_lijnlinks+0x39a>
            {
                motor (0,170);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	6a ea       	ldi	r22, 0xAA	; 170
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	a0 e2       	ldi	r26, 0x20	; 32
     4ba:	b2 e4       	ldi	r27, 0x42	; 66
     4bc:	89 8f       	std	Y+25, r24	; 0x19
     4be:	9a 8f       	std	Y+26, r25	; 0x1a
     4c0:	ab 8f       	std	Y+27, r26	; 0x1b
     4c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4c4:	69 8d       	ldd	r22, Y+25	; 0x19
     4c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	4a e7       	ldi	r20, 0x7A	; 122
     4d2:	55 e4       	ldi	r21, 0x45	; 69
     4d4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     4d8:	dc 01       	movw	r26, r24
     4da:	cb 01       	movw	r24, r22
     4dc:	8d 8b       	std	Y+21, r24	; 0x15
     4de:	9e 8b       	std	Y+22, r25	; 0x16
     4e0:	af 8b       	std	Y+23, r26	; 0x17
     4e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     4e4:	6d 89       	ldd	r22, Y+21	; 0x15
     4e6:	7e 89       	ldd	r23, Y+22	; 0x16
     4e8:	8f 89       	ldd	r24, Y+23	; 0x17
     4ea:	98 8d       	ldd	r25, Y+24	; 0x18
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e8       	ldi	r20, 0x80	; 128
     4f2:	5f e3       	ldi	r21, 0x3F	; 63
     4f4:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__ltsf2>
     4f8:	88 23       	and	r24, r24
     4fa:	2c f4       	brge	.+10     	; 0x506 <rechte_lijnlinks+0x308>
		__ticks = 1;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	9c 8b       	std	Y+20, r25	; 0x14
     502:	8b 8b       	std	Y+19, r24	; 0x13
     504:	3f c0       	rjmp	.+126    	; 0x584 <rechte_lijnlinks+0x386>
	else if (__tmp > 65535)
     506:	6d 89       	ldd	r22, Y+21	; 0x15
     508:	7e 89       	ldd	r23, Y+22	; 0x16
     50a:	8f 89       	ldd	r24, Y+23	; 0x17
     50c:	98 8d       	ldd	r25, Y+24	; 0x18
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	3f ef       	ldi	r19, 0xFF	; 255
     512:	4f e7       	ldi	r20, 0x7F	; 127
     514:	57 e4       	ldi	r21, 0x47	; 71
     516:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__gtsf2>
     51a:	18 16       	cp	r1, r24
     51c:	4c f5       	brge	.+82     	; 0x570 <rechte_lijnlinks+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     51e:	69 8d       	ldd	r22, Y+25	; 0x19
     520:	7a 8d       	ldd	r23, Y+26	; 0x1a
     522:	8b 8d       	ldd	r24, Y+27	; 0x1b
     524:	9c 8d       	ldd	r25, Y+28	; 0x1c
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e2       	ldi	r20, 0x20	; 32
     52c:	51 e4       	ldi	r21, 0x41	; 65
     52e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	bc 01       	movw	r22, r24
     538:	cd 01       	movw	r24, r26
     53a:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	9c 8b       	std	Y+20, r25	; 0x14
     544:	8b 8b       	std	Y+19, r24	; 0x13
     546:	0f c0       	rjmp	.+30     	; 0x566 <rechte_lijnlinks+0x368>
     548:	80 e9       	ldi	r24, 0x90	; 144
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	9a 8b       	std	Y+18, r25	; 0x12
     54e:	89 8b       	std	Y+17, r24	; 0x11
     550:	89 89       	ldd	r24, Y+17	; 0x11
     552:	9a 89       	ldd	r25, Y+18	; 0x12
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <rechte_lijnlinks+0x356>
     558:	9a 8b       	std	Y+18, r25	; 0x12
     55a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55c:	8b 89       	ldd	r24, Y+19	; 0x13
     55e:	9c 89       	ldd	r25, Y+20	; 0x14
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	9c 8b       	std	Y+20, r25	; 0x14
     564:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     566:	8b 89       	ldd	r24, Y+19	; 0x13
     568:	9c 89       	ldd	r25, Y+20	; 0x14
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	69 f7       	brne	.-38     	; 0x548 <rechte_lijnlinks+0x34a>
     56e:	14 c0       	rjmp	.+40     	; 0x598 <rechte_lijnlinks+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     570:	6d 89       	ldd	r22, Y+21	; 0x15
     572:	7e 89       	ldd	r23, Y+22	; 0x16
     574:	8f 89       	ldd	r24, Y+23	; 0x17
     576:	98 8d       	ldd	r25, Y+24	; 0x18
     578:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	9c 8b       	std	Y+20, r25	; 0x14
     582:	8b 8b       	std	Y+19, r24	; 0x13
     584:	8b 89       	ldd	r24, Y+19	; 0x13
     586:	9c 89       	ldd	r25, Y+20	; 0x14
     588:	98 8b       	std	Y+16, r25	; 0x10
     58a:	8f 87       	std	Y+15, r24	; 0x0f
     58c:	8f 85       	ldd	r24, Y+15	; 0x0f
     58e:	98 89       	ldd	r25, Y+16	; 0x10
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <rechte_lijnlinks+0x392>
     594:	98 8b       	std	Y+16, r25	; 0x10
     596:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(40);
            }
            if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
     598:	80 91 0e 03 	lds	r24, 0x030E
     59c:	90 91 0f 03 	lds	r25, 0x030F
     5a0:	84 3b       	cpi	r24, 0xB4	; 180
     5a2:	91 05       	cpc	r25, r1
     5a4:	0c f4       	brge	.+2      	; 0x5a8 <rechte_lijnlinks+0x3aa>
     5a6:	95 c0       	rjmp	.+298    	; 0x6d2 <rechte_lijnlinks+0x4d4>
            {
                vlag = 0;
     5a8:	1e ae       	std	Y+62, r1	; 0x3e
     5aa:	1d ae       	std	Y+61, r1	; 0x3d
     5ac:	92 c0       	rjmp	.+292    	; 0x6d2 <rechte_lijnlinks+0x4d4>
            //	Grote_klok = Grote_klok - waarde;
            //}
        }
        else
        {
            int waarde = Grote_klok;
     5ae:	80 91 0e 03 	lds	r24, 0x030E
     5b2:	90 91 0f 03 	lds	r25, 0x030F
     5b6:	9a af       	std	Y+58, r25	; 0x3a
     5b8:	89 af       	std	Y+57, r24	; 0x39
            motor (0,0);
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
            PORTH |=  (1 << PH4);
     5c6:	a2 e0       	ldi	r26, 0x02	; 2
     5c8:	b1 e0       	ldi	r27, 0x01	; 1
     5ca:	e2 e0       	ldi	r30, 0x02	; 2
     5cc:	f1 e0       	ldi	r31, 0x01	; 1
     5ce:	80 81       	ld	r24, Z
     5d0:	80 61       	ori	r24, 0x10	; 16
     5d2:	8c 93       	st	X, r24
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	aa ef       	ldi	r26, 0xFA	; 250
     5da:	b3 e4       	ldi	r27, 0x43	; 67
     5dc:	8b 87       	std	Y+11, r24	; 0x0b
     5de:	9c 87       	std	Y+12, r25	; 0x0c
     5e0:	ad 87       	std	Y+13, r26	; 0x0d
     5e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5e4:	6b 85       	ldd	r22, Y+11	; 0x0b
     5e6:	7c 85       	ldd	r23, Y+12	; 0x0c
     5e8:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ea:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	4a e7       	ldi	r20, 0x7A	; 122
     5f2:	55 e4       	ldi	r21, 0x45	; 69
     5f4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	8f 83       	std	Y+7, r24	; 0x07
     5fe:	98 87       	std	Y+8, r25	; 0x08
     600:	a9 87       	std	Y+9, r26	; 0x09
     602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     604:	6f 81       	ldd	r22, Y+7	; 0x07
     606:	78 85       	ldd	r23, Y+8	; 0x08
     608:	89 85       	ldd	r24, Y+9	; 0x09
     60a:	9a 85       	ldd	r25, Y+10	; 0x0a
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e8       	ldi	r20, 0x80	; 128
     612:	5f e3       	ldi	r21, 0x3F	; 63
     614:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__ltsf2>
     618:	88 23       	and	r24, r24
     61a:	2c f4       	brge	.+10     	; 0x626 <rechte_lijnlinks+0x428>
		__ticks = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9e 83       	std	Y+6, r25	; 0x06
     622:	8d 83       	std	Y+5, r24	; 0x05
     624:	3f c0       	rjmp	.+126    	; 0x6a4 <rechte_lijnlinks+0x4a6>
	else if (__tmp > 65535)
     626:	6f 81       	ldd	r22, Y+7	; 0x07
     628:	78 85       	ldd	r23, Y+8	; 0x08
     62a:	89 85       	ldd	r24, Y+9	; 0x09
     62c:	9a 85       	ldd	r25, Y+10	; 0x0a
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	3f ef       	ldi	r19, 0xFF	; 255
     632:	4f e7       	ldi	r20, 0x7F	; 127
     634:	57 e4       	ldi	r21, 0x47	; 71
     636:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__gtsf2>
     63a:	18 16       	cp	r1, r24
     63c:	4c f5       	brge	.+82     	; 0x690 <rechte_lijnlinks+0x492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     63e:	6b 85       	ldd	r22, Y+11	; 0x0b
     640:	7c 85       	ldd	r23, Y+12	; 0x0c
     642:	8d 85       	ldd	r24, Y+13	; 0x0d
     644:	9e 85       	ldd	r25, Y+14	; 0x0e
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e2       	ldi	r20, 0x20	; 32
     64c:	51 e4       	ldi	r21, 0x41	; 65
     64e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	bc 01       	movw	r22, r24
     658:	cd 01       	movw	r24, r26
     65a:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	9e 83       	std	Y+6, r25	; 0x06
     664:	8d 83       	std	Y+5, r24	; 0x05
     666:	0f c0       	rjmp	.+30     	; 0x686 <rechte_lijnlinks+0x488>
     668:	80 e9       	ldi	r24, 0x90	; 144
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	9c 83       	std	Y+4, r25	; 0x04
     66e:	8b 83       	std	Y+3, r24	; 0x03
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	9c 81       	ldd	r25, Y+4	; 0x04
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <rechte_lijnlinks+0x476>
     678:	9c 83       	std	Y+4, r25	; 0x04
     67a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67c:	8d 81       	ldd	r24, Y+5	; 0x05
     67e:	9e 81       	ldd	r25, Y+6	; 0x06
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	9e 83       	std	Y+6, r25	; 0x06
     684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     686:	8d 81       	ldd	r24, Y+5	; 0x05
     688:	9e 81       	ldd	r25, Y+6	; 0x06
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	69 f7       	brne	.-38     	; 0x668 <rechte_lijnlinks+0x46a>
     68e:	14 c0       	rjmp	.+40     	; 0x6b8 <rechte_lijnlinks+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     690:	6f 81       	ldd	r22, Y+7	; 0x07
     692:	78 85       	ldd	r23, Y+8	; 0x08
     694:	89 85       	ldd	r24, Y+9	; 0x09
     696:	9a 85       	ldd	r25, Y+10	; 0x0a
     698:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	9e 83       	std	Y+6, r25	; 0x06
     6a2:	8d 83       	std	Y+5, r24	; 0x05
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	9e 81       	ldd	r25, Y+6	; 0x06
     6a8:	9a 83       	std	Y+2, r25	; 0x02
     6aa:	89 83       	std	Y+1, r24	; 0x01
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	9a 81       	ldd	r25, Y+2	; 0x02
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <rechte_lijnlinks+0x4b2>
     6b4:	9a 83       	std	Y+2, r25	; 0x02
     6b6:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(500);
            PORTH &= ~(1 << PH4);
     6b8:	a2 e0       	ldi	r26, 0x02	; 2
     6ba:	b1 e0       	ldi	r27, 0x01	; 1
     6bc:	e2 e0       	ldi	r30, 0x02	; 2
     6be:	f1 e0       	ldi	r31, 0x01	; 1
     6c0:	80 81       	ld	r24, Z
     6c2:	8f 7e       	andi	r24, 0xEF	; 239
     6c4:	8c 93       	st	X, r24
            Grote_klok = waarde;
     6c6:	89 ad       	ldd	r24, Y+57	; 0x39
     6c8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ca:	90 93 0f 03 	sts	0x030F, r25
     6ce:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnlinks(void)
{
    int vlag = 1;
    TCNT1 = 0;
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
     6d2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6d4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	09 f0       	breq	.+2      	; 0x6dc <rechte_lijnlinks+0x4de>
     6da:	a8 cd       	rjmp	.-1200   	; 0x22c <rechte_lijnlinks+0x2e>
            PORTH &= ~(1 << PH4);
            Grote_klok = waarde;
        }

    }
}
     6dc:	ee 96       	adiw	r28, 0x3e	; 62
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <rechte_lijnbeide>:


void rechte_lijnbeide(void)
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	ee 97       	sbiw	r28, 0x3e	; 62
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
    int vlag = 1;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	9e af       	std	Y+62, r25	; 0x3e
     708:	8d af       	std	Y+61, r24	; 0x3d
    TCNT1 = 0;
     70a:	e4 e8       	ldi	r30, 0x84	; 132
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	11 82       	std	Z+1, r1	; 0x01
     710:	10 82       	st	Z, r1
    Grote_klok = 0;
     712:	10 92 0f 03 	sts	0x030F, r1
     716:	10 92 0e 03 	sts	0x030E, r1
     71a:	6d c2       	rjmp	.+1242   	; 0xbf6 <rechte_lijnbeide+0x508>
    while (vlag) //(ultrasoon <= 37)
    {
        if  (PINF && (1 << PF0))
     71c:	ef e2       	ldi	r30, 0x2F	; 47
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	88 23       	and	r24, r24
     724:	09 f4       	brne	.+2      	; 0x728 <rechte_lijnbeide+0x3a>
     726:	8b c0       	rjmp	.+278    	; 0x83e <rechte_lijnbeide+0x150>
        {
            motor(0,0);
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
            int waarde6 = Grote_klok;
     734:	80 91 0e 03 	lds	r24, 0x030E
     738:	90 91 0f 03 	lds	r25, 0x030F
     73c:	9c af       	std	Y+60, r25	; 0x3c
     73e:	8b af       	std	Y+59, r24	; 0x3b
            while (PINF && (1 << PF0))
     740:	ef e2       	ldi	r30, 0x2F	; 47
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	88 23       	and	r24, r24
     748:	09 f4       	brne	.+2      	; 0x74c <rechte_lijnbeide+0x5e>
     74a:	73 c0       	rjmp	.+230    	; 0x832 <rechte_lijnbeide+0x144>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e4       	ldi	r27, 0x40	; 64
     754:	8d ab       	std	Y+53, r24	; 0x35
     756:	9e ab       	std	Y+54, r25	; 0x36
     758:	af ab       	std	Y+55, r26	; 0x37
     75a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     75c:	6d a9       	ldd	r22, Y+53	; 0x35
     75e:	7e a9       	ldd	r23, Y+54	; 0x36
     760:	8f a9       	ldd	r24, Y+55	; 0x37
     762:	98 ad       	ldd	r25, Y+56	; 0x38
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	4a e7       	ldi	r20, 0x7A	; 122
     76a:	55 e4       	ldi	r21, 0x45	; 69
     76c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	89 ab       	std	Y+49, r24	; 0x31
     776:	9a ab       	std	Y+50, r25	; 0x32
     778:	ab ab       	std	Y+51, r26	; 0x33
     77a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     77c:	69 a9       	ldd	r22, Y+49	; 0x31
     77e:	7a a9       	ldd	r23, Y+50	; 0x32
     780:	8b a9       	ldd	r24, Y+51	; 0x33
     782:	9c a9       	ldd	r25, Y+52	; 0x34
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e8       	ldi	r20, 0x80	; 128
     78a:	5f e3       	ldi	r21, 0x3F	; 63
     78c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__ltsf2>
     790:	88 23       	and	r24, r24
     792:	2c f4       	brge	.+10     	; 0x79e <rechte_lijnbeide+0xb0>
		__ticks = 1;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	98 ab       	std	Y+48, r25	; 0x30
     79a:	8f a7       	std	Y+47, r24	; 0x2f
     79c:	3f c0       	rjmp	.+126    	; 0x81c <rechte_lijnbeide+0x12e>
	else if (__tmp > 65535)
     79e:	69 a9       	ldd	r22, Y+49	; 0x31
     7a0:	7a a9       	ldd	r23, Y+50	; 0x32
     7a2:	8b a9       	ldd	r24, Y+51	; 0x33
     7a4:	9c a9       	ldd	r25, Y+52	; 0x34
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	3f ef       	ldi	r19, 0xFF	; 255
     7aa:	4f e7       	ldi	r20, 0x7F	; 127
     7ac:	57 e4       	ldi	r21, 0x47	; 71
     7ae:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__gtsf2>
     7b2:	18 16       	cp	r1, r24
     7b4:	4c f5       	brge	.+82     	; 0x808 <rechte_lijnbeide+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b6:	6d a9       	ldd	r22, Y+53	; 0x35
     7b8:	7e a9       	ldd	r23, Y+54	; 0x36
     7ba:	8f a9       	ldd	r24, Y+55	; 0x37
     7bc:	98 ad       	ldd	r25, Y+56	; 0x38
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e2       	ldi	r20, 0x20	; 32
     7c4:	51 e4       	ldi	r21, 0x41	; 65
     7c6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	98 ab       	std	Y+48, r25	; 0x30
     7dc:	8f a7       	std	Y+47, r24	; 0x2f
     7de:	0f c0       	rjmp	.+30     	; 0x7fe <rechte_lijnbeide+0x110>
     7e0:	80 e9       	ldi	r24, 0x90	; 144
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	9e a7       	std	Y+46, r25	; 0x2e
     7e6:	8d a7       	std	Y+45, r24	; 0x2d
     7e8:	8d a5       	ldd	r24, Y+45	; 0x2d
     7ea:	9e a5       	ldd	r25, Y+46	; 0x2e
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <rechte_lijnbeide+0xfe>
     7f0:	9e a7       	std	Y+46, r25	; 0x2e
     7f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f4:	8f a5       	ldd	r24, Y+47	; 0x2f
     7f6:	98 a9       	ldd	r25, Y+48	; 0x30
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	98 ab       	std	Y+48, r25	; 0x30
     7fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fe:	8f a5       	ldd	r24, Y+47	; 0x2f
     800:	98 a9       	ldd	r25, Y+48	; 0x30
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	69 f7       	brne	.-38     	; 0x7e0 <rechte_lijnbeide+0xf2>
     806:	9c cf       	rjmp	.-200    	; 0x740 <rechte_lijnbeide+0x52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     808:	69 a9       	ldd	r22, Y+49	; 0x31
     80a:	7a a9       	ldd	r23, Y+50	; 0x32
     80c:	8b a9       	ldd	r24, Y+51	; 0x33
     80e:	9c a9       	ldd	r25, Y+52	; 0x34
     810:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	98 ab       	std	Y+48, r25	; 0x30
     81a:	8f a7       	std	Y+47, r24	; 0x2f
     81c:	8f a5       	ldd	r24, Y+47	; 0x2f
     81e:	98 a9       	ldd	r25, Y+48	; 0x30
     820:	9c a7       	std	Y+44, r25	; 0x2c
     822:	8b a7       	std	Y+43, r24	; 0x2b
     824:	8b a5       	ldd	r24, Y+43	; 0x2b
     826:	9c a5       	ldd	r25, Y+44	; 0x2c
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <rechte_lijnbeide+0x13a>
     82c:	9c a7       	std	Y+44, r25	; 0x2c
     82e:	8b a7       	std	Y+43, r24	; 0x2b
     830:	87 cf       	rjmp	.-242    	; 0x740 <rechte_lijnbeide+0x52>
            {
                _delay_ms(2);
            }
            Grote_klok = waarde6;
     832:	8b ad       	ldd	r24, Y+59	; 0x3b
     834:	9c ad       	ldd	r25, Y+60	; 0x3c
     836:	90 93 0f 03 	sts	0x030F, r25
     83a:	80 93 0e 03 	sts	0x030E, r24
        }
        if (((Ir_links < 265) && (Ir_rechts < 265)) || ultrasoon > 20) //boomdectectie
     83e:	80 91 10 03 	lds	r24, 0x0310
     842:	90 91 11 03 	lds	r25, 0x0311
     846:	21 e0       	ldi	r18, 0x01	; 1
     848:	89 30       	cpi	r24, 0x09	; 9
     84a:	92 07       	cpc	r25, r18
     84c:	40 f4       	brcc	.+16     	; 0x85e <rechte_lijnbeide+0x170>
     84e:	80 91 0c 03 	lds	r24, 0x030C
     852:	90 91 0d 03 	lds	r25, 0x030D
     856:	21 e0       	ldi	r18, 0x01	; 1
     858:	89 30       	cpi	r24, 0x09	; 9
     85a:	92 07       	cpc	r25, r18
     85c:	98 f0       	brcs	.+38     	; 0x884 <rechte_lijnbeide+0x196>
     85e:	80 91 08 03 	lds	r24, 0x0308
     862:	90 91 09 03 	lds	r25, 0x0309
     866:	a0 91 0a 03 	lds	r26, 0x030A
     86a:	b0 91 0b 03 	lds	r27, 0x030B
     86e:	bc 01       	movw	r22, r24
     870:	cd 01       	movw	r24, r26
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 ea       	ldi	r20, 0xA0	; 160
     878:	51 e4       	ldi	r21, 0x41	; 65
     87a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__gtsf2>
     87e:	18 16       	cp	r1, r24
     880:	0c f0       	brlt	.+2      	; 0x884 <rechte_lijnbeide+0x196>
     882:	27 c1       	rjmp	.+590    	; 0xad2 <rechte_lijnbeide+0x3e4>
        {
            if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
     884:	e0 e2       	ldi	r30, 0x20	; 32
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	88 2f       	mov	r24, r24
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	81 70       	andi	r24, 0x01	; 1
     890:	90 70       	andi	r25, 0x00	; 0
     892:	00 97       	sbiw	r24, 0x00	; 0
     894:	79 f4       	brne	.+30     	; 0x8b4 <rechte_lijnbeide+0x1c6>
     896:	e0 e2       	ldi	r30, 0x20	; 32
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	82 70       	andi	r24, 0x02	; 2
     8a2:	90 70       	andi	r25, 0x00	; 0
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	31 f4       	brne	.+12     	; 0x8b4 <rechte_lijnbeide+0x1c6>
            {
                motor(170,170);
     8a8:	8a ea       	ldi	r24, 0xAA	; 170
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	6a ea       	ldi	r22, 0xAA	; 170
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
            }
            if (PINA &(1 << PA0))
     8b4:	e0 e2       	ldi	r30, 0x20	; 32
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	88 2f       	mov	r24, r24
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	81 70       	andi	r24, 0x01	; 1
     8c0:	90 70       	andi	r25, 0x00	; 0
     8c2:	88 23       	and	r24, r24
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <rechte_lijnbeide+0x1da>
     8c6:	78 c0       	rjmp	.+240    	; 0x9b8 <rechte_lijnbeide+0x2ca>
            {
                motor (170,0);
     8c8:	8a ea       	ldi	r24, 0xAA	; 170
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	a0 e2       	ldi	r26, 0x20	; 32
     8da:	b2 e4       	ldi	r27, 0x42	; 66
     8dc:	8f a3       	std	Y+39, r24	; 0x27
     8de:	98 a7       	std	Y+40, r25	; 0x28
     8e0:	a9 a7       	std	Y+41, r26	; 0x29
     8e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8e4:	6f a1       	ldd	r22, Y+39	; 0x27
     8e6:	78 a5       	ldd	r23, Y+40	; 0x28
     8e8:	89 a5       	ldd	r24, Y+41	; 0x29
     8ea:	9a a5       	ldd	r25, Y+42	; 0x2a
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	4a e7       	ldi	r20, 0x7A	; 122
     8f2:	55 e4       	ldi	r21, 0x45	; 69
     8f4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     8f8:	dc 01       	movw	r26, r24
     8fa:	cb 01       	movw	r24, r22
     8fc:	8b a3       	std	Y+35, r24	; 0x23
     8fe:	9c a3       	std	Y+36, r25	; 0x24
     900:	ad a3       	std	Y+37, r26	; 0x25
     902:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     904:	6b a1       	ldd	r22, Y+35	; 0x23
     906:	7c a1       	ldd	r23, Y+36	; 0x24
     908:	8d a1       	ldd	r24, Y+37	; 0x25
     90a:	9e a1       	ldd	r25, Y+38	; 0x26
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e8       	ldi	r20, 0x80	; 128
     912:	5f e3       	ldi	r21, 0x3F	; 63
     914:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__ltsf2>
     918:	88 23       	and	r24, r24
     91a:	2c f4       	brge	.+10     	; 0x926 <rechte_lijnbeide+0x238>
		__ticks = 1;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	9a a3       	std	Y+34, r25	; 0x22
     922:	89 a3       	std	Y+33, r24	; 0x21
     924:	3f c0       	rjmp	.+126    	; 0x9a4 <rechte_lijnbeide+0x2b6>
	else if (__tmp > 65535)
     926:	6b a1       	ldd	r22, Y+35	; 0x23
     928:	7c a1       	ldd	r23, Y+36	; 0x24
     92a:	8d a1       	ldd	r24, Y+37	; 0x25
     92c:	9e a1       	ldd	r25, Y+38	; 0x26
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	3f ef       	ldi	r19, 0xFF	; 255
     932:	4f e7       	ldi	r20, 0x7F	; 127
     934:	57 e4       	ldi	r21, 0x47	; 71
     936:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__gtsf2>
     93a:	18 16       	cp	r1, r24
     93c:	4c f5       	brge	.+82     	; 0x990 <rechte_lijnbeide+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     93e:	6f a1       	ldd	r22, Y+39	; 0x27
     940:	78 a5       	ldd	r23, Y+40	; 0x28
     942:	89 a5       	ldd	r24, Y+41	; 0x29
     944:	9a a5       	ldd	r25, Y+42	; 0x2a
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	40 e2       	ldi	r20, 0x20	; 32
     94c:	51 e4       	ldi	r21, 0x41	; 65
     94e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
     956:	bc 01       	movw	r22, r24
     958:	cd 01       	movw	r24, r26
     95a:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	9a a3       	std	Y+34, r25	; 0x22
     964:	89 a3       	std	Y+33, r24	; 0x21
     966:	0f c0       	rjmp	.+30     	; 0x986 <rechte_lijnbeide+0x298>
     968:	80 e9       	ldi	r24, 0x90	; 144
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	98 a3       	std	Y+32, r25	; 0x20
     96e:	8f 8f       	std	Y+31, r24	; 0x1f
     970:	8f 8d       	ldd	r24, Y+31	; 0x1f
     972:	98 a1       	ldd	r25, Y+32	; 0x20
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <rechte_lijnbeide+0x286>
     978:	98 a3       	std	Y+32, r25	; 0x20
     97a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     97c:	89 a1       	ldd	r24, Y+33	; 0x21
     97e:	9a a1       	ldd	r25, Y+34	; 0x22
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	9a a3       	std	Y+34, r25	; 0x22
     984:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     986:	89 a1       	ldd	r24, Y+33	; 0x21
     988:	9a a1       	ldd	r25, Y+34	; 0x22
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	69 f7       	brne	.-38     	; 0x968 <rechte_lijnbeide+0x27a>
     98e:	14 c0       	rjmp	.+40     	; 0x9b8 <rechte_lijnbeide+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     990:	6b a1       	ldd	r22, Y+35	; 0x23
     992:	7c a1       	ldd	r23, Y+36	; 0x24
     994:	8d a1       	ldd	r24, Y+37	; 0x25
     996:	9e a1       	ldd	r25, Y+38	; 0x26
     998:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     99c:	dc 01       	movw	r26, r24
     99e:	cb 01       	movw	r24, r22
     9a0:	9a a3       	std	Y+34, r25	; 0x22
     9a2:	89 a3       	std	Y+33, r24	; 0x21
     9a4:	89 a1       	ldd	r24, Y+33	; 0x21
     9a6:	9a a1       	ldd	r25, Y+34	; 0x22
     9a8:	9e 8f       	std	Y+30, r25	; 0x1e
     9aa:	8d 8f       	std	Y+29, r24	; 0x1d
     9ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <rechte_lijnbeide+0x2c2>
     9b4:	9e 8f       	std	Y+30, r25	; 0x1e
     9b6:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(40);
            }
            if (PINA &(1 << PA1))
     9b8:	e0 e2       	ldi	r30, 0x20	; 32
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	88 2f       	mov	r24, r24
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	82 70       	andi	r24, 0x02	; 2
     9c4:	90 70       	andi	r25, 0x00	; 0
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	09 f4       	brne	.+2      	; 0x9cc <rechte_lijnbeide+0x2de>
     9ca:	78 c0       	rjmp	.+240    	; 0xabc <rechte_lijnbeide+0x3ce>
            {
                motor (0,170);
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	6a ea       	ldi	r22, 0xAA	; 170
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e2       	ldi	r26, 0x20	; 32
     9de:	b2 e4       	ldi	r27, 0x42	; 66
     9e0:	89 8f       	std	Y+25, r24	; 0x19
     9e2:	9a 8f       	std	Y+26, r25	; 0x1a
     9e4:	ab 8f       	std	Y+27, r26	; 0x1b
     9e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9e8:	69 8d       	ldd	r22, Y+25	; 0x19
     9ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	4a e7       	ldi	r20, 0x7A	; 122
     9f6:	55 e4       	ldi	r21, 0x45	; 69
     9f8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     9fc:	dc 01       	movw	r26, r24
     9fe:	cb 01       	movw	r24, r22
     a00:	8d 8b       	std	Y+21, r24	; 0x15
     a02:	9e 8b       	std	Y+22, r25	; 0x16
     a04:	af 8b       	std	Y+23, r26	; 0x17
     a06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a08:	6d 89       	ldd	r22, Y+21	; 0x15
     a0a:	7e 89       	ldd	r23, Y+22	; 0x16
     a0c:	8f 89       	ldd	r24, Y+23	; 0x17
     a0e:	98 8d       	ldd	r25, Y+24	; 0x18
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e8       	ldi	r20, 0x80	; 128
     a16:	5f e3       	ldi	r21, 0x3F	; 63
     a18:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__ltsf2>
     a1c:	88 23       	and	r24, r24
     a1e:	2c f4       	brge	.+10     	; 0xa2a <rechte_lijnbeide+0x33c>
		__ticks = 1;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	9c 8b       	std	Y+20, r25	; 0x14
     a26:	8b 8b       	std	Y+19, r24	; 0x13
     a28:	3f c0       	rjmp	.+126    	; 0xaa8 <rechte_lijnbeide+0x3ba>
	else if (__tmp > 65535)
     a2a:	6d 89       	ldd	r22, Y+21	; 0x15
     a2c:	7e 89       	ldd	r23, Y+22	; 0x16
     a2e:	8f 89       	ldd	r24, Y+23	; 0x17
     a30:	98 8d       	ldd	r25, Y+24	; 0x18
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	3f ef       	ldi	r19, 0xFF	; 255
     a36:	4f e7       	ldi	r20, 0x7F	; 127
     a38:	57 e4       	ldi	r21, 0x47	; 71
     a3a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__gtsf2>
     a3e:	18 16       	cp	r1, r24
     a40:	4c f5       	brge	.+82     	; 0xa94 <rechte_lijnbeide+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a42:	69 8d       	ldd	r22, Y+25	; 0x19
     a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e2       	ldi	r20, 0x20	; 32
     a50:	51 e4       	ldi	r21, 0x41	; 65
     a52:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     a56:	dc 01       	movw	r26, r24
     a58:	cb 01       	movw	r24, r22
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     a62:	dc 01       	movw	r26, r24
     a64:	cb 01       	movw	r24, r22
     a66:	9c 8b       	std	Y+20, r25	; 0x14
     a68:	8b 8b       	std	Y+19, r24	; 0x13
     a6a:	0f c0       	rjmp	.+30     	; 0xa8a <rechte_lijnbeide+0x39c>
     a6c:	80 e9       	ldi	r24, 0x90	; 144
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	9a 8b       	std	Y+18, r25	; 0x12
     a72:	89 8b       	std	Y+17, r24	; 0x11
     a74:	89 89       	ldd	r24, Y+17	; 0x11
     a76:	9a 89       	ldd	r25, Y+18	; 0x12
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <rechte_lijnbeide+0x38a>
     a7c:	9a 8b       	std	Y+18, r25	; 0x12
     a7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a80:	8b 89       	ldd	r24, Y+19	; 0x13
     a82:	9c 89       	ldd	r25, Y+20	; 0x14
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	9c 8b       	std	Y+20, r25	; 0x14
     a88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a8a:	8b 89       	ldd	r24, Y+19	; 0x13
     a8c:	9c 89       	ldd	r25, Y+20	; 0x14
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	69 f7       	brne	.-38     	; 0xa6c <rechte_lijnbeide+0x37e>
     a92:	14 c0       	rjmp	.+40     	; 0xabc <rechte_lijnbeide+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a94:	6d 89       	ldd	r22, Y+21	; 0x15
     a96:	7e 89       	ldd	r23, Y+22	; 0x16
     a98:	8f 89       	ldd	r24, Y+23	; 0x17
     a9a:	98 8d       	ldd	r25, Y+24	; 0x18
     a9c:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	9c 8b       	std	Y+20, r25	; 0x14
     aa6:	8b 8b       	std	Y+19, r24	; 0x13
     aa8:	8b 89       	ldd	r24, Y+19	; 0x13
     aaa:	9c 89       	ldd	r25, Y+20	; 0x14
     aac:	98 8b       	std	Y+16, r25	; 0x10
     aae:	8f 87       	std	Y+15, r24	; 0x0f
     ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ab2:	98 89       	ldd	r25, Y+16	; 0x10
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <rechte_lijnbeide+0x3c6>
     ab8:	98 8b       	std	Y+16, r25	; 0x10
     aba:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(40);
            }
            if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
     abc:	80 91 0e 03 	lds	r24, 0x030E
     ac0:	90 91 0f 03 	lds	r25, 0x030F
     ac4:	84 3b       	cpi	r24, 0xB4	; 180
     ac6:	91 05       	cpc	r25, r1
     ac8:	0c f4       	brge	.+2      	; 0xacc <rechte_lijnbeide+0x3de>
     aca:	95 c0       	rjmp	.+298    	; 0xbf6 <rechte_lijnbeide+0x508>
            {
                vlag = 0;
     acc:	1e ae       	std	Y+62, r1	; 0x3e
     ace:	1d ae       	std	Y+61, r1	; 0x3d
     ad0:	92 c0       	rjmp	.+292    	; 0xbf6 <rechte_lijnbeide+0x508>
            //	Grote_klok = Grote_klok - waarde;
            //}
        }
        else
        {
            int waarde = Grote_klok;
     ad2:	80 91 0e 03 	lds	r24, 0x030E
     ad6:	90 91 0f 03 	lds	r25, 0x030F
     ada:	9a af       	std	Y+58, r25	; 0x3a
     adc:	89 af       	std	Y+57, r24	; 0x39
            motor (0,0);
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
            PORTH |=  (1 << PH4);
     aea:	a2 e0       	ldi	r26, 0x02	; 2
     aec:	b1 e0       	ldi	r27, 0x01	; 1
     aee:	e2 e0       	ldi	r30, 0x02	; 2
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	80 81       	ld	r24, Z
     af4:	80 61       	ori	r24, 0x10	; 16
     af6:	8c 93       	st	X, r24
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	aa ef       	ldi	r26, 0xFA	; 250
     afe:	b3 e4       	ldi	r27, 0x43	; 67
     b00:	8b 87       	std	Y+11, r24	; 0x0b
     b02:	9c 87       	std	Y+12, r25	; 0x0c
     b04:	ad 87       	std	Y+13, r26	; 0x0d
     b06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b08:	6b 85       	ldd	r22, Y+11	; 0x0b
     b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	4a e7       	ldi	r20, 0x7A	; 122
     b16:	55 e4       	ldi	r21, 0x45	; 69
     b18:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     b1c:	dc 01       	movw	r26, r24
     b1e:	cb 01       	movw	r24, r22
     b20:	8f 83       	std	Y+7, r24	; 0x07
     b22:	98 87       	std	Y+8, r25	; 0x08
     b24:	a9 87       	std	Y+9, r26	; 0x09
     b26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b28:	6f 81       	ldd	r22, Y+7	; 0x07
     b2a:	78 85       	ldd	r23, Y+8	; 0x08
     b2c:	89 85       	ldd	r24, Y+9	; 0x09
     b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e8       	ldi	r20, 0x80	; 128
     b36:	5f e3       	ldi	r21, 0x3F	; 63
     b38:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__ltsf2>
     b3c:	88 23       	and	r24, r24
     b3e:	2c f4       	brge	.+10     	; 0xb4a <rechte_lijnbeide+0x45c>
		__ticks = 1;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	9e 83       	std	Y+6, r25	; 0x06
     b46:	8d 83       	std	Y+5, r24	; 0x05
     b48:	3f c0       	rjmp	.+126    	; 0xbc8 <rechte_lijnbeide+0x4da>
	else if (__tmp > 65535)
     b4a:	6f 81       	ldd	r22, Y+7	; 0x07
     b4c:	78 85       	ldd	r23, Y+8	; 0x08
     b4e:	89 85       	ldd	r24, Y+9	; 0x09
     b50:	9a 85       	ldd	r25, Y+10	; 0x0a
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	3f ef       	ldi	r19, 0xFF	; 255
     b56:	4f e7       	ldi	r20, 0x7F	; 127
     b58:	57 e4       	ldi	r21, 0x47	; 71
     b5a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__gtsf2>
     b5e:	18 16       	cp	r1, r24
     b60:	4c f5       	brge	.+82     	; 0xbb4 <rechte_lijnbeide+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b62:	6b 85       	ldd	r22, Y+11	; 0x0b
     b64:	7c 85       	ldd	r23, Y+12	; 0x0c
     b66:	8d 85       	ldd	r24, Y+13	; 0x0d
     b68:	9e 85       	ldd	r25, Y+14	; 0x0e
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e2       	ldi	r20, 0x20	; 32
     b70:	51 e4       	ldi	r21, 0x41	; 65
     b72:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	bc 01       	movw	r22, r24
     b7c:	cd 01       	movw	r24, r26
     b7e:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	9e 83       	std	Y+6, r25	; 0x06
     b88:	8d 83       	std	Y+5, r24	; 0x05
     b8a:	0f c0       	rjmp	.+30     	; 0xbaa <rechte_lijnbeide+0x4bc>
     b8c:	80 e9       	ldi	r24, 0x90	; 144
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	9c 83       	std	Y+4, r25	; 0x04
     b92:	8b 83       	std	Y+3, r24	; 0x03
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <rechte_lijnbeide+0x4aa>
     b9c:	9c 83       	std	Y+4, r25	; 0x04
     b9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba0:	8d 81       	ldd	r24, Y+5	; 0x05
     ba2:	9e 81       	ldd	r25, Y+6	; 0x06
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	9e 83       	std	Y+6, r25	; 0x06
     ba8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     baa:	8d 81       	ldd	r24, Y+5	; 0x05
     bac:	9e 81       	ldd	r25, Y+6	; 0x06
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	69 f7       	brne	.-38     	; 0xb8c <rechte_lijnbeide+0x49e>
     bb2:	14 c0       	rjmp	.+40     	; 0xbdc <rechte_lijnbeide+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bb4:	6f 81       	ldd	r22, Y+7	; 0x07
     bb6:	78 85       	ldd	r23, Y+8	; 0x08
     bb8:	89 85       	ldd	r24, Y+9	; 0x09
     bba:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbc:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     bc0:	dc 01       	movw	r26, r24
     bc2:	cb 01       	movw	r24, r22
     bc4:	9e 83       	std	Y+6, r25	; 0x06
     bc6:	8d 83       	std	Y+5, r24	; 0x05
     bc8:	8d 81       	ldd	r24, Y+5	; 0x05
     bca:	9e 81       	ldd	r25, Y+6	; 0x06
     bcc:	9a 83       	std	Y+2, r25	; 0x02
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <rechte_lijnbeide+0x4e6>
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(500);
            PORTH &= ~(1 << PH4);
     bdc:	a2 e0       	ldi	r26, 0x02	; 2
     bde:	b1 e0       	ldi	r27, 0x01	; 1
     be0:	e2 e0       	ldi	r30, 0x02	; 2
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	80 81       	ld	r24, Z
     be6:	8f 7e       	andi	r24, 0xEF	; 239
     be8:	8c 93       	st	X, r24
            Grote_klok = waarde;
     bea:	89 ad       	ldd	r24, Y+57	; 0x39
     bec:	9a ad       	ldd	r25, Y+58	; 0x3a
     bee:	90 93 0f 03 	sts	0x030F, r25
     bf2:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnbeide(void)
{
    int vlag = 1;
    TCNT1 = 0;
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
     bf6:	8d ad       	ldd	r24, Y+61	; 0x3d
     bf8:	9e ad       	ldd	r25, Y+62	; 0x3e
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	09 f0       	breq	.+2      	; 0xc00 <rechte_lijnbeide+0x512>
     bfe:	8e cd       	rjmp	.-1252   	; 0x71c <rechte_lijnbeide+0x2e>
            PORTH &= ~(1 << PH4);
            Grote_klok = waarde;
        }

    }
}
     c00:	ee 96       	adiw	r28, 0x3e	; 62
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <bocht_links>:

void bocht_links (void)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	0f 92       	push	r0
     c18:	0f 92       	push	r0
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
    int vlag;
    TCNT1 = 0;
     c1e:	e4 e8       	ldi	r30, 0x84	; 132
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	11 82       	std	Z+1, r1	; 0x01
     c24:	10 82       	st	Z, r1
    Grote_klok = 0;
     c26:	10 92 0f 03 	sts	0x030F, r1
     c2a:	10 92 0e 03 	sts	0x030E, r1
     c2e:	45 c0       	rjmp	.+138    	; 0xcba <bocht_links+0xa8>
    while ((vlag == 1))// && (PINA &(1 << PA0))
    {
        motor(35,170); //bocht naar rechts maken
     c30:	83 e2       	ldi	r24, 0x23	; 35
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	6a ea       	ldi	r22, 0xAA	; 170
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
        if ((PINA &(1 << PA0)) && (Grote_klok <= 11.3)) //waarde
     c3c:	e0 e2       	ldi	r30, 0x20	; 32
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	81 70       	andi	r24, 0x01	; 1
     c48:	90 70       	andi	r25, 0x00	; 0
     c4a:	88 23       	and	r24, r24
     c4c:	d1 f0       	breq	.+52     	; 0xc82 <bocht_links+0x70>
     c4e:	80 91 0e 03 	lds	r24, 0x030E
     c52:	90 91 0f 03 	lds	r25, 0x030F
     c56:	aa 27       	eor	r26, r26
     c58:	97 fd       	sbrc	r25, 7
     c5a:	a0 95       	com	r26
     c5c:	ba 2f       	mov	r27, r26
     c5e:	bc 01       	movw	r22, r24
     c60:	cd 01       	movw	r24, r26
     c62:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__floatsisf>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	bc 01       	movw	r22, r24
     c6c:	cd 01       	movw	r24, r26
     c6e:	2d ec       	ldi	r18, 0xCD	; 205
     c70:	3c ec       	ldi	r19, 0xCC	; 204
     c72:	44 e3       	ldi	r20, 0x34	; 52
     c74:	51 e4       	ldi	r21, 0x41	; 65
     c76:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__lesf2>
     c7a:	18 16       	cp	r1, r24
     c7c:	14 f0       	brlt	.+4      	; 0xc82 <bocht_links+0x70>
        {
            error();
     c7e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <error>
        }
        if (Grote_klok >= 11.3)
     c82:	80 91 0e 03 	lds	r24, 0x030E
     c86:	90 91 0f 03 	lds	r25, 0x030F
     c8a:	aa 27       	eor	r26, r26
     c8c:	97 fd       	sbrc	r25, 7
     c8e:	a0 95       	com	r26
     c90:	ba 2f       	mov	r27, r26
     c92:	bc 01       	movw	r22, r24
     c94:	cd 01       	movw	r24, r26
     c96:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__floatsisf>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	2d ec       	ldi	r18, 0xCD	; 205
     ca4:	3c ec       	ldi	r19, 0xCC	; 204
     ca6:	44 e3       	ldi	r20, 0x34	; 52
     ca8:	51 e4       	ldi	r21, 0x41	; 65
     caa:	0e 94 a5 0c 	call	0x194a	; 0x194a <__gesf2>
     cae:	88 23       	and	r24, r24
     cb0:	24 f0       	brlt	.+8      	; 0xcba <bocht_links+0xa8>
        {
            vlag = 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
void bocht_links (void)
{
    int vlag;
    TCNT1 = 0;
    Grote_klok = 0;
    while ((vlag == 1))// && (PINA &(1 << PA0))
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <bocht_links+0xb4>
     cc4:	b5 cf       	rjmp	.-150    	; 0xc30 <bocht_links+0x1e>
            vlag = 1;
        }

    }

}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <bocht_rechts>:

void bocht_rechts (void)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	0f 92       	push	r0
     cd6:	0f 92       	push	r0
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
    int vlag;
    TCNT1 = 0;
     cdc:	e4 e8       	ldi	r30, 0x84	; 132
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	11 82       	std	Z+1, r1	; 0x01
     ce2:	10 82       	st	Z, r1
    Grote_klok = 0;
     ce4:	10 92 0f 03 	sts	0x030F, r1
     ce8:	10 92 0e 03 	sts	0x030E, r1
     cec:	45 c0       	rjmp	.+138    	; 0xd78 <bocht_rechts+0xa8>
    while ((vlag == 1)) //(PINA &(1 << PA0)) &&
    {
        motor(170,35); //bocht naar rechts maken
     cee:	8a ea       	ldi	r24, 0xAA	; 170
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	63 e2       	ldi	r22, 0x23	; 35
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
        if ((PINA &(1 << PA0)) && (Grote_klok <= 11.3)) //waarde
     cfa:	e0 e2       	ldi	r30, 0x20	; 32
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	81 70       	andi	r24, 0x01	; 1
     d06:	90 70       	andi	r25, 0x00	; 0
     d08:	88 23       	and	r24, r24
     d0a:	d1 f0       	breq	.+52     	; 0xd40 <bocht_rechts+0x70>
     d0c:	80 91 0e 03 	lds	r24, 0x030E
     d10:	90 91 0f 03 	lds	r25, 0x030F
     d14:	aa 27       	eor	r26, r26
     d16:	97 fd       	sbrc	r25, 7
     d18:	a0 95       	com	r26
     d1a:	ba 2f       	mov	r27, r26
     d1c:	bc 01       	movw	r22, r24
     d1e:	cd 01       	movw	r24, r26
     d20:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__floatsisf>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	2d ec       	ldi	r18, 0xCD	; 205
     d2e:	3c ec       	ldi	r19, 0xCC	; 204
     d30:	44 e3       	ldi	r20, 0x34	; 52
     d32:	51 e4       	ldi	r21, 0x41	; 65
     d34:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__lesf2>
     d38:	18 16       	cp	r1, r24
     d3a:	14 f0       	brlt	.+4      	; 0xd40 <bocht_rechts+0x70>
        {
            error();
     d3c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <error>
        }
        if (Grote_klok >= 11.3)
     d40:	80 91 0e 03 	lds	r24, 0x030E
     d44:	90 91 0f 03 	lds	r25, 0x030F
     d48:	aa 27       	eor	r26, r26
     d4a:	97 fd       	sbrc	r25, 7
     d4c:	a0 95       	com	r26
     d4e:	ba 2f       	mov	r27, r26
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__floatsisf>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	2d ec       	ldi	r18, 0xCD	; 205
     d62:	3c ec       	ldi	r19, 0xCC	; 204
     d64:	44 e3       	ldi	r20, 0x34	; 52
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	0e 94 a5 0c 	call	0x194a	; 0x194a <__gesf2>
     d6c:	88 23       	and	r24, r24
     d6e:	24 f0       	brlt	.+8      	; 0xd78 <bocht_rechts+0xa8>
        {
            vlag = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	89 83       	std	Y+1, r24	; 0x01
void bocht_rechts (void)
{
    int vlag;
    TCNT1 = 0;
    Grote_klok = 0;
    while ((vlag == 1)) //(PINA &(1 << PA0)) &&
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	91 05       	cpc	r25, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <bocht_rechts+0xb4>
     d82:	b5 cf       	rjmp	.-150    	; 0xcee <bocht_rechts+0x1e>
            vlag = 1;
        }

    }

}
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <error>:

void error (void) //om een probleem optelossen todat we een betere oplossing hebben of niet
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
    while (1)
    {
        motor(0,0);
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	0e 94 8c 09 	call	0x1318	; 0x1318 <motor>
     da2:	f9 cf       	rjmp	.-14     	; 0xd96 <error+0x8>

00000da4 <__vector_17>:
uint16_t waarde1;
uint16_t waarde2;
uint32_t counts;

ISR(TIMER1_COMPA_vect)
{
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	00 90 5b 00 	lds	r0, 0x005B
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
     dc4:	e4 e8       	ldi	r30, 0x84	; 132
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	11 82       	std	Z+1, r1	; 0x01
     dca:	10 82       	st	Z, r1
    Grote_klok++;
     dcc:	80 91 0e 03 	lds	r24, 0x030E
     dd0:	90 91 0f 03 	lds	r25, 0x030F
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	90 93 0f 03 	sts	0x030F, r25
     dda:	80 93 0e 03 	sts	0x030E, r24
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	ff 91       	pop	r31
     de4:	ef 91       	pop	r30
     de6:	9f 91       	pop	r25
     de8:	8f 91       	pop	r24
     dea:	0f 90       	pop	r0
     dec:	00 92 5b 00 	sts	0x005B, r0
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <__vector_41>:

ISR (TIMER4_CAPT_vect)
{
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	0f 92       	push	r0
     e02:	00 90 5b 00 	lds	r0, 0x005B
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	2f 93       	push	r18
     e14:	3f 93       	push	r19
     e16:	4f 93       	push	r20
     e18:	5f 93       	push	r21
     e1a:	6f 93       	push	r22
     e1c:	7f 93       	push	r23
     e1e:	8f 93       	push	r24
     e20:	9f 93       	push	r25
     e22:	af 93       	push	r26
     e24:	bf 93       	push	r27
     e26:	ef 93       	push	r30
     e28:	ff 93       	push	r31
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
    if (TCCR4B & (1<<ICES4)) // On rising edge
     e32:	e1 ea       	ldi	r30, 0xA1	; 161
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	80 74       	andi	r24, 0x40	; 64
     e3e:	90 70       	andi	r25, 0x00	; 0
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	81 f0       	breq	.+32     	; 0xe64 <__vector_41+0x6a>
    {
        TCCR4B &= ~(1<<ICES4); // Next time detect falling edge
     e44:	a1 ea       	ldi	r26, 0xA1	; 161
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e1 ea       	ldi	r30, 0xA1	; 161
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7b       	andi	r24, 0xBF	; 191
     e50:	8c 93       	st	X, r24
        waarde1 = TCNT4; // Save current count
     e52:	e4 ea       	ldi	r30, 0xA4	; 164
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	90 93 19 03 	sts	0x0319, r25
     e5e:	80 93 18 03 	sts	0x0318, r24
     e62:	50 c0       	rjmp	.+160    	; 0xf04 <__vector_41+0x10a>
    }
    else // On falling edge
    {
        TCCR4B |= 0; // geen interrupts meer
     e64:	a1 ea       	ldi	r26, 0xA1	; 161
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 ea       	ldi	r30, 0xA1	; 161
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8c 93       	st	X, r24
        waarde2 = TCNT4; // Save current count
     e70:	e4 ea       	ldi	r30, 0xA4	; 164
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	90 93 13 03 	sts	0x0313, r25
     e7c:	80 93 12 03 	sts	0x0312, r24
        counts = (uint32_t)waarde2 - (uint32_t)waarde1;
     e80:	80 91 12 03 	lds	r24, 0x0312
     e84:	90 91 13 03 	lds	r25, 0x0313
     e88:	9c 01       	movw	r18, r24
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	80 91 18 03 	lds	r24, 0x0318
     e92:	90 91 19 03 	lds	r25, 0x0319
     e96:	cc 01       	movw	r24, r24
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	79 01       	movw	r14, r18
     e9e:	8a 01       	movw	r16, r20
     ea0:	e8 1a       	sub	r14, r24
     ea2:	f9 0a       	sbc	r15, r25
     ea4:	0a 0b       	sbc	r16, r26
     ea6:	1b 0b       	sbc	r17, r27
     ea8:	d8 01       	movw	r26, r16
     eaa:	c7 01       	movw	r24, r14
     eac:	80 93 14 03 	sts	0x0314, r24
     eb0:	90 93 15 03 	sts	0x0315, r25
     eb4:	a0 93 16 03 	sts	0x0316, r26
     eb8:	b0 93 17 03 	sts	0x0317, r27
        ultrasoon = (counts/2)*0.01715; //snelheid van geluid keer de tijd die de klok vertegenwoordigd (16/8 = 2 1/2E6= 5E-7)
     ebc:	80 91 14 03 	lds	r24, 0x0314
     ec0:	90 91 15 03 	lds	r25, 0x0315
     ec4:	a0 91 16 03 	lds	r26, 0x0316
     ec8:	b0 91 17 03 	lds	r27, 0x0317
     ecc:	b6 95       	lsr	r27
     ece:	a7 95       	ror	r26
     ed0:	97 95       	ror	r25
     ed2:	87 95       	ror	r24
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__floatunsisf>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	28 e2       	ldi	r18, 0x28	; 40
     ee6:	3e e7       	ldi	r19, 0x7E	; 126
     ee8:	4c e8       	ldi	r20, 0x8C	; 140
     eea:	5c e3       	ldi	r21, 0x3C	; 60
     eec:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	80 93 08 03 	sts	0x0308, r24
     ef8:	90 93 09 03 	sts	0x0309, r25
     efc:	a0 93 0a 03 	sts	0x030A, r26
     f00:	b0 93 0b 03 	sts	0x030B, r27
    }
}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	bf 91       	pop	r27
     f0e:	af 91       	pop	r26
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	7f 91       	pop	r23
     f16:	6f 91       	pop	r22
     f18:	5f 91       	pop	r21
     f1a:	4f 91       	pop	r20
     f1c:	3f 91       	pop	r19
     f1e:	2f 91       	pop	r18
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	0f 90       	pop	r0
     f2a:	00 92 5b 00 	sts	0x005B, r0
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	0f 90       	pop	r0
     f34:	1f 90       	pop	r1
     f36:	18 95       	reti

00000f38 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
     f38:	1f 92       	push	r1
     f3a:	0f 92       	push	r0
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	0f 92       	push	r0
     f40:	00 90 5b 00 	lds	r0, 0x005B
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
     f48:	8f 93       	push	r24
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
    PORTC &= ~(1 << PC5);
     f5a:	a8 e2       	ldi	r26, 0x28	; 40
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e8 e2       	ldi	r30, 0x28	; 40
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8f 7d       	andi	r24, 0xDF	; 223
     f66:	8c 93       	st	X, r24

    TIMSK4 |= (1 << ICIE4);
     f68:	a2 e7       	ldi	r26, 0x72	; 114
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e2 e7       	ldi	r30, 0x72	; 114
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 62       	ori	r24, 0x20	; 32
     f74:	8c 93       	st	X, r24
    TCCR4B |= (1 << ICES4);
     f76:	a1 ea       	ldi	r26, 0xA1	; 161
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e1 ea       	ldi	r30, 0xA1	; 161
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	8c 93       	st	X, r24
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	8f 91       	pop	r24
     f92:	0f 90       	pop	r0
     f94:	00 92 5b 00 	sts	0x005B, r0
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <__vector_15>:

ISR(TIMER2_OVF_vect)
{
     fa2:	1f 92       	push	r1
     fa4:	0f 92       	push	r0
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	0f 92       	push	r0
     faa:	00 90 5b 00 	lds	r0, 0x005B
     fae:	0f 92       	push	r0
     fb0:	11 24       	eor	r1, r1
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
    PORTC |= (1<<PC5);
     fc6:	a8 e2       	ldi	r26, 0x28	; 40
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e8 e2       	ldi	r30, 0x28	; 40
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 62       	ori	r24, 0x20	; 32
     fd2:	8c 93       	st	X, r24
    TCNT4 =0;
     fd4:	e4 ea       	ldi	r30, 0xA4	; 164
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	11 82       	std	Z+1, r1	; 0x01
     fda:	10 82       	st	Z, r1
    OCR4A = 20;
     fdc:	e8 ea       	ldi	r30, 0xA8	; 168
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	84 e1       	ldi	r24, 0x14	; 20
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	0f 90       	pop	r0
     ffa:	00 92 5b 00 	sts	0x005B, r0
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	0f 92       	push	r0
    1010:	00 90 5b 00 	lds	r0, 0x005B
    1014:	0f 92       	push	r0
    1016:	11 24       	eor	r1, r1
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    if (ADCSRA & (1 << ADIF))
    102c:	ea e7       	ldi	r30, 0x7A	; 122
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	80 71       	andi	r24, 0x10	; 16
    1038:	90 70       	andi	r25, 0x00	; 0
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	41 f0       	breq	.+16     	; 0x104e <__vector_13+0x46>
    {
        Ir_links= ADC; //waarde ir links wordt upgedate
    103e:	e8 e7       	ldi	r30, 0x78	; 120
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	90 93 11 03 	sts	0x0311, r25
    104a:	80 93 10 03 	sts	0x0310, r24
    }
    ADMUX &= ~(1);// Analoog 6 wissel naar
    104e:	ac e7       	ldi	r26, 0x7C	; 124
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ec e7       	ldi	r30, 0x7C	; 124
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8e 7f       	andi	r24, 0xFE	; 254
    105a:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADSC); //start convertion
    105c:	aa e7       	ldi	r26, 0x7A	; 122
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ea e7       	ldi	r30, 0x7A	; 122
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	80 64       	ori	r24, 0x40	; 64
    1068:	8c 93       	st	X, r24
}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	ff 91       	pop	r31
    1070:	ef 91       	pop	r30
    1072:	bf 91       	pop	r27
    1074:	af 91       	pop	r26
    1076:	9f 91       	pop	r25
    1078:	8f 91       	pop	r24
    107a:	0f 90       	pop	r0
    107c:	00 92 5b 00 	sts	0x005B, r0
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_14>:

ISR(TIMER2_COMPB_vect)
{
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	00 90 5b 00 	lds	r0, 0x005B
    1096:	0f 92       	push	r0
    1098:	11 24       	eor	r1, r1
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    if(ADCSRA & (1 << ADIF))
    10ae:	ea e7       	ldi	r30, 0x7A	; 122
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	80 71       	andi	r24, 0x10	; 16
    10ba:	90 70       	andi	r25, 0x00	; 0
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	41 f0       	breq	.+16     	; 0x10d0 <__vector_14+0x46>
    {
        Ir_rechts = ADC; //waarde ir links wordt upgedate
    10c0:	e8 e7       	ldi	r30, 0x78	; 120
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	90 93 0d 03 	sts	0x030D, r25
    10cc:	80 93 0c 03 	sts	0x030C, r24
    }
    ADMUX |= 7;
    10d0:	ac e7       	ldi	r26, 0x7C	; 124
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ec e7       	ldi	r30, 0x7C	; 124
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	87 60       	ori	r24, 0x07	; 7
    10dc:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADSC); //start convertion
    10de:	aa e7       	ldi	r26, 0x7A	; 122
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ea e7       	ldi	r30, 0x7A	; 122
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	8c 93       	st	X, r24
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	0f 90       	pop	r0
    10fe:	00 92 5b 00 	sts	0x005B, r0
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <__vector_23>:

ISR(TIMER0_OVF_vect)
{
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	00 90 5b 00 	lds	r0, 0x005B
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	8f 93       	push	r24
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    if (OCR0A == 0)
    112e:	e7 e4       	ldi	r30, 0x47	; 71
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	88 23       	and	r24, r24
    1136:	39 f4       	brne	.+14     	; 0x1146 <__vector_23+0x3a>
    {
        PORTE &= ~(1<<PE4);
    1138:	ae e2       	ldi	r26, 0x2E	; 46
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ee e2       	ldi	r30, 0x2E	; 46
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8f 7e       	andi	r24, 0xEF	; 239
    1144:	8c 93       	st	X, r24
    }
    if (OCR0B == 0)
    1146:	e8 e4       	ldi	r30, 0x48	; 72
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	88 23       	and	r24, r24
    114e:	39 f4       	brne	.+14     	; 0x115e <__vector_23+0x52>
    {
        PORTE &= ~(1<<PE3);
    1150:	ae e2       	ldi	r26, 0x2E	; 46
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ee e2       	ldi	r30, 0x2E	; 46
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	87 7f       	andi	r24, 0xF7	; 247
    115c:	8c 93       	st	X, r24
    }
    if (OCR0A != 0)
    115e:	e7 e4       	ldi	r30, 0x47	; 71
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	88 23       	and	r24, r24
    1166:	39 f0       	breq	.+14     	; 0x1176 <__vector_23+0x6a>
    {
        PORTE |= (1<<PE4);
    1168:	ae e2       	ldi	r26, 0x2E	; 46
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ee e2       	ldi	r30, 0x2E	; 46
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	80 61       	ori	r24, 0x10	; 16
    1174:	8c 93       	st	X, r24
    }
    if (OCR0B != 0)
    1176:	e8 e4       	ldi	r30, 0x48	; 72
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	88 23       	and	r24, r24
    117e:	39 f0       	breq	.+14     	; 0x118e <__vector_23+0x82>
    {
        PORTE |= (1<<PE3);
    1180:	ae e2       	ldi	r26, 0x2E	; 46
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ee e2       	ldi	r30, 0x2E	; 46
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	88 60       	ori	r24, 0x08	; 8
    118c:	8c 93       	st	X, r24
    }
}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	ff 91       	pop	r31
    1194:	ef 91       	pop	r30
    1196:	bf 91       	pop	r27
    1198:	af 91       	pop	r26
    119a:	8f 91       	pop	r24
    119c:	0f 90       	pop	r0
    119e:	00 92 5b 00 	sts	0x005B, r0
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	00 90 5b 00 	lds	r0, 0x005B
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	8f 93       	push	r24
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    PORTE &= ~(1<<PE4);
    11ce:	ae e2       	ldi	r26, 0x2E	; 46
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ee e2       	ldi	r30, 0x2E	; 46
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7e       	andi	r24, 0xEF	; 239
    11da:	8c 93       	st	X, r24
}
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	8f 91       	pop	r24
    11ea:	0f 90       	pop	r0
    11ec:	00 92 5b 00 	sts	0x005B, r0
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	0f 90       	pop	r0
    11f6:	1f 90       	pop	r1
    11f8:	18 95       	reti

000011fa <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
    11fa:	1f 92       	push	r1
    11fc:	0f 92       	push	r0
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	0f 92       	push	r0
    1202:	00 90 5b 00 	lds	r0, 0x005B
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	8f 93       	push	r24
    120c:	af 93       	push	r26
    120e:	bf 93       	push	r27
    1210:	ef 93       	push	r30
    1212:	ff 93       	push	r31
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    PORTE &= ~(1<<PE3);
    121c:	ae e2       	ldi	r26, 0x2E	; 46
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ee e2       	ldi	r30, 0x2E	; 46
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	87 7f       	andi	r24, 0xF7	; 247
    1228:	8c 93       	st	X, r24
}
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	ff 91       	pop	r31
    1230:	ef 91       	pop	r30
    1232:	bf 91       	pop	r27
    1234:	af 91       	pop	r26
    1236:	8f 91       	pop	r24
    1238:	0f 90       	pop	r0
    123a:	00 92 5b 00 	sts	0x005B, r0
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <init_motor>:

void init_motor (void)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    // Output low
    PORTE &= ~(1<<PE4); //motor laag
    1250:	ae e2       	ldi	r26, 0x2E	; 46
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ee e2       	ldi	r30, 0x2E	; 46
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8f 7e       	andi	r24, 0xEF	; 239
    125c:	8c 93       	st	X, r24
    PORTE &= ~(1<<PE3);
    125e:	ae e2       	ldi	r26, 0x2E	; 46
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ee e2       	ldi	r30, 0x2E	; 46
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	87 7f       	andi	r24, 0xF7	; 247
    126a:	8c 93       	st	X, r24

    //Use mode 0, clkdiv = 64 klok 0 Pwm signalen
    TCCR0A = 0;
    126c:	e4 e4       	ldi	r30, 0x44	; 68
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
    1272:	e5 e4       	ldi	r30, 0x45	; 69
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	83 e0       	ldi	r24, 0x03	; 3
    1278:	80 83       	st	Z, r24
    TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0);
    127a:	ee e6       	ldi	r30, 0x6E	; 110
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	87 e0       	ldi	r24, 0x07	; 7
    1280:	80 83       	st	Z, r24
    OCR0A = 0;
    1282:	e7 e4       	ldi	r30, 0x47	; 71
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	10 82       	st	Z, r1
    OCR0B = 0;
    1288:	e8 e4       	ldi	r30, 0x48	; 72
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	10 82       	st	Z, r1

    //Use mode 0, clkdiv = 256 klok 1 globale klok
    TCCR1A = 0;
    128e:	e0 e8       	ldi	r30, 0x80	; 128
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	10 82       	st	Z, r1
    TCCR1B = (1<<CS12) | (0<<CS11) | (0<<CS10);
    1294:	e1 e8       	ldi	r30, 0x81	; 129
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	84 e0       	ldi	r24, 0x04	; 4
    129a:	80 83       	st	Z, r24
    TIMSK1 = (1<<OCIE0A);
    129c:	ef e6       	ldi	r30, 0x6F	; 111
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	80 83       	st	Z, r24
    OCR1A = 6250; //0.1 van een seconde dus kan gebruikt worden om een grote klok te maken voor 25.5 seconden
    12a4:	e8 e8       	ldi	r30, 0x88	; 136
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8a e6       	ldi	r24, 0x6A	; 106
    12aa:	98 e1       	ldi	r25, 0x18	; 24
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24

    //Use mode 0, clkdiv = 1024   klok 2 globale trigger
    TCCR2A = 0;
    12b0:	e0 eb       	ldi	r30, 0xB0	; 176
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	10 82       	st	Z, r1
    TCCR2B = (1<<CS22) | (0<<CS21) | (1<<CS20);
    12b6:	e1 eb       	ldi	r30, 0xB1	; 177
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	85 e0       	ldi	r24, 0x05	; 5
    12bc:	80 83       	st	Z, r24
    TIMSK2 = (1<<OCIE2B) | (1<<OCIE2A) | (1<<TOIE2);
    12be:	e0 e7       	ldi	r30, 0x70	; 112
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	87 e0       	ldi	r24, 0x07	; 7
    12c4:	80 83       	st	Z, r24
    OCR2A = 85;
    12c6:	e3 eb       	ldi	r30, 0xB3	; 179
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	85 e5       	ldi	r24, 0x55	; 85
    12cc:	80 83       	st	Z, r24
    OCR2B = 170;
    12ce:	e4 eb       	ldi	r30, 0xB4	; 180
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a ea       	ldi	r24, 0xAA	; 170
    12d4:	80 83       	st	Z, r24

    //Use mode 0, clkdiv = 8 klok 4 ultrasoon
    TCCR4A = 0;
    12d6:	e0 ea       	ldi	r30, 0xA0	; 160
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	10 82       	st	Z, r1
    TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);
    12dc:	e1 ea       	ldi	r30, 0xA1	; 161
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	80 83       	st	Z, r24
    TIMSK4 |= (1<<OCIE4A);
    12e4:	a2 e7       	ldi	r26, 0x72	; 114
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e2 e7       	ldi	r30, 0x72	; 114
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	82 60       	ori	r24, 0x02	; 2
    12f0:	8c 93       	st	X, r24

// intialisatie ADC goed controleren vrij nieuw
    ADMUX =(0 << REFS1)|(1 << REFS0); //meet vanaf 0 volt
    12f2:	ec e7       	ldi	r30, 0x7C	; 124
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 e4       	ldi	r24, 0x40	; 64
    12f8:	80 83       	st	Z, r24
    ADCSRA = (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);//Division factor van 128
    12fa:	ea e7       	ldi	r30, 0x7A	; 122
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	87 e0       	ldi	r24, 0x07	; 7
    1300:	80 83       	st	Z, r24
    ADCSRA |=(1 << ADEN); // ADC activeren
    1302:	aa e7       	ldi	r26, 0x7A	; 122
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ea e7       	ldi	r30, 0x7A	; 122
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 68       	ori	r24, 0x80	; 128
    130e:	8c 93       	st	X, r24

    // Interupts geactiveerd*/
    sei();
    1310:	78 94       	sei
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <motor>:

void motor (int Af, int Bf)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <motor+0x6>
    131e:	0f 92       	push	r0
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	7c 83       	std	Y+4, r23	; 0x04
    132a:	6b 83       	std	Y+3, r22	; 0x03
            OCR0A = Af;
    132c:	e7 e4       	ldi	r30, 0x47	; 71
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	80 83       	st	Z, r24
            OCR0B = Bf;
    1334:	e8 e4       	ldi	r30, 0x48	; 72
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	80 83       	st	Z, r24
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <__fixunssfsi>:
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	7b 01       	movw	r14, r22
    1354:	8c 01       	movw	r16, r24
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	5f e4       	ldi	r21, 0x4F	; 79
    135e:	0e 94 a5 0c 	call	0x194a	; 0x194a <__gesf2>
    1362:	88 23       	and	r24, r24
    1364:	8c f0       	brlt	.+34     	; 0x1388 <__fixunssfsi+0x3e>
    1366:	c8 01       	movw	r24, r16
    1368:	b7 01       	movw	r22, r14
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	5f e4       	ldi	r21, 0x4F	; 79
    1372:	0e 94 1d 0b 	call	0x163a	; 0x163a <__subsf3>
    1376:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
    137a:	9b 01       	movw	r18, r22
    137c:	ac 01       	movw	r20, r24
    137e:	20 50       	subi	r18, 0x00	; 0
    1380:	30 40       	sbci	r19, 0x00	; 0
    1382:	40 40       	sbci	r20, 0x00	; 0
    1384:	50 48       	sbci	r21, 0x80	; 128
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <__fixunssfsi+0x4a>
    1388:	c8 01       	movw	r24, r16
    138a:	b7 01       	movw	r22, r14
    138c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
    1394:	b9 01       	movw	r22, r18
    1396:	ca 01       	movw	r24, r20
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	08 95       	ret

000013a2 <_fpadd_parts>:
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e7 ed       	ldi	r30, 0xD7	; 215
    13a8:	f9 e0       	ldi	r31, 0x09	; 9
    13aa:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__prologue_saves__>
    13ae:	dc 01       	movw	r26, r24
    13b0:	2b 01       	movw	r4, r22
    13b2:	fa 01       	movw	r30, r20
    13b4:	9c 91       	ld	r25, X
    13b6:	92 30       	cpi	r25, 0x02	; 2
    13b8:	08 f4       	brcc	.+2      	; 0x13bc <_fpadd_parts+0x1a>
    13ba:	39 c1       	rjmp	.+626    	; 0x162e <_fpadd_parts+0x28c>
    13bc:	eb 01       	movw	r28, r22
    13be:	88 81       	ld	r24, Y
    13c0:	82 30       	cpi	r24, 0x02	; 2
    13c2:	08 f4       	brcc	.+2      	; 0x13c6 <_fpadd_parts+0x24>
    13c4:	33 c1       	rjmp	.+614    	; 0x162c <_fpadd_parts+0x28a>
    13c6:	94 30       	cpi	r25, 0x04	; 4
    13c8:	69 f4       	brne	.+26     	; 0x13e4 <_fpadd_parts+0x42>
    13ca:	84 30       	cpi	r24, 0x04	; 4
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <_fpadd_parts+0x2e>
    13ce:	2f c1       	rjmp	.+606    	; 0x162e <_fpadd_parts+0x28c>
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	9c 91       	ld	r25, X
    13d4:	11 97       	sbiw	r26, 0x01	; 1
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	98 17       	cp	r25, r24
    13da:	09 f4       	brne	.+2      	; 0x13de <_fpadd_parts+0x3c>
    13dc:	28 c1       	rjmp	.+592    	; 0x162e <_fpadd_parts+0x28c>
    13de:	a0 e0       	ldi	r26, 0x00	; 0
    13e0:	b2 e0       	ldi	r27, 0x02	; 2
    13e2:	25 c1       	rjmp	.+586    	; 0x162e <_fpadd_parts+0x28c>
    13e4:	84 30       	cpi	r24, 0x04	; 4
    13e6:	09 f4       	brne	.+2      	; 0x13ea <_fpadd_parts+0x48>
    13e8:	21 c1       	rjmp	.+578    	; 0x162c <_fpadd_parts+0x28a>
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	a9 f4       	brne	.+42     	; 0x1418 <_fpadd_parts+0x76>
    13ee:	92 30       	cpi	r25, 0x02	; 2
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <_fpadd_parts+0x52>
    13f2:	1d c1       	rjmp	.+570    	; 0x162e <_fpadd_parts+0x28c>
    13f4:	9a 01       	movw	r18, r20
    13f6:	ad 01       	movw	r20, r26
    13f8:	88 e0       	ldi	r24, 0x08	; 8
    13fa:	ea 01       	movw	r28, r20
    13fc:	09 90       	ld	r0, Y+
    13fe:	ae 01       	movw	r20, r28
    1400:	e9 01       	movw	r28, r18
    1402:	09 92       	st	Y+, r0
    1404:	9e 01       	movw	r18, r28
    1406:	81 50       	subi	r24, 0x01	; 1
    1408:	c1 f7       	brne	.-16     	; 0x13fa <_fpadd_parts+0x58>
    140a:	e2 01       	movw	r28, r4
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	11 96       	adiw	r26, 0x01	; 1
    1410:	9c 91       	ld	r25, X
    1412:	89 23       	and	r24, r25
    1414:	81 83       	std	Z+1, r24	; 0x01
    1416:	08 c1       	rjmp	.+528    	; 0x1628 <_fpadd_parts+0x286>
    1418:	92 30       	cpi	r25, 0x02	; 2
    141a:	09 f4       	brne	.+2      	; 0x141e <_fpadd_parts+0x7c>
    141c:	07 c1       	rjmp	.+526    	; 0x162c <_fpadd_parts+0x28a>
    141e:	12 96       	adiw	r26, 0x02	; 2
    1420:	2d 90       	ld	r2, X+
    1422:	3c 90       	ld	r3, X
    1424:	13 97       	sbiw	r26, 0x03	; 3
    1426:	eb 01       	movw	r28, r22
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	9b 81       	ldd	r25, Y+3	; 0x03
    142c:	14 96       	adiw	r26, 0x04	; 4
    142e:	ad 90       	ld	r10, X+
    1430:	bd 90       	ld	r11, X+
    1432:	cd 90       	ld	r12, X+
    1434:	dc 90       	ld	r13, X
    1436:	17 97       	sbiw	r26, 0x07	; 7
    1438:	ec 80       	ldd	r14, Y+4	; 0x04
    143a:	fd 80       	ldd	r15, Y+5	; 0x05
    143c:	0e 81       	ldd	r16, Y+6	; 0x06
    143e:	1f 81       	ldd	r17, Y+7	; 0x07
    1440:	91 01       	movw	r18, r2
    1442:	28 1b       	sub	r18, r24
    1444:	39 0b       	sbc	r19, r25
    1446:	b9 01       	movw	r22, r18
    1448:	37 ff       	sbrs	r19, 7
    144a:	04 c0       	rjmp	.+8      	; 0x1454 <_fpadd_parts+0xb2>
    144c:	66 27       	eor	r22, r22
    144e:	77 27       	eor	r23, r23
    1450:	62 1b       	sub	r22, r18
    1452:	73 0b       	sbc	r23, r19
    1454:	60 32       	cpi	r22, 0x20	; 32
    1456:	71 05       	cpc	r23, r1
    1458:	0c f0       	brlt	.+2      	; 0x145c <_fpadd_parts+0xba>
    145a:	61 c0       	rjmp	.+194    	; 0x151e <_fpadd_parts+0x17c>
    145c:	12 16       	cp	r1, r18
    145e:	13 06       	cpc	r1, r19
    1460:	6c f5       	brge	.+90     	; 0x14bc <_fpadd_parts+0x11a>
    1462:	37 01       	movw	r6, r14
    1464:	48 01       	movw	r8, r16
    1466:	06 2e       	mov	r0, r22
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <_fpadd_parts+0xd0>
    146a:	96 94       	lsr	r9
    146c:	87 94       	ror	r8
    146e:	77 94       	ror	r7
    1470:	67 94       	ror	r6
    1472:	0a 94       	dec	r0
    1474:	d2 f7       	brpl	.-12     	; 0x146a <_fpadd_parts+0xc8>
    1476:	21 e0       	ldi	r18, 0x01	; 1
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <_fpadd_parts+0xe6>
    1480:	22 0f       	add	r18, r18
    1482:	33 1f       	adc	r19, r19
    1484:	44 1f       	adc	r20, r20
    1486:	55 1f       	adc	r21, r21
    1488:	6a 95       	dec	r22
    148a:	d2 f7       	brpl	.-12     	; 0x1480 <_fpadd_parts+0xde>
    148c:	21 50       	subi	r18, 0x01	; 1
    148e:	30 40       	sbci	r19, 0x00	; 0
    1490:	40 40       	sbci	r20, 0x00	; 0
    1492:	50 40       	sbci	r21, 0x00	; 0
    1494:	2e 21       	and	r18, r14
    1496:	3f 21       	and	r19, r15
    1498:	40 23       	and	r20, r16
    149a:	51 23       	and	r21, r17
    149c:	21 15       	cp	r18, r1
    149e:	31 05       	cpc	r19, r1
    14a0:	41 05       	cpc	r20, r1
    14a2:	51 05       	cpc	r21, r1
    14a4:	21 f0       	breq	.+8      	; 0x14ae <_fpadd_parts+0x10c>
    14a6:	21 e0       	ldi	r18, 0x01	; 1
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	79 01       	movw	r14, r18
    14b0:	8a 01       	movw	r16, r20
    14b2:	e6 28       	or	r14, r6
    14b4:	f7 28       	or	r15, r7
    14b6:	08 29       	or	r16, r8
    14b8:	19 29       	or	r17, r9
    14ba:	3c c0       	rjmp	.+120    	; 0x1534 <_fpadd_parts+0x192>
    14bc:	23 2b       	or	r18, r19
    14be:	d1 f1       	breq	.+116    	; 0x1534 <_fpadd_parts+0x192>
    14c0:	26 0e       	add	r2, r22
    14c2:	37 1e       	adc	r3, r23
    14c4:	35 01       	movw	r6, r10
    14c6:	46 01       	movw	r8, r12
    14c8:	06 2e       	mov	r0, r22
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <_fpadd_parts+0x132>
    14cc:	96 94       	lsr	r9
    14ce:	87 94       	ror	r8
    14d0:	77 94       	ror	r7
    14d2:	67 94       	ror	r6
    14d4:	0a 94       	dec	r0
    14d6:	d2 f7       	brpl	.-12     	; 0x14cc <_fpadd_parts+0x12a>
    14d8:	21 e0       	ldi	r18, 0x01	; 1
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <_fpadd_parts+0x148>
    14e2:	22 0f       	add	r18, r18
    14e4:	33 1f       	adc	r19, r19
    14e6:	44 1f       	adc	r20, r20
    14e8:	55 1f       	adc	r21, r21
    14ea:	6a 95       	dec	r22
    14ec:	d2 f7       	brpl	.-12     	; 0x14e2 <_fpadd_parts+0x140>
    14ee:	21 50       	subi	r18, 0x01	; 1
    14f0:	30 40       	sbci	r19, 0x00	; 0
    14f2:	40 40       	sbci	r20, 0x00	; 0
    14f4:	50 40       	sbci	r21, 0x00	; 0
    14f6:	2a 21       	and	r18, r10
    14f8:	3b 21       	and	r19, r11
    14fa:	4c 21       	and	r20, r12
    14fc:	5d 21       	and	r21, r13
    14fe:	21 15       	cp	r18, r1
    1500:	31 05       	cpc	r19, r1
    1502:	41 05       	cpc	r20, r1
    1504:	51 05       	cpc	r21, r1
    1506:	21 f0       	breq	.+8      	; 0x1510 <_fpadd_parts+0x16e>
    1508:	21 e0       	ldi	r18, 0x01	; 1
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	59 01       	movw	r10, r18
    1512:	6a 01       	movw	r12, r20
    1514:	a6 28       	or	r10, r6
    1516:	b7 28       	or	r11, r7
    1518:	c8 28       	or	r12, r8
    151a:	d9 28       	or	r13, r9
    151c:	0b c0       	rjmp	.+22     	; 0x1534 <_fpadd_parts+0x192>
    151e:	82 15       	cp	r24, r2
    1520:	93 05       	cpc	r25, r3
    1522:	2c f0       	brlt	.+10     	; 0x152e <_fpadd_parts+0x18c>
    1524:	1c 01       	movw	r2, r24
    1526:	aa 24       	eor	r10, r10
    1528:	bb 24       	eor	r11, r11
    152a:	65 01       	movw	r12, r10
    152c:	03 c0       	rjmp	.+6      	; 0x1534 <_fpadd_parts+0x192>
    152e:	ee 24       	eor	r14, r14
    1530:	ff 24       	eor	r15, r15
    1532:	87 01       	movw	r16, r14
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	9c 91       	ld	r25, X
    1538:	d2 01       	movw	r26, r4
    153a:	11 96       	adiw	r26, 0x01	; 1
    153c:	8c 91       	ld	r24, X
    153e:	98 17       	cp	r25, r24
    1540:	09 f4       	brne	.+2      	; 0x1544 <_fpadd_parts+0x1a2>
    1542:	45 c0       	rjmp	.+138    	; 0x15ce <_fpadd_parts+0x22c>
    1544:	99 23       	and	r25, r25
    1546:	39 f0       	breq	.+14     	; 0x1556 <_fpadd_parts+0x1b4>
    1548:	a8 01       	movw	r20, r16
    154a:	97 01       	movw	r18, r14
    154c:	2a 19       	sub	r18, r10
    154e:	3b 09       	sbc	r19, r11
    1550:	4c 09       	sbc	r20, r12
    1552:	5d 09       	sbc	r21, r13
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <_fpadd_parts+0x1c0>
    1556:	a6 01       	movw	r20, r12
    1558:	95 01       	movw	r18, r10
    155a:	2e 19       	sub	r18, r14
    155c:	3f 09       	sbc	r19, r15
    155e:	40 0b       	sbc	r20, r16
    1560:	51 0b       	sbc	r21, r17
    1562:	57 fd       	sbrc	r21, 7
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <_fpadd_parts+0x1d4>
    1566:	11 82       	std	Z+1, r1	; 0x01
    1568:	33 82       	std	Z+3, r3	; 0x03
    156a:	22 82       	std	Z+2, r2	; 0x02
    156c:	24 83       	std	Z+4, r18	; 0x04
    156e:	35 83       	std	Z+5, r19	; 0x05
    1570:	46 83       	std	Z+6, r20	; 0x06
    1572:	57 83       	std	Z+7, r21	; 0x07
    1574:	1d c0       	rjmp	.+58     	; 0x15b0 <_fpadd_parts+0x20e>
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	81 83       	std	Z+1, r24	; 0x01
    157a:	33 82       	std	Z+3, r3	; 0x03
    157c:	22 82       	std	Z+2, r2	; 0x02
    157e:	88 27       	eor	r24, r24
    1580:	99 27       	eor	r25, r25
    1582:	dc 01       	movw	r26, r24
    1584:	82 1b       	sub	r24, r18
    1586:	93 0b       	sbc	r25, r19
    1588:	a4 0b       	sbc	r26, r20
    158a:	b5 0b       	sbc	r27, r21
    158c:	84 83       	std	Z+4, r24	; 0x04
    158e:	95 83       	std	Z+5, r25	; 0x05
    1590:	a6 83       	std	Z+6, r26	; 0x06
    1592:	b7 83       	std	Z+7, r27	; 0x07
    1594:	0d c0       	rjmp	.+26     	; 0x15b0 <_fpadd_parts+0x20e>
    1596:	22 0f       	add	r18, r18
    1598:	33 1f       	adc	r19, r19
    159a:	44 1f       	adc	r20, r20
    159c:	55 1f       	adc	r21, r21
    159e:	24 83       	std	Z+4, r18	; 0x04
    15a0:	35 83       	std	Z+5, r19	; 0x05
    15a2:	46 83       	std	Z+6, r20	; 0x06
    15a4:	57 83       	std	Z+7, r21	; 0x07
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	93 83       	std	Z+3, r25	; 0x03
    15ae:	82 83       	std	Z+2, r24	; 0x02
    15b0:	24 81       	ldd	r18, Z+4	; 0x04
    15b2:	35 81       	ldd	r19, Z+5	; 0x05
    15b4:	46 81       	ldd	r20, Z+6	; 0x06
    15b6:	57 81       	ldd	r21, Z+7	; 0x07
    15b8:	da 01       	movw	r26, r20
    15ba:	c9 01       	movw	r24, r18
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	a1 09       	sbc	r26, r1
    15c0:	b1 09       	sbc	r27, r1
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	af 4f       	sbci	r26, 0xFF	; 255
    15c8:	bf 43       	sbci	r27, 0x3F	; 63
    15ca:	28 f3       	brcs	.-54     	; 0x1596 <_fpadd_parts+0x1f4>
    15cc:	0b c0       	rjmp	.+22     	; 0x15e4 <_fpadd_parts+0x242>
    15ce:	91 83       	std	Z+1, r25	; 0x01
    15d0:	33 82       	std	Z+3, r3	; 0x03
    15d2:	22 82       	std	Z+2, r2	; 0x02
    15d4:	ea 0c       	add	r14, r10
    15d6:	fb 1c       	adc	r15, r11
    15d8:	0c 1d       	adc	r16, r12
    15da:	1d 1d       	adc	r17, r13
    15dc:	e4 82       	std	Z+4, r14	; 0x04
    15de:	f5 82       	std	Z+5, r15	; 0x05
    15e0:	06 83       	std	Z+6, r16	; 0x06
    15e2:	17 83       	std	Z+7, r17	; 0x07
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	80 83       	st	Z, r24
    15e8:	24 81       	ldd	r18, Z+4	; 0x04
    15ea:	35 81       	ldd	r19, Z+5	; 0x05
    15ec:	46 81       	ldd	r20, Z+6	; 0x06
    15ee:	57 81       	ldd	r21, Z+7	; 0x07
    15f0:	57 ff       	sbrs	r21, 7
    15f2:	1a c0       	rjmp	.+52     	; 0x1628 <_fpadd_parts+0x286>
    15f4:	c9 01       	movw	r24, r18
    15f6:	aa 27       	eor	r26, r26
    15f8:	97 fd       	sbrc	r25, 7
    15fa:	a0 95       	com	r26
    15fc:	ba 2f       	mov	r27, r26
    15fe:	81 70       	andi	r24, 0x01	; 1
    1600:	90 70       	andi	r25, 0x00	; 0
    1602:	a0 70       	andi	r26, 0x00	; 0
    1604:	b0 70       	andi	r27, 0x00	; 0
    1606:	56 95       	lsr	r21
    1608:	47 95       	ror	r20
    160a:	37 95       	ror	r19
    160c:	27 95       	ror	r18
    160e:	82 2b       	or	r24, r18
    1610:	93 2b       	or	r25, r19
    1612:	a4 2b       	or	r26, r20
    1614:	b5 2b       	or	r27, r21
    1616:	84 83       	std	Z+4, r24	; 0x04
    1618:	95 83       	std	Z+5, r25	; 0x05
    161a:	a6 83       	std	Z+6, r26	; 0x06
    161c:	b7 83       	std	Z+7, r27	; 0x07
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	93 83       	std	Z+3, r25	; 0x03
    1626:	82 83       	std	Z+2, r24	; 0x02
    1628:	df 01       	movw	r26, r30
    162a:	01 c0       	rjmp	.+2      	; 0x162e <_fpadd_parts+0x28c>
    162c:	d2 01       	movw	r26, r4
    162e:	cd 01       	movw	r24, r26
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	e2 e1       	ldi	r30, 0x12	; 18
    1636:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__epilogue_restores__>

0000163a <__subsf3>:
    163a:	a0 e2       	ldi	r26, 0x20	; 32
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e3 e2       	ldi	r30, 0x23	; 35
    1640:	fb e0       	ldi	r31, 0x0B	; 11
    1642:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__prologue_saves__+0x18>
    1646:	69 83       	std	Y+1, r22	; 0x01
    1648:	7a 83       	std	Y+2, r23	; 0x02
    164a:	8b 83       	std	Y+3, r24	; 0x03
    164c:	9c 83       	std	Y+4, r25	; 0x04
    164e:	2d 83       	std	Y+5, r18	; 0x05
    1650:	3e 83       	std	Y+6, r19	; 0x06
    1652:	4f 83       	std	Y+7, r20	; 0x07
    1654:	58 87       	std	Y+8, r21	; 0x08
    1656:	e9 e0       	ldi	r30, 0x09	; 9
    1658:	ee 2e       	mov	r14, r30
    165a:	f1 2c       	mov	r15, r1
    165c:	ec 0e       	add	r14, r28
    165e:	fd 1e       	adc	r15, r29
    1660:	ce 01       	movw	r24, r28
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	b7 01       	movw	r22, r14
    1666:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    166a:	8e 01       	movw	r16, r28
    166c:	0f 5e       	subi	r16, 0xEF	; 239
    166e:	1f 4f       	sbci	r17, 0xFF	; 255
    1670:	ce 01       	movw	r24, r28
    1672:	05 96       	adiw	r24, 0x05	; 5
    1674:	b8 01       	movw	r22, r16
    1676:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    167a:	8a 89       	ldd	r24, Y+18	; 0x12
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	89 27       	eor	r24, r25
    1680:	8a 8b       	std	Y+18, r24	; 0x12
    1682:	c7 01       	movw	r24, r14
    1684:	b8 01       	movw	r22, r16
    1686:	ae 01       	movw	r20, r28
    1688:	47 5e       	subi	r20, 0xE7	; 231
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_fpadd_parts>
    1690:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    1694:	a0 96       	adiw	r28, 0x20	; 32
    1696:	e6 e0       	ldi	r30, 0x06	; 6
    1698:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__+0x18>

0000169c <__addsf3>:
    169c:	a0 e2       	ldi	r26, 0x20	; 32
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e4 e5       	ldi	r30, 0x54	; 84
    16a2:	fb e0       	ldi	r31, 0x0B	; 11
    16a4:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__prologue_saves__+0x18>
    16a8:	69 83       	std	Y+1, r22	; 0x01
    16aa:	7a 83       	std	Y+2, r23	; 0x02
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	2d 83       	std	Y+5, r18	; 0x05
    16b2:	3e 83       	std	Y+6, r19	; 0x06
    16b4:	4f 83       	std	Y+7, r20	; 0x07
    16b6:	58 87       	std	Y+8, r21	; 0x08
    16b8:	f9 e0       	ldi	r31, 0x09	; 9
    16ba:	ef 2e       	mov	r14, r31
    16bc:	f1 2c       	mov	r15, r1
    16be:	ec 0e       	add	r14, r28
    16c0:	fd 1e       	adc	r15, r29
    16c2:	ce 01       	movw	r24, r28
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	b7 01       	movw	r22, r14
    16c8:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    16cc:	8e 01       	movw	r16, r28
    16ce:	0f 5e       	subi	r16, 0xEF	; 239
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	ce 01       	movw	r24, r28
    16d4:	05 96       	adiw	r24, 0x05	; 5
    16d6:	b8 01       	movw	r22, r16
    16d8:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    16dc:	c7 01       	movw	r24, r14
    16de:	b8 01       	movw	r22, r16
    16e0:	ae 01       	movw	r20, r28
    16e2:	47 5e       	subi	r20, 0xE7	; 231
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_fpadd_parts>
    16ea:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    16ee:	a0 96       	adiw	r28, 0x20	; 32
    16f0:	e6 e0       	ldi	r30, 0x06	; 6
    16f2:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__+0x18>

000016f6 <__mulsf3>:
    16f6:	a0 e2       	ldi	r26, 0x20	; 32
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e1 e8       	ldi	r30, 0x81	; 129
    16fc:	fb e0       	ldi	r31, 0x0B	; 11
    16fe:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__prologue_saves__>
    1702:	69 83       	std	Y+1, r22	; 0x01
    1704:	7a 83       	std	Y+2, r23	; 0x02
    1706:	8b 83       	std	Y+3, r24	; 0x03
    1708:	9c 83       	std	Y+4, r25	; 0x04
    170a:	2d 83       	std	Y+5, r18	; 0x05
    170c:	3e 83       	std	Y+6, r19	; 0x06
    170e:	4f 83       	std	Y+7, r20	; 0x07
    1710:	58 87       	std	Y+8, r21	; 0x08
    1712:	ce 01       	movw	r24, r28
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	be 01       	movw	r22, r28
    1718:	67 5f       	subi	r22, 0xF7	; 247
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    1720:	ce 01       	movw	r24, r28
    1722:	05 96       	adiw	r24, 0x05	; 5
    1724:	be 01       	movw	r22, r28
    1726:	6f 5e       	subi	r22, 0xEF	; 239
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    172e:	99 85       	ldd	r25, Y+9	; 0x09
    1730:	92 30       	cpi	r25, 0x02	; 2
    1732:	88 f0       	brcs	.+34     	; 0x1756 <__mulsf3+0x60>
    1734:	89 89       	ldd	r24, Y+17	; 0x11
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	c8 f0       	brcs	.+50     	; 0x176c <__mulsf3+0x76>
    173a:	94 30       	cpi	r25, 0x04	; 4
    173c:	19 f4       	brne	.+6      	; 0x1744 <__mulsf3+0x4e>
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	51 f4       	brne	.+20     	; 0x1756 <__mulsf3+0x60>
    1742:	04 c0       	rjmp	.+8      	; 0x174c <__mulsf3+0x56>
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	29 f4       	brne	.+10     	; 0x1752 <__mulsf3+0x5c>
    1748:	92 30       	cpi	r25, 0x02	; 2
    174a:	81 f4       	brne	.+32     	; 0x176c <__mulsf3+0x76>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	c6 c0       	rjmp	.+396    	; 0x18de <__mulsf3+0x1e8>
    1752:	92 30       	cpi	r25, 0x02	; 2
    1754:	49 f4       	brne	.+18     	; 0x1768 <__mulsf3+0x72>
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	9a 85       	ldd	r25, Y+10	; 0x0a
    175a:	8a 89       	ldd	r24, Y+18	; 0x12
    175c:	98 13       	cpse	r25, r24
    175e:	21 e0       	ldi	r18, 0x01	; 1
    1760:	2a 87       	std	Y+10, r18	; 0x0a
    1762:	ce 01       	movw	r24, r28
    1764:	09 96       	adiw	r24, 0x09	; 9
    1766:	bb c0       	rjmp	.+374    	; 0x18de <__mulsf3+0x1e8>
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	49 f4       	brne	.+18     	; 0x177e <__mulsf3+0x88>
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	8a 89       	ldd	r24, Y+18	; 0x12
    1772:	98 13       	cpse	r25, r24
    1774:	21 e0       	ldi	r18, 0x01	; 1
    1776:	2a 8b       	std	Y+18, r18	; 0x12
    1778:	ce 01       	movw	r24, r28
    177a:	41 96       	adiw	r24, 0x11	; 17
    177c:	b0 c0       	rjmp	.+352    	; 0x18de <__mulsf3+0x1e8>
    177e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1780:	3e 84       	ldd	r3, Y+14	; 0x0e
    1782:	4f 84       	ldd	r4, Y+15	; 0x0f
    1784:	58 88       	ldd	r5, Y+16	; 0x10
    1786:	6d 88       	ldd	r6, Y+21	; 0x15
    1788:	7e 88       	ldd	r7, Y+22	; 0x16
    178a:	8f 88       	ldd	r8, Y+23	; 0x17
    178c:	98 8c       	ldd	r9, Y+24	; 0x18
    178e:	ee 24       	eor	r14, r14
    1790:	ff 24       	eor	r15, r15
    1792:	87 01       	movw	r16, r14
    1794:	aa 24       	eor	r10, r10
    1796:	bb 24       	eor	r11, r11
    1798:	65 01       	movw	r12, r10
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	e0 e0       	ldi	r30, 0x00	; 0
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	c1 01       	movw	r24, r2
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	90 70       	andi	r25, 0x00	; 0
    17ac:	89 2b       	or	r24, r25
    17ae:	e9 f0       	breq	.+58     	; 0x17ea <__mulsf3+0xf4>
    17b0:	e6 0c       	add	r14, r6
    17b2:	f7 1c       	adc	r15, r7
    17b4:	08 1d       	adc	r16, r8
    17b6:	19 1d       	adc	r17, r9
    17b8:	9a 01       	movw	r18, r20
    17ba:	ab 01       	movw	r20, r22
    17bc:	2a 0d       	add	r18, r10
    17be:	3b 1d       	adc	r19, r11
    17c0:	4c 1d       	adc	r20, r12
    17c2:	5d 1d       	adc	r21, r13
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e6 14       	cp	r14, r6
    17ce:	f7 04       	cpc	r15, r7
    17d0:	08 05       	cpc	r16, r8
    17d2:	19 05       	cpc	r17, r9
    17d4:	20 f4       	brcc	.+8      	; 0x17de <__mulsf3+0xe8>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ba 01       	movw	r22, r20
    17e0:	a9 01       	movw	r20, r18
    17e2:	48 0f       	add	r20, r24
    17e4:	59 1f       	adc	r21, r25
    17e6:	6a 1f       	adc	r22, r26
    17e8:	7b 1f       	adc	r23, r27
    17ea:	aa 0c       	add	r10, r10
    17ec:	bb 1c       	adc	r11, r11
    17ee:	cc 1c       	adc	r12, r12
    17f0:	dd 1c       	adc	r13, r13
    17f2:	97 fe       	sbrs	r9, 7
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <__mulsf3+0x110>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e0       	ldi	r26, 0x00	; 0
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	a8 2a       	or	r10, r24
    1800:	b9 2a       	or	r11, r25
    1802:	ca 2a       	or	r12, r26
    1804:	db 2a       	or	r13, r27
    1806:	31 96       	adiw	r30, 0x01	; 1
    1808:	e0 32       	cpi	r30, 0x20	; 32
    180a:	f1 05       	cpc	r31, r1
    180c:	49 f0       	breq	.+18     	; 0x1820 <__mulsf3+0x12a>
    180e:	66 0c       	add	r6, r6
    1810:	77 1c       	adc	r7, r7
    1812:	88 1c       	adc	r8, r8
    1814:	99 1c       	adc	r9, r9
    1816:	56 94       	lsr	r5
    1818:	47 94       	ror	r4
    181a:	37 94       	ror	r3
    181c:	27 94       	ror	r2
    181e:	c3 cf       	rjmp	.-122    	; 0x17a6 <__mulsf3+0xb0>
    1820:	fa 85       	ldd	r31, Y+10	; 0x0a
    1822:	ea 89       	ldd	r30, Y+18	; 0x12
    1824:	2b 89       	ldd	r18, Y+19	; 0x13
    1826:	3c 89       	ldd	r19, Y+20	; 0x14
    1828:	8b 85       	ldd	r24, Y+11	; 0x0b
    182a:	9c 85       	ldd	r25, Y+12	; 0x0c
    182c:	28 0f       	add	r18, r24
    182e:	39 1f       	adc	r19, r25
    1830:	2e 5f       	subi	r18, 0xFE	; 254
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	17 c0       	rjmp	.+46     	; 0x1864 <__mulsf3+0x16e>
    1836:	ca 01       	movw	r24, r20
    1838:	81 70       	andi	r24, 0x01	; 1
    183a:	90 70       	andi	r25, 0x00	; 0
    183c:	89 2b       	or	r24, r25
    183e:	61 f0       	breq	.+24     	; 0x1858 <__mulsf3+0x162>
    1840:	16 95       	lsr	r17
    1842:	07 95       	ror	r16
    1844:	f7 94       	ror	r15
    1846:	e7 94       	ror	r14
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	b0 e8       	ldi	r27, 0x80	; 128
    1850:	e8 2a       	or	r14, r24
    1852:	f9 2a       	or	r15, r25
    1854:	0a 2b       	or	r16, r26
    1856:	1b 2b       	or	r17, r27
    1858:	76 95       	lsr	r23
    185a:	67 95       	ror	r22
    185c:	57 95       	ror	r21
    185e:	47 95       	ror	r20
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	77 fd       	sbrc	r23, 7
    1866:	e7 cf       	rjmp	.-50     	; 0x1836 <__mulsf3+0x140>
    1868:	0c c0       	rjmp	.+24     	; 0x1882 <__mulsf3+0x18c>
    186a:	44 0f       	add	r20, r20
    186c:	55 1f       	adc	r21, r21
    186e:	66 1f       	adc	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	17 fd       	sbrc	r17, 7
    1874:	41 60       	ori	r20, 0x01	; 1
    1876:	ee 0c       	add	r14, r14
    1878:	ff 1c       	adc	r15, r15
    187a:	00 1f       	adc	r16, r16
    187c:	11 1f       	adc	r17, r17
    187e:	21 50       	subi	r18, 0x01	; 1
    1880:	30 40       	sbci	r19, 0x00	; 0
    1882:	40 30       	cpi	r20, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	59 07       	cpc	r21, r25
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	69 07       	cpc	r22, r25
    188c:	90 e4       	ldi	r25, 0x40	; 64
    188e:	79 07       	cpc	r23, r25
    1890:	60 f3       	brcs	.-40     	; 0x186a <__mulsf3+0x174>
    1892:	2b 8f       	std	Y+27, r18	; 0x1b
    1894:	3c 8f       	std	Y+28, r19	; 0x1c
    1896:	db 01       	movw	r26, r22
    1898:	ca 01       	movw	r24, r20
    189a:	8f 77       	andi	r24, 0x7F	; 127
    189c:	90 70       	andi	r25, 0x00	; 0
    189e:	a0 70       	andi	r26, 0x00	; 0
    18a0:	b0 70       	andi	r27, 0x00	; 0
    18a2:	80 34       	cpi	r24, 0x40	; 64
    18a4:	91 05       	cpc	r25, r1
    18a6:	a1 05       	cpc	r26, r1
    18a8:	b1 05       	cpc	r27, r1
    18aa:	61 f4       	brne	.+24     	; 0x18c4 <__mulsf3+0x1ce>
    18ac:	47 fd       	sbrc	r20, 7
    18ae:	0a c0       	rjmp	.+20     	; 0x18c4 <__mulsf3+0x1ce>
    18b0:	e1 14       	cp	r14, r1
    18b2:	f1 04       	cpc	r15, r1
    18b4:	01 05       	cpc	r16, r1
    18b6:	11 05       	cpc	r17, r1
    18b8:	29 f0       	breq	.+10     	; 0x18c4 <__mulsf3+0x1ce>
    18ba:	40 5c       	subi	r20, 0xC0	; 192
    18bc:	5f 4f       	sbci	r21, 0xFF	; 255
    18be:	6f 4f       	sbci	r22, 0xFF	; 255
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	40 78       	andi	r20, 0x80	; 128
    18c4:	1a 8e       	std	Y+26, r1	; 0x1a
    18c6:	fe 17       	cp	r31, r30
    18c8:	11 f0       	breq	.+4      	; 0x18ce <__mulsf3+0x1d8>
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	8a 8f       	std	Y+26, r24	; 0x1a
    18ce:	4d 8f       	std	Y+29, r20	; 0x1d
    18d0:	5e 8f       	std	Y+30, r21	; 0x1e
    18d2:	6f 8f       	std	Y+31, r22	; 0x1f
    18d4:	78 a3       	std	Y+32, r23	; 0x20
    18d6:	83 e0       	ldi	r24, 0x03	; 3
    18d8:	89 8f       	std	Y+25, r24	; 0x19
    18da:	ce 01       	movw	r24, r28
    18dc:	49 96       	adiw	r24, 0x19	; 25
    18de:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    18e2:	a0 96       	adiw	r28, 0x20	; 32
    18e4:	e2 e1       	ldi	r30, 0x12	; 18
    18e6:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__epilogue_restores__>

000018ea <__gtsf2>:
    18ea:	a8 e1       	ldi	r26, 0x18	; 24
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e7       	ldi	r30, 0x7B	; 123
    18f0:	fc e0       	ldi	r31, 0x0C	; 12
    18f2:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__prologue_saves__+0x18>
    18f6:	69 83       	std	Y+1, r22	; 0x01
    18f8:	7a 83       	std	Y+2, r23	; 0x02
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	9c 83       	std	Y+4, r25	; 0x04
    18fe:	2d 83       	std	Y+5, r18	; 0x05
    1900:	3e 83       	std	Y+6, r19	; 0x06
    1902:	4f 83       	std	Y+7, r20	; 0x07
    1904:	58 87       	std	Y+8, r21	; 0x08
    1906:	89 e0       	ldi	r24, 0x09	; 9
    1908:	e8 2e       	mov	r14, r24
    190a:	f1 2c       	mov	r15, r1
    190c:	ec 0e       	add	r14, r28
    190e:	fd 1e       	adc	r15, r29
    1910:	ce 01       	movw	r24, r28
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	b7 01       	movw	r22, r14
    1916:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    191a:	8e 01       	movw	r16, r28
    191c:	0f 5e       	subi	r16, 0xEF	; 239
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	ce 01       	movw	r24, r28
    1922:	05 96       	adiw	r24, 0x05	; 5
    1924:	b8 01       	movw	r22, r16
    1926:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	40 f0       	brcs	.+16     	; 0x1940 <__gtsf2+0x56>
    1930:	89 89       	ldd	r24, Y+17	; 0x11
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	28 f0       	brcs	.+10     	; 0x1940 <__gtsf2+0x56>
    1936:	c7 01       	movw	r24, r14
    1938:	b8 01       	movw	r22, r16
    193a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__fpcmp_parts_f>
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <__gtsf2+0x58>
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	68 96       	adiw	r28, 0x18	; 24
    1944:	e6 e0       	ldi	r30, 0x06	; 6
    1946:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__+0x18>

0000194a <__gesf2>:
    194a:	a8 e1       	ldi	r26, 0x18	; 24
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	eb ea       	ldi	r30, 0xAB	; 171
    1950:	fc e0       	ldi	r31, 0x0C	; 12
    1952:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__prologue_saves__+0x18>
    1956:	69 83       	std	Y+1, r22	; 0x01
    1958:	7a 83       	std	Y+2, r23	; 0x02
    195a:	8b 83       	std	Y+3, r24	; 0x03
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	2d 83       	std	Y+5, r18	; 0x05
    1960:	3e 83       	std	Y+6, r19	; 0x06
    1962:	4f 83       	std	Y+7, r20	; 0x07
    1964:	58 87       	std	Y+8, r21	; 0x08
    1966:	89 e0       	ldi	r24, 0x09	; 9
    1968:	e8 2e       	mov	r14, r24
    196a:	f1 2c       	mov	r15, r1
    196c:	ec 0e       	add	r14, r28
    196e:	fd 1e       	adc	r15, r29
    1970:	ce 01       	movw	r24, r28
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	b7 01       	movw	r22, r14
    1976:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    197a:	8e 01       	movw	r16, r28
    197c:	0f 5e       	subi	r16, 0xEF	; 239
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	ce 01       	movw	r24, r28
    1982:	05 96       	adiw	r24, 0x05	; 5
    1984:	b8 01       	movw	r22, r16
    1986:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	40 f0       	brcs	.+16     	; 0x19a0 <__gesf2+0x56>
    1990:	89 89       	ldd	r24, Y+17	; 0x11
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	28 f0       	brcs	.+10     	; 0x19a0 <__gesf2+0x56>
    1996:	c7 01       	movw	r24, r14
    1998:	b8 01       	movw	r22, r16
    199a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__fpcmp_parts_f>
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <__gesf2+0x58>
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	68 96       	adiw	r28, 0x18	; 24
    19a4:	e6 e0       	ldi	r30, 0x06	; 6
    19a6:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__+0x18>

000019aa <__ltsf2>:
    19aa:	a8 e1       	ldi	r26, 0x18	; 24
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	eb ed       	ldi	r30, 0xDB	; 219
    19b0:	fc e0       	ldi	r31, 0x0C	; 12
    19b2:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__prologue_saves__+0x18>
    19b6:	69 83       	std	Y+1, r22	; 0x01
    19b8:	7a 83       	std	Y+2, r23	; 0x02
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	2d 83       	std	Y+5, r18	; 0x05
    19c0:	3e 83       	std	Y+6, r19	; 0x06
    19c2:	4f 83       	std	Y+7, r20	; 0x07
    19c4:	58 87       	std	Y+8, r21	; 0x08
    19c6:	89 e0       	ldi	r24, 0x09	; 9
    19c8:	e8 2e       	mov	r14, r24
    19ca:	f1 2c       	mov	r15, r1
    19cc:	ec 0e       	add	r14, r28
    19ce:	fd 1e       	adc	r15, r29
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	b7 01       	movw	r22, r14
    19d6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    19da:	8e 01       	movw	r16, r28
    19dc:	0f 5e       	subi	r16, 0xEF	; 239
    19de:	1f 4f       	sbci	r17, 0xFF	; 255
    19e0:	ce 01       	movw	r24, r28
    19e2:	05 96       	adiw	r24, 0x05	; 5
    19e4:	b8 01       	movw	r22, r16
    19e6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    19ea:	89 85       	ldd	r24, Y+9	; 0x09
    19ec:	82 30       	cpi	r24, 0x02	; 2
    19ee:	40 f0       	brcs	.+16     	; 0x1a00 <__ltsf2+0x56>
    19f0:	89 89       	ldd	r24, Y+17	; 0x11
    19f2:	82 30       	cpi	r24, 0x02	; 2
    19f4:	28 f0       	brcs	.+10     	; 0x1a00 <__ltsf2+0x56>
    19f6:	c7 01       	movw	r24, r14
    19f8:	b8 01       	movw	r22, r16
    19fa:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__fpcmp_parts_f>
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <__ltsf2+0x58>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	68 96       	adiw	r28, 0x18	; 24
    1a04:	e6 e0       	ldi	r30, 0x06	; 6
    1a06:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__+0x18>

00001a0a <__lesf2>:
    1a0a:	a8 e1       	ldi	r26, 0x18	; 24
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	eb e0       	ldi	r30, 0x0B	; 11
    1a10:	fd e0       	ldi	r31, 0x0D	; 13
    1a12:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__prologue_saves__+0x18>
    1a16:	69 83       	std	Y+1, r22	; 0x01
    1a18:	7a 83       	std	Y+2, r23	; 0x02
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
    1a1c:	9c 83       	std	Y+4, r25	; 0x04
    1a1e:	2d 83       	std	Y+5, r18	; 0x05
    1a20:	3e 83       	std	Y+6, r19	; 0x06
    1a22:	4f 83       	std	Y+7, r20	; 0x07
    1a24:	58 87       	std	Y+8, r21	; 0x08
    1a26:	89 e0       	ldi	r24, 0x09	; 9
    1a28:	e8 2e       	mov	r14, r24
    1a2a:	f1 2c       	mov	r15, r1
    1a2c:	ec 0e       	add	r14, r28
    1a2e:	fd 1e       	adc	r15, r29
    1a30:	ce 01       	movw	r24, r28
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	b7 01       	movw	r22, r14
    1a36:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    1a3a:	8e 01       	movw	r16, r28
    1a3c:	0f 5e       	subi	r16, 0xEF	; 239
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	ce 01       	movw	r24, r28
    1a42:	05 96       	adiw	r24, 0x05	; 5
    1a44:	b8 01       	movw	r22, r16
    1a46:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    1a4a:	89 85       	ldd	r24, Y+9	; 0x09
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	40 f0       	brcs	.+16     	; 0x1a60 <__lesf2+0x56>
    1a50:	89 89       	ldd	r24, Y+17	; 0x11
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	28 f0       	brcs	.+10     	; 0x1a60 <__lesf2+0x56>
    1a56:	c7 01       	movw	r24, r14
    1a58:	b8 01       	movw	r22, r16
    1a5a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__fpcmp_parts_f>
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <__lesf2+0x58>
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	68 96       	adiw	r28, 0x18	; 24
    1a64:	e6 e0       	ldi	r30, 0x06	; 6
    1a66:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__+0x18>

00001a6a <__floatsisf>:
    1a6a:	a8 e0       	ldi	r26, 0x08	; 8
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	fd e0       	ldi	r31, 0x0D	; 13
    1a72:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__prologue_saves__+0x12>
    1a76:	9b 01       	movw	r18, r22
    1a78:	ac 01       	movw	r20, r24
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	da 01       	movw	r26, r20
    1a80:	c9 01       	movw	r24, r18
    1a82:	88 27       	eor	r24, r24
    1a84:	b7 fd       	sbrc	r27, 7
    1a86:	83 95       	inc	r24
    1a88:	99 27       	eor	r25, r25
    1a8a:	aa 27       	eor	r26, r26
    1a8c:	bb 27       	eor	r27, r27
    1a8e:	b8 2e       	mov	r11, r24
    1a90:	21 15       	cp	r18, r1
    1a92:	31 05       	cpc	r19, r1
    1a94:	41 05       	cpc	r20, r1
    1a96:	51 05       	cpc	r21, r1
    1a98:	19 f4       	brne	.+6      	; 0x1aa0 <__floatsisf+0x36>
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	3a c0       	rjmp	.+116    	; 0x1b14 <__floatsisf+0xaa>
    1aa0:	88 23       	and	r24, r24
    1aa2:	a9 f0       	breq	.+42     	; 0x1ace <__floatsisf+0x64>
    1aa4:	20 30       	cpi	r18, 0x00	; 0
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	38 07       	cpc	r19, r24
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	48 07       	cpc	r20, r24
    1aae:	80 e8       	ldi	r24, 0x80	; 128
    1ab0:	58 07       	cpc	r21, r24
    1ab2:	29 f4       	brne	.+10     	; 0x1abe <__floatsisf+0x54>
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	9f ec       	ldi	r25, 0xCF	; 207
    1abc:	30 c0       	rjmp	.+96     	; 0x1b1e <__floatsisf+0xb4>
    1abe:	ee 24       	eor	r14, r14
    1ac0:	ff 24       	eor	r15, r15
    1ac2:	87 01       	movw	r16, r14
    1ac4:	e2 1a       	sub	r14, r18
    1ac6:	f3 0a       	sbc	r15, r19
    1ac8:	04 0b       	sbc	r16, r20
    1aca:	15 0b       	sbc	r17, r21
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <__floatsisf+0x68>
    1ace:	79 01       	movw	r14, r18
    1ad0:	8a 01       	movw	r16, r20
    1ad2:	8e e1       	ldi	r24, 0x1E	; 30
    1ad4:	c8 2e       	mov	r12, r24
    1ad6:	d1 2c       	mov	r13, r1
    1ad8:	dc 82       	std	Y+4, r13	; 0x04
    1ada:	cb 82       	std	Y+3, r12	; 0x03
    1adc:	ed 82       	std	Y+5, r14	; 0x05
    1ade:	fe 82       	std	Y+6, r15	; 0x06
    1ae0:	0f 83       	std	Y+7, r16	; 0x07
    1ae2:	18 87       	std	Y+8, r17	; 0x08
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	b7 01       	movw	r22, r14
    1ae8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__clzsi2>
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	18 16       	cp	r1, r24
    1af0:	19 06       	cpc	r1, r25
    1af2:	84 f4       	brge	.+32     	; 0x1b14 <__floatsisf+0xaa>
    1af4:	08 2e       	mov	r0, r24
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <__floatsisf+0x96>
    1af8:	ee 0c       	add	r14, r14
    1afa:	ff 1c       	adc	r15, r15
    1afc:	00 1f       	adc	r16, r16
    1afe:	11 1f       	adc	r17, r17
    1b00:	0a 94       	dec	r0
    1b02:	d2 f7       	brpl	.-12     	; 0x1af8 <__floatsisf+0x8e>
    1b04:	ed 82       	std	Y+5, r14	; 0x05
    1b06:	fe 82       	std	Y+6, r15	; 0x06
    1b08:	0f 83       	std	Y+7, r16	; 0x07
    1b0a:	18 87       	std	Y+8, r17	; 0x08
    1b0c:	c8 1a       	sub	r12, r24
    1b0e:	d9 0a       	sbc	r13, r25
    1b10:	dc 82       	std	Y+4, r13	; 0x04
    1b12:	cb 82       	std	Y+3, r12	; 0x03
    1b14:	ba 82       	std	Y+2, r11	; 0x02
    1b16:	ce 01       	movw	r24, r28
    1b18:	01 96       	adiw	r24, 0x01	; 1
    1b1a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    1b1e:	28 96       	adiw	r28, 0x08	; 8
    1b20:	e9 e0       	ldi	r30, 0x09	; 9
    1b22:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__epilogue_restores__+0x12>

00001b26 <__fixsfsi>:
    1b26:	ac e0       	ldi	r26, 0x0C	; 12
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e9 e9       	ldi	r30, 0x99	; 153
    1b2c:	fd e0       	ldi	r31, 0x0D	; 13
    1b2e:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__prologue_saves__+0x20>
    1b32:	69 83       	std	Y+1, r22	; 0x01
    1b34:	7a 83       	std	Y+2, r23	; 0x02
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	be 01       	movw	r22, r28
    1b40:	6b 5f       	subi	r22, 0xFB	; 251
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__unpack_f>
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	82 30       	cpi	r24, 0x02	; 2
    1b4c:	61 f1       	breq	.+88     	; 0x1ba6 <__fixsfsi+0x80>
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	50 f1       	brcs	.+84     	; 0x1ba6 <__fixsfsi+0x80>
    1b52:	84 30       	cpi	r24, 0x04	; 4
    1b54:	21 f4       	brne	.+8      	; 0x1b5e <__fixsfsi+0x38>
    1b56:	8e 81       	ldd	r24, Y+6	; 0x06
    1b58:	88 23       	and	r24, r24
    1b5a:	51 f1       	breq	.+84     	; 0x1bb0 <__fixsfsi+0x8a>
    1b5c:	2e c0       	rjmp	.+92     	; 0x1bba <__fixsfsi+0x94>
    1b5e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b60:	38 85       	ldd	r19, Y+8	; 0x08
    1b62:	37 fd       	sbrc	r19, 7
    1b64:	20 c0       	rjmp	.+64     	; 0x1ba6 <__fixsfsi+0x80>
    1b66:	6e 81       	ldd	r22, Y+6	; 0x06
    1b68:	2f 31       	cpi	r18, 0x1F	; 31
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	1c f0       	brlt	.+6      	; 0x1b74 <__fixsfsi+0x4e>
    1b6e:	66 23       	and	r22, r22
    1b70:	f9 f0       	breq	.+62     	; 0x1bb0 <__fixsfsi+0x8a>
    1b72:	23 c0       	rjmp	.+70     	; 0x1bba <__fixsfsi+0x94>
    1b74:	8e e1       	ldi	r24, 0x1E	; 30
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	82 1b       	sub	r24, r18
    1b7a:	93 0b       	sbc	r25, r19
    1b7c:	29 85       	ldd	r18, Y+9	; 0x09
    1b7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b80:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b82:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__fixsfsi+0x68>
    1b86:	56 95       	lsr	r21
    1b88:	47 95       	ror	r20
    1b8a:	37 95       	ror	r19
    1b8c:	27 95       	ror	r18
    1b8e:	8a 95       	dec	r24
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__fixsfsi+0x60>
    1b92:	66 23       	and	r22, r22
    1b94:	b1 f0       	breq	.+44     	; 0x1bc2 <__fixsfsi+0x9c>
    1b96:	50 95       	com	r21
    1b98:	40 95       	com	r20
    1b9a:	30 95       	com	r19
    1b9c:	21 95       	neg	r18
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <__fixsfsi+0x9c>
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <__fixsfsi+0x9c>
    1bb0:	2f ef       	ldi	r18, 0xFF	; 255
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f ef       	ldi	r20, 0xFF	; 255
    1bb6:	5f e7       	ldi	r21, 0x7F	; 127
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <__fixsfsi+0x9c>
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	50 e8       	ldi	r21, 0x80	; 128
    1bc2:	b9 01       	movw	r22, r18
    1bc4:	ca 01       	movw	r24, r20
    1bc6:	2c 96       	adiw	r28, 0x0c	; 12
    1bc8:	e2 e0       	ldi	r30, 0x02	; 2
    1bca:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__epilogue_restores__+0x20>

00001bce <__floatunsisf>:
    1bce:	a8 e0       	ldi	r26, 0x08	; 8
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	ed ee       	ldi	r30, 0xED	; 237
    1bd4:	fd e0       	ldi	r31, 0x0D	; 13
    1bd6:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__+0x10>
    1bda:	7b 01       	movw	r14, r22
    1bdc:	8c 01       	movw	r16, r24
    1bde:	61 15       	cp	r22, r1
    1be0:	71 05       	cpc	r23, r1
    1be2:	81 05       	cpc	r24, r1
    1be4:	91 05       	cpc	r25, r1
    1be6:	19 f4       	brne	.+6      	; 0x1bee <__floatunsisf+0x20>
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	60 c0       	rjmp	.+192    	; 0x1cae <__floatunsisf+0xe0>
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	8e e1       	ldi	r24, 0x1E	; 30
    1bf4:	c8 2e       	mov	r12, r24
    1bf6:	d1 2c       	mov	r13, r1
    1bf8:	dc 82       	std	Y+4, r13	; 0x04
    1bfa:	cb 82       	std	Y+3, r12	; 0x03
    1bfc:	ed 82       	std	Y+5, r14	; 0x05
    1bfe:	fe 82       	std	Y+6, r15	; 0x06
    1c00:	0f 83       	std	Y+7, r16	; 0x07
    1c02:	18 87       	std	Y+8, r17	; 0x08
    1c04:	c8 01       	movw	r24, r16
    1c06:	b7 01       	movw	r22, r14
    1c08:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__clzsi2>
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	31 97       	sbiw	r30, 0x01	; 1
    1c10:	f7 ff       	sbrs	r31, 7
    1c12:	3b c0       	rjmp	.+118    	; 0x1c8a <__floatunsisf+0xbc>
    1c14:	22 27       	eor	r18, r18
    1c16:	33 27       	eor	r19, r19
    1c18:	2e 1b       	sub	r18, r30
    1c1a:	3f 0b       	sbc	r19, r31
    1c1c:	57 01       	movw	r10, r14
    1c1e:	68 01       	movw	r12, r16
    1c20:	02 2e       	mov	r0, r18
    1c22:	04 c0       	rjmp	.+8      	; 0x1c2c <__floatunsisf+0x5e>
    1c24:	d6 94       	lsr	r13
    1c26:	c7 94       	ror	r12
    1c28:	b7 94       	ror	r11
    1c2a:	a7 94       	ror	r10
    1c2c:	0a 94       	dec	r0
    1c2e:	d2 f7       	brpl	.-12     	; 0x1c24 <__floatunsisf+0x56>
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a0 e0       	ldi	r26, 0x00	; 0
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <__floatunsisf+0x7c>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	aa 1f       	adc	r26, r26
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	2a 95       	dec	r18
    1c4c:	d2 f7       	brpl	.-12     	; 0x1c42 <__floatunsisf+0x74>
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	a1 09       	sbc	r26, r1
    1c52:	b1 09       	sbc	r27, r1
    1c54:	8e 21       	and	r24, r14
    1c56:	9f 21       	and	r25, r15
    1c58:	a0 23       	and	r26, r16
    1c5a:	b1 23       	and	r27, r17
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	a1 05       	cpc	r26, r1
    1c60:	b1 05       	cpc	r27, r1
    1c62:	21 f0       	breq	.+8      	; 0x1c6c <__floatunsisf+0x9e>
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	4a 29       	or	r20, r10
    1c6e:	5b 29       	or	r21, r11
    1c70:	6c 29       	or	r22, r12
    1c72:	7d 29       	or	r23, r13
    1c74:	4d 83       	std	Y+5, r20	; 0x05
    1c76:	5e 83       	std	Y+6, r21	; 0x06
    1c78:	6f 83       	std	Y+7, r22	; 0x07
    1c7a:	78 87       	std	Y+8, r23	; 0x08
    1c7c:	8e e1       	ldi	r24, 0x1E	; 30
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	8e 1b       	sub	r24, r30
    1c82:	9f 0b       	sbc	r25, r31
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
    1c88:	12 c0       	rjmp	.+36     	; 0x1cae <__floatunsisf+0xe0>
    1c8a:	30 97       	sbiw	r30, 0x00	; 0
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <__floatunsisf+0xe0>
    1c8e:	0e 2e       	mov	r0, r30
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <__floatunsisf+0xcc>
    1c92:	ee 0c       	add	r14, r14
    1c94:	ff 1c       	adc	r15, r15
    1c96:	00 1f       	adc	r16, r16
    1c98:	11 1f       	adc	r17, r17
    1c9a:	0a 94       	dec	r0
    1c9c:	d2 f7       	brpl	.-12     	; 0x1c92 <__floatunsisf+0xc4>
    1c9e:	ed 82       	std	Y+5, r14	; 0x05
    1ca0:	fe 82       	std	Y+6, r15	; 0x06
    1ca2:	0f 83       	std	Y+7, r16	; 0x07
    1ca4:	18 87       	std	Y+8, r17	; 0x08
    1ca6:	ce 1a       	sub	r12, r30
    1ca8:	df 0a       	sbc	r13, r31
    1caa:	dc 82       	std	Y+4, r13	; 0x04
    1cac:	cb 82       	std	Y+3, r12	; 0x03
    1cae:	1a 82       	std	Y+2, r1	; 0x02
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__pack_f>
    1cb8:	28 96       	adiw	r28, 0x08	; 8
    1cba:	ea e0       	ldi	r30, 0x0A	; 10
    1cbc:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__+0x10>

00001cc0 <__clzsi2>:
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	7b 01       	movw	r14, r22
    1cca:	8c 01       	movw	r16, r24
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	e8 16       	cp	r14, r24
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	f8 06       	cpc	r15, r24
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	08 07       	cpc	r16, r24
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	18 07       	cpc	r17, r24
    1cdc:	88 f4       	brcc	.+34     	; 0x1d00 <__clzsi2+0x40>
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	e8 16       	cp	r14, r24
    1ce2:	f1 04       	cpc	r15, r1
    1ce4:	01 05       	cpc	r16, r1
    1ce6:	11 05       	cpc	r17, r1
    1ce8:	31 f0       	breq	.+12     	; 0x1cf6 <__clzsi2+0x36>
    1cea:	28 f0       	brcs	.+10     	; 0x1cf6 <__clzsi2+0x36>
    1cec:	88 e0       	ldi	r24, 0x08	; 8
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a0 e0       	ldi	r26, 0x00	; 0
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	17 c0       	rjmp	.+46     	; 0x1d24 <__clzsi2+0x64>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a0 e0       	ldi	r26, 0x00	; 0
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	12 c0       	rjmp	.+36     	; 0x1d24 <__clzsi2+0x64>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	e8 16       	cp	r14, r24
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	f8 06       	cpc	r15, r24
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	08 07       	cpc	r16, r24
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	18 07       	cpc	r17, r24
    1d10:	28 f0       	brcs	.+10     	; 0x1d1c <__clzsi2+0x5c>
    1d12:	88 e1       	ldi	r24, 0x18	; 24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	04 c0       	rjmp	.+8      	; 0x1d24 <__clzsi2+0x64>
    1d1c:	80 e1       	ldi	r24, 0x10	; 16
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a0 e0       	ldi	r26, 0x00	; 0
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	20 e2       	ldi	r18, 0x20	; 32
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	28 1b       	sub	r18, r24
    1d2e:	39 0b       	sbc	r19, r25
    1d30:	4a 0b       	sbc	r20, r26
    1d32:	5b 0b       	sbc	r21, r27
    1d34:	04 c0       	rjmp	.+8      	; 0x1d3e <__clzsi2+0x7e>
    1d36:	16 95       	lsr	r17
    1d38:	07 95       	ror	r16
    1d3a:	f7 94       	ror	r15
    1d3c:	e7 94       	ror	r14
    1d3e:	8a 95       	dec	r24
    1d40:	d2 f7       	brpl	.-12     	; 0x1d36 <__clzsi2+0x76>
    1d42:	f7 01       	movw	r30, r14
    1d44:	e8 5f       	subi	r30, 0xF8	; 248
    1d46:	fd 4f       	sbci	r31, 0xFD	; 253
    1d48:	80 81       	ld	r24, Z
    1d4a:	28 1b       	sub	r18, r24
    1d4c:	31 09       	sbc	r19, r1
    1d4e:	41 09       	sbc	r20, r1
    1d50:	51 09       	sbc	r21, r1
    1d52:	c9 01       	movw	r24, r18
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	ff 90       	pop	r15
    1d5a:	ef 90       	pop	r14
    1d5c:	08 95       	ret

00001d5e <__pack_f>:
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	fc 01       	movw	r30, r24
    1d6a:	e4 80       	ldd	r14, Z+4	; 0x04
    1d6c:	f5 80       	ldd	r15, Z+5	; 0x05
    1d6e:	06 81       	ldd	r16, Z+6	; 0x06
    1d70:	17 81       	ldd	r17, Z+7	; 0x07
    1d72:	d1 80       	ldd	r13, Z+1	; 0x01
    1d74:	80 81       	ld	r24, Z
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	48 f4       	brcc	.+18     	; 0x1d8c <__pack_f+0x2e>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e1       	ldi	r26, 0x10	; 16
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e8 2a       	or	r14, r24
    1d84:	f9 2a       	or	r15, r25
    1d86:	0a 2b       	or	r16, r26
    1d88:	1b 2b       	or	r17, r27
    1d8a:	a5 c0       	rjmp	.+330    	; 0x1ed6 <__pack_f+0x178>
    1d8c:	84 30       	cpi	r24, 0x04	; 4
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <__pack_f+0x34>
    1d90:	9f c0       	rjmp	.+318    	; 0x1ed0 <__pack_f+0x172>
    1d92:	82 30       	cpi	r24, 0x02	; 2
    1d94:	21 f4       	brne	.+8      	; 0x1d9e <__pack_f+0x40>
    1d96:	ee 24       	eor	r14, r14
    1d98:	ff 24       	eor	r15, r15
    1d9a:	87 01       	movw	r16, r14
    1d9c:	05 c0       	rjmp	.+10     	; 0x1da8 <__pack_f+0x4a>
    1d9e:	e1 14       	cp	r14, r1
    1da0:	f1 04       	cpc	r15, r1
    1da2:	01 05       	cpc	r16, r1
    1da4:	11 05       	cpc	r17, r1
    1da6:	19 f4       	brne	.+6      	; 0x1dae <__pack_f+0x50>
    1da8:	e0 e0       	ldi	r30, 0x00	; 0
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	96 c0       	rjmp	.+300    	; 0x1eda <__pack_f+0x17c>
    1dae:	62 81       	ldd	r22, Z+2	; 0x02
    1db0:	73 81       	ldd	r23, Z+3	; 0x03
    1db2:	9f ef       	ldi	r25, 0xFF	; 255
    1db4:	62 38       	cpi	r22, 0x82	; 130
    1db6:	79 07       	cpc	r23, r25
    1db8:	0c f0       	brlt	.+2      	; 0x1dbc <__pack_f+0x5e>
    1dba:	5b c0       	rjmp	.+182    	; 0x1e72 <__pack_f+0x114>
    1dbc:	22 e8       	ldi	r18, 0x82	; 130
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	26 1b       	sub	r18, r22
    1dc2:	37 0b       	sbc	r19, r23
    1dc4:	2a 31       	cpi	r18, 0x1A	; 26
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	2c f0       	brlt	.+10     	; 0x1dd4 <__pack_f+0x76>
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	2a c0       	rjmp	.+84     	; 0x1e28 <__pack_f+0xca>
    1dd4:	b8 01       	movw	r22, r16
    1dd6:	a7 01       	movw	r20, r14
    1dd8:	02 2e       	mov	r0, r18
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <__pack_f+0x86>
    1ddc:	76 95       	lsr	r23
    1dde:	67 95       	ror	r22
    1de0:	57 95       	ror	r21
    1de2:	47 95       	ror	r20
    1de4:	0a 94       	dec	r0
    1de6:	d2 f7       	brpl	.-12     	; 0x1ddc <__pack_f+0x7e>
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a0 e0       	ldi	r26, 0x00	; 0
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <__pack_f+0x9c>
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	aa 1f       	adc	r26, r26
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	2a 95       	dec	r18
    1dfc:	d2 f7       	brpl	.-12     	; 0x1df2 <__pack_f+0x94>
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	a1 09       	sbc	r26, r1
    1e02:	b1 09       	sbc	r27, r1
    1e04:	8e 21       	and	r24, r14
    1e06:	9f 21       	and	r25, r15
    1e08:	a0 23       	and	r26, r16
    1e0a:	b1 23       	and	r27, r17
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	a1 05       	cpc	r26, r1
    1e10:	b1 05       	cpc	r27, r1
    1e12:	21 f0       	breq	.+8      	; 0x1e1c <__pack_f+0xbe>
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	9a 01       	movw	r18, r20
    1e1e:	ab 01       	movw	r20, r22
    1e20:	28 2b       	or	r18, r24
    1e22:	39 2b       	or	r19, r25
    1e24:	4a 2b       	or	r20, r26
    1e26:	5b 2b       	or	r21, r27
    1e28:	da 01       	movw	r26, r20
    1e2a:	c9 01       	movw	r24, r18
    1e2c:	8f 77       	andi	r24, 0x7F	; 127
    1e2e:	90 70       	andi	r25, 0x00	; 0
    1e30:	a0 70       	andi	r26, 0x00	; 0
    1e32:	b0 70       	andi	r27, 0x00	; 0
    1e34:	80 34       	cpi	r24, 0x40	; 64
    1e36:	91 05       	cpc	r25, r1
    1e38:	a1 05       	cpc	r26, r1
    1e3a:	b1 05       	cpc	r27, r1
    1e3c:	39 f4       	brne	.+14     	; 0x1e4c <__pack_f+0xee>
    1e3e:	27 ff       	sbrs	r18, 7
    1e40:	09 c0       	rjmp	.+18     	; 0x1e54 <__pack_f+0xf6>
    1e42:	20 5c       	subi	r18, 0xC0	; 192
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	4f 4f       	sbci	r20, 0xFF	; 255
    1e48:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <__pack_f+0xf6>
    1e4c:	21 5c       	subi	r18, 0xC1	; 193
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	4f 4f       	sbci	r20, 0xFF	; 255
    1e52:	5f 4f       	sbci	r21, 0xFF	; 255
    1e54:	e0 e0       	ldi	r30, 0x00	; 0
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	20 30       	cpi	r18, 0x00	; 0
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	3a 07       	cpc	r19, r26
    1e5e:	a0 e0       	ldi	r26, 0x00	; 0
    1e60:	4a 07       	cpc	r20, r26
    1e62:	a0 e4       	ldi	r26, 0x40	; 64
    1e64:	5a 07       	cpc	r21, r26
    1e66:	10 f0       	brcs	.+4      	; 0x1e6c <__pack_f+0x10e>
    1e68:	e1 e0       	ldi	r30, 0x01	; 1
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	79 01       	movw	r14, r18
    1e6e:	8a 01       	movw	r16, r20
    1e70:	27 c0       	rjmp	.+78     	; 0x1ec0 <__pack_f+0x162>
    1e72:	60 38       	cpi	r22, 0x80	; 128
    1e74:	71 05       	cpc	r23, r1
    1e76:	64 f5       	brge	.+88     	; 0x1ed0 <__pack_f+0x172>
    1e78:	fb 01       	movw	r30, r22
    1e7a:	e1 58       	subi	r30, 0x81	; 129
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	d8 01       	movw	r26, r16
    1e80:	c7 01       	movw	r24, r14
    1e82:	8f 77       	andi	r24, 0x7F	; 127
    1e84:	90 70       	andi	r25, 0x00	; 0
    1e86:	a0 70       	andi	r26, 0x00	; 0
    1e88:	b0 70       	andi	r27, 0x00	; 0
    1e8a:	80 34       	cpi	r24, 0x40	; 64
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	a1 05       	cpc	r26, r1
    1e90:	b1 05       	cpc	r27, r1
    1e92:	39 f4       	brne	.+14     	; 0x1ea2 <__pack_f+0x144>
    1e94:	e7 fe       	sbrs	r14, 7
    1e96:	0d c0       	rjmp	.+26     	; 0x1eb2 <__pack_f+0x154>
    1e98:	80 e4       	ldi	r24, 0x40	; 64
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e0       	ldi	r26, 0x00	; 0
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <__pack_f+0x14c>
    1ea2:	8f e3       	ldi	r24, 0x3F	; 63
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a0 e0       	ldi	r26, 0x00	; 0
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e8 0e       	add	r14, r24
    1eac:	f9 1e       	adc	r15, r25
    1eae:	0a 1f       	adc	r16, r26
    1eb0:	1b 1f       	adc	r17, r27
    1eb2:	17 ff       	sbrs	r17, 7
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <__pack_f+0x162>
    1eb6:	16 95       	lsr	r17
    1eb8:	07 95       	ror	r16
    1eba:	f7 94       	ror	r15
    1ebc:	e7 94       	ror	r14
    1ebe:	31 96       	adiw	r30, 0x01	; 1
    1ec0:	87 e0       	ldi	r24, 0x07	; 7
    1ec2:	16 95       	lsr	r17
    1ec4:	07 95       	ror	r16
    1ec6:	f7 94       	ror	r15
    1ec8:	e7 94       	ror	r14
    1eca:	8a 95       	dec	r24
    1ecc:	d1 f7       	brne	.-12     	; 0x1ec2 <__pack_f+0x164>
    1ece:	05 c0       	rjmp	.+10     	; 0x1eda <__pack_f+0x17c>
    1ed0:	ee 24       	eor	r14, r14
    1ed2:	ff 24       	eor	r15, r15
    1ed4:	87 01       	movw	r16, r14
    1ed6:	ef ef       	ldi	r30, 0xFF	; 255
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	6e 2f       	mov	r22, r30
    1edc:	67 95       	ror	r22
    1ede:	66 27       	eor	r22, r22
    1ee0:	67 95       	ror	r22
    1ee2:	90 2f       	mov	r25, r16
    1ee4:	9f 77       	andi	r25, 0x7F	; 127
    1ee6:	d7 94       	ror	r13
    1ee8:	dd 24       	eor	r13, r13
    1eea:	d7 94       	ror	r13
    1eec:	8e 2f       	mov	r24, r30
    1eee:	86 95       	lsr	r24
    1ef0:	49 2f       	mov	r20, r25
    1ef2:	46 2b       	or	r20, r22
    1ef4:	58 2f       	mov	r21, r24
    1ef6:	5d 29       	or	r21, r13
    1ef8:	b7 01       	movw	r22, r14
    1efa:	ca 01       	movw	r24, r20
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	df 90       	pop	r13
    1f06:	08 95       	ret

00001f08 <__unpack_f>:
    1f08:	fc 01       	movw	r30, r24
    1f0a:	db 01       	movw	r26, r22
    1f0c:	40 81       	ld	r20, Z
    1f0e:	51 81       	ldd	r21, Z+1	; 0x01
    1f10:	22 81       	ldd	r18, Z+2	; 0x02
    1f12:	62 2f       	mov	r22, r18
    1f14:	6f 77       	andi	r22, 0x7F	; 127
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	22 1f       	adc	r18, r18
    1f1a:	22 27       	eor	r18, r18
    1f1c:	22 1f       	adc	r18, r18
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	89 2f       	mov	r24, r25
    1f22:	88 0f       	add	r24, r24
    1f24:	82 2b       	or	r24, r18
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	99 27       	eor	r25, r25
    1f2e:	99 1f       	adc	r25, r25
    1f30:	11 96       	adiw	r26, 0x01	; 1
    1f32:	9c 93       	st	X, r25
    1f34:	11 97       	sbiw	r26, 0x01	; 1
    1f36:	21 15       	cp	r18, r1
    1f38:	31 05       	cpc	r19, r1
    1f3a:	a9 f5       	brne	.+106    	; 0x1fa6 <__unpack_f+0x9e>
    1f3c:	41 15       	cp	r20, r1
    1f3e:	51 05       	cpc	r21, r1
    1f40:	61 05       	cpc	r22, r1
    1f42:	71 05       	cpc	r23, r1
    1f44:	11 f4       	brne	.+4      	; 0x1f4a <__unpack_f+0x42>
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	37 c0       	rjmp	.+110    	; 0x1fb8 <__unpack_f+0xb0>
    1f4a:	82 e8       	ldi	r24, 0x82	; 130
    1f4c:	9f ef       	ldi	r25, 0xFF	; 255
    1f4e:	13 96       	adiw	r26, 0x03	; 3
    1f50:	9c 93       	st	X, r25
    1f52:	8e 93       	st	-X, r24
    1f54:	12 97       	sbiw	r26, 0x02	; 2
    1f56:	9a 01       	movw	r18, r20
    1f58:	ab 01       	movw	r20, r22
    1f5a:	67 e0       	ldi	r22, 0x07	; 7
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	6a 95       	dec	r22
    1f66:	d1 f7       	brne	.-12     	; 0x1f5c <__unpack_f+0x54>
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	8c 93       	st	X, r24
    1f6c:	0d c0       	rjmp	.+26     	; 0x1f88 <__unpack_f+0x80>
    1f6e:	22 0f       	add	r18, r18
    1f70:	33 1f       	adc	r19, r19
    1f72:	44 1f       	adc	r20, r20
    1f74:	55 1f       	adc	r21, r21
    1f76:	12 96       	adiw	r26, 0x02	; 2
    1f78:	8d 91       	ld	r24, X+
    1f7a:	9c 91       	ld	r25, X
    1f7c:	13 97       	sbiw	r26, 0x03	; 3
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	13 96       	adiw	r26, 0x03	; 3
    1f82:	9c 93       	st	X, r25
    1f84:	8e 93       	st	-X, r24
    1f86:	12 97       	sbiw	r26, 0x02	; 2
    1f88:	20 30       	cpi	r18, 0x00	; 0
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	38 07       	cpc	r19, r24
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	48 07       	cpc	r20, r24
    1f92:	80 e4       	ldi	r24, 0x40	; 64
    1f94:	58 07       	cpc	r21, r24
    1f96:	58 f3       	brcs	.-42     	; 0x1f6e <__unpack_f+0x66>
    1f98:	14 96       	adiw	r26, 0x04	; 4
    1f9a:	2d 93       	st	X+, r18
    1f9c:	3d 93       	st	X+, r19
    1f9e:	4d 93       	st	X+, r20
    1fa0:	5c 93       	st	X, r21
    1fa2:	17 97       	sbiw	r26, 0x07	; 7
    1fa4:	08 95       	ret
    1fa6:	2f 3f       	cpi	r18, 0xFF	; 255
    1fa8:	31 05       	cpc	r19, r1
    1faa:	79 f4       	brne	.+30     	; 0x1fca <__unpack_f+0xc2>
    1fac:	41 15       	cp	r20, r1
    1fae:	51 05       	cpc	r21, r1
    1fb0:	61 05       	cpc	r22, r1
    1fb2:	71 05       	cpc	r23, r1
    1fb4:	19 f4       	brne	.+6      	; 0x1fbc <__unpack_f+0xb4>
    1fb6:	84 e0       	ldi	r24, 0x04	; 4
    1fb8:	8c 93       	st	X, r24
    1fba:	08 95       	ret
    1fbc:	64 ff       	sbrs	r22, 4
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <__unpack_f+0xbe>
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	8c 93       	st	X, r24
    1fc4:	12 c0       	rjmp	.+36     	; 0x1fea <__unpack_f+0xe2>
    1fc6:	1c 92       	st	X, r1
    1fc8:	10 c0       	rjmp	.+32     	; 0x1fea <__unpack_f+0xe2>
    1fca:	2f 57       	subi	r18, 0x7F	; 127
    1fcc:	30 40       	sbci	r19, 0x00	; 0
    1fce:	13 96       	adiw	r26, 0x03	; 3
    1fd0:	3c 93       	st	X, r19
    1fd2:	2e 93       	st	-X, r18
    1fd4:	12 97       	sbiw	r26, 0x02	; 2
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	8c 93       	st	X, r24
    1fda:	87 e0       	ldi	r24, 0x07	; 7
    1fdc:	44 0f       	add	r20, r20
    1fde:	55 1f       	adc	r21, r21
    1fe0:	66 1f       	adc	r22, r22
    1fe2:	77 1f       	adc	r23, r23
    1fe4:	8a 95       	dec	r24
    1fe6:	d1 f7       	brne	.-12     	; 0x1fdc <__unpack_f+0xd4>
    1fe8:	70 64       	ori	r23, 0x40	; 64
    1fea:	14 96       	adiw	r26, 0x04	; 4
    1fec:	4d 93       	st	X+, r20
    1fee:	5d 93       	st	X+, r21
    1ff0:	6d 93       	st	X+, r22
    1ff2:	7c 93       	st	X, r23
    1ff4:	17 97       	sbiw	r26, 0x07	; 7
    1ff6:	08 95       	ret

00001ff8 <__fpcmp_parts_f>:
    1ff8:	1f 93       	push	r17
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	fb 01       	movw	r30, r22
    1ffe:	9c 91       	ld	r25, X
    2000:	92 30       	cpi	r25, 0x02	; 2
    2002:	08 f4       	brcc	.+2      	; 0x2006 <__fpcmp_parts_f+0xe>
    2004:	47 c0       	rjmp	.+142    	; 0x2094 <__fpcmp_parts_f+0x9c>
    2006:	80 81       	ld	r24, Z
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	08 f4       	brcc	.+2      	; 0x200e <__fpcmp_parts_f+0x16>
    200c:	43 c0       	rjmp	.+134    	; 0x2094 <__fpcmp_parts_f+0x9c>
    200e:	94 30       	cpi	r25, 0x04	; 4
    2010:	51 f4       	brne	.+20     	; 0x2026 <__fpcmp_parts_f+0x2e>
    2012:	11 96       	adiw	r26, 0x01	; 1
    2014:	1c 91       	ld	r17, X
    2016:	84 30       	cpi	r24, 0x04	; 4
    2018:	99 f5       	brne	.+102    	; 0x2080 <__fpcmp_parts_f+0x88>
    201a:	81 81       	ldd	r24, Z+1	; 0x01
    201c:	68 2f       	mov	r22, r24
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	61 1b       	sub	r22, r17
    2022:	71 09       	sbc	r23, r1
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <__fpcmp_parts_f+0xac>
    2026:	84 30       	cpi	r24, 0x04	; 4
    2028:	21 f0       	breq	.+8      	; 0x2032 <__fpcmp_parts_f+0x3a>
    202a:	92 30       	cpi	r25, 0x02	; 2
    202c:	31 f4       	brne	.+12     	; 0x203a <__fpcmp_parts_f+0x42>
    202e:	82 30       	cpi	r24, 0x02	; 2
    2030:	b9 f1       	breq	.+110    	; 0x20a0 <__fpcmp_parts_f+0xa8>
    2032:	81 81       	ldd	r24, Z+1	; 0x01
    2034:	88 23       	and	r24, r24
    2036:	89 f1       	breq	.+98     	; 0x209a <__fpcmp_parts_f+0xa2>
    2038:	2d c0       	rjmp	.+90     	; 0x2094 <__fpcmp_parts_f+0x9c>
    203a:	11 96       	adiw	r26, 0x01	; 1
    203c:	1c 91       	ld	r17, X
    203e:	11 97       	sbiw	r26, 0x01	; 1
    2040:	82 30       	cpi	r24, 0x02	; 2
    2042:	f1 f0       	breq	.+60     	; 0x2080 <__fpcmp_parts_f+0x88>
    2044:	81 81       	ldd	r24, Z+1	; 0x01
    2046:	18 17       	cp	r17, r24
    2048:	d9 f4       	brne	.+54     	; 0x2080 <__fpcmp_parts_f+0x88>
    204a:	12 96       	adiw	r26, 0x02	; 2
    204c:	2d 91       	ld	r18, X+
    204e:	3c 91       	ld	r19, X
    2050:	13 97       	sbiw	r26, 0x03	; 3
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	82 17       	cp	r24, r18
    2058:	93 07       	cpc	r25, r19
    205a:	94 f0       	brlt	.+36     	; 0x2080 <__fpcmp_parts_f+0x88>
    205c:	28 17       	cp	r18, r24
    205e:	39 07       	cpc	r19, r25
    2060:	bc f0       	brlt	.+46     	; 0x2090 <__fpcmp_parts_f+0x98>
    2062:	14 96       	adiw	r26, 0x04	; 4
    2064:	8d 91       	ld	r24, X+
    2066:	9d 91       	ld	r25, X+
    2068:	0d 90       	ld	r0, X+
    206a:	bc 91       	ld	r27, X
    206c:	a0 2d       	mov	r26, r0
    206e:	24 81       	ldd	r18, Z+4	; 0x04
    2070:	35 81       	ldd	r19, Z+5	; 0x05
    2072:	46 81       	ldd	r20, Z+6	; 0x06
    2074:	57 81       	ldd	r21, Z+7	; 0x07
    2076:	28 17       	cp	r18, r24
    2078:	39 07       	cpc	r19, r25
    207a:	4a 07       	cpc	r20, r26
    207c:	5b 07       	cpc	r21, r27
    207e:	18 f4       	brcc	.+6      	; 0x2086 <__fpcmp_parts_f+0x8e>
    2080:	11 23       	and	r17, r17
    2082:	41 f0       	breq	.+16     	; 0x2094 <__fpcmp_parts_f+0x9c>
    2084:	0a c0       	rjmp	.+20     	; 0x209a <__fpcmp_parts_f+0xa2>
    2086:	82 17       	cp	r24, r18
    2088:	93 07       	cpc	r25, r19
    208a:	a4 07       	cpc	r26, r20
    208c:	b5 07       	cpc	r27, r21
    208e:	40 f4       	brcc	.+16     	; 0x20a0 <__fpcmp_parts_f+0xa8>
    2090:	11 23       	and	r17, r17
    2092:	19 f0       	breq	.+6      	; 0x209a <__fpcmp_parts_f+0xa2>
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	05 c0       	rjmp	.+10     	; 0x20a4 <__fpcmp_parts_f+0xac>
    209a:	6f ef       	ldi	r22, 0xFF	; 255
    209c:	7f ef       	ldi	r23, 0xFF	; 255
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <__fpcmp_parts_f+0xac>
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	cb 01       	movw	r24, r22
    20a6:	1f 91       	pop	r17
    20a8:	08 95       	ret

000020aa <__prologue_saves__>:
    20aa:	2f 92       	push	r2
    20ac:	3f 92       	push	r3
    20ae:	4f 92       	push	r4
    20b0:	5f 92       	push	r5
    20b2:	6f 92       	push	r6
    20b4:	7f 92       	push	r7
    20b6:	8f 92       	push	r8
    20b8:	9f 92       	push	r9
    20ba:	af 92       	push	r10
    20bc:	bf 92       	push	r11
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	ca 1b       	sub	r28, r26
    20d4:	db 0b       	sbc	r29, r27
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	19 94       	eijmp

000020e2 <__epilogue_restores__>:
    20e2:	2a 88       	ldd	r2, Y+18	; 0x12
    20e4:	39 88       	ldd	r3, Y+17	; 0x11
    20e6:	48 88       	ldd	r4, Y+16	; 0x10
    20e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    20ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    20ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    20f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    20f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    20f4:	b9 84       	ldd	r11, Y+9	; 0x09
    20f6:	c8 84       	ldd	r12, Y+8	; 0x08
    20f8:	df 80       	ldd	r13, Y+7	; 0x07
    20fa:	ee 80       	ldd	r14, Y+6	; 0x06
    20fc:	fd 80       	ldd	r15, Y+5	; 0x05
    20fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2100:	1b 81       	ldd	r17, Y+3	; 0x03
    2102:	aa 81       	ldd	r26, Y+2	; 0x02
    2104:	b9 81       	ldd	r27, Y+1	; 0x01
    2106:	ce 0f       	add	r28, r30
    2108:	d1 1d       	adc	r29, r1
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	ed 01       	movw	r28, r26
    2116:	08 95       	ret

00002118 <_exit>:
    2118:	f8 94       	cli

0000211a <__stop_program>:
    211a:	ff cf       	rjmp	.-2      	; 0x211a <__stop_program>
