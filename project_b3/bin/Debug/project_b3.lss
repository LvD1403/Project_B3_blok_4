
bin\Debug\project_b3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00002f8e  00003042  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f8e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800308  00800308  0000314a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000314a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  0000314d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000463  00000000  00000000  0000336d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003042  00000000  00000000  000037d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001676  00000000  00000000  00006812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002246  00000000  00000000  00007e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  0000a0d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  0000a410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  0000a923  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b2b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__vector_13>
      38:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__vector_14>
      3c:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__vector_17>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__vector_21>
      58:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__vector_22>
      5c:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__vector_41>
      a8:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__vector_42>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e8       	ldi	r30, 0x8E	; 142
      fc:	ff e2       	ldi	r31, 0x2F	; 47
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 31       	cpi	r26, 0x1C	; 28
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "Header.h"



int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    init();
     132:	0e 94 a4 00 	call	0x148	; 0x148 <init>
    init_motor();
     136:	0e 94 51 10 	call	0x20a2	; 0x20a2 <init_motor>
   // rechte_lijnlinks();
    bocht_links();
     13a:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <bocht_links>
   // rechte_lijnbeide();
   // bocht_rechts();
   // rechte_lijnbeide();
   // bocht_links();
   // rechte_lijnrechts();
    return 0;
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
}
     142:	cf 91       	pop	r28
     144:	df 91       	pop	r29
     146:	08 95       	ret

00000148 <init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Header.h"

void init (void)
{
     148:	df 93       	push	r29
     14a:	cf 93       	push	r28
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
    DDRE |= (1 << PE3);     //pwm links 5
     150:	ad e2       	ldi	r26, 0x2D	; 45
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	ed e2       	ldi	r30, 0x2D	; 45
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	88 60       	ori	r24, 0x08	; 8
     15c:	8c 93       	st	X, r24
    DDRE |= (1 << PE4);     //pwm rechts 2
     15e:	ad e2       	ldi	r26, 0x2D	; 45
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ed e2       	ldi	r30, 0x2D	; 45
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	80 61       	ori	r24, 0x10	; 16
     16a:	8c 93       	st	X, r24
    DDRH |= (1 << PH4);     //lampje 7
     16c:	a1 e0       	ldi	r26, 0x01	; 1
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	e1 e0       	ldi	r30, 0x01	; 1
     172:	f1 e0       	ldi	r31, 0x01	; 1
     174:	80 81       	ld	r24, Z
     176:	80 61       	ori	r24, 0x10	; 16
     178:	8c 93       	st	X, r24
    DDRE |= (1 << PJ1);     //motorrichting links 14
     17a:	ad e2       	ldi	r26, 0x2D	; 45
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	ed e2       	ldi	r30, 0x2D	; 45
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	82 60       	ori	r24, 0x02	; 2
     186:	8c 93       	st	X, r24
    DDRE |= (1 << PJ0);     //motorrichting rechts 15
     188:	ad e2       	ldi	r26, 0x2D	; 45
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	ed e2       	ldi	r30, 0x2D	; 45
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	81 60       	ori	r24, 0x01	; 1
     194:	8c 93       	st	X, r24
    DDRA &= ~(1 << PD0);    //Nadering links 21
     196:	a1 e2       	ldi	r26, 0x21	; 33
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e1 e2       	ldi	r30, 0x21	; 33
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8e 7f       	andi	r24, 0xFE	; 254
     1a2:	8c 93       	st	X, r24
    DDRA &= ~(1 << PD1);    //Nadering rechts 20
     1a4:	a1 e2       	ldi	r26, 0x21	; 33
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e1 e2       	ldi	r30, 0x21	; 33
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8d 7f       	andi	r24, 0xFD	; 253
     1b0:	8c 93       	st	X, r24
    DDRL &= ~(1 << PL0);    //Ultrasoon echopin 49
     1b2:	aa e0       	ldi	r26, 0x0A	; 10
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	ea e0       	ldi	r30, 0x0A	; 10
     1b8:	f1 e0       	ldi	r31, 0x01	; 1
     1ba:	80 81       	ld	r24, Z
     1bc:	8e 7f       	andi	r24, 0xFE	; 254
     1be:	8c 93       	st	X, r24
    DDRC |=  (1 << PC5);    //Ultrasoon trigger 32
     1c0:	a7 e2       	ldi	r26, 0x27	; 39
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e7 e2       	ldi	r30, 0x27	; 39
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	80 62       	ori	r24, 0x20	; 32
     1cc:	8c 93       	st	X, r24
    DDRF &= ~(1 << PF7);    //Ir sensor Analoog 7 links
     1ce:	a0 e3       	ldi	r26, 0x30	; 48
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e0 e3       	ldi	r30, 0x30	; 48
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	8f 77       	andi	r24, 0x7F	; 127
     1da:	8c 93       	st	X, r24
    DDRF &= ~(1 << PF6);    //Ir sensor Analoog 6 rechts
     1dc:	a0 e3       	ldi	r26, 0x30	; 48
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e0 e3       	ldi	r30, 0x30	; 48
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7b       	andi	r24, 0xBF	; 191
     1e8:	8c 93       	st	X, r24
    DDRF &= ~(1 << PF0);    //Noodstop
     1ea:	a0 e3       	ldi	r26, 0x30	; 48
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e0 e3       	ldi	r30, 0x30	; 48
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8e 7f       	andi	r24, 0xFE	; 254
     1f6:	8c 93       	st	X, r24

}
     1f8:	cf 91       	pop	r28
     1fa:	df 91       	pop	r29
     1fc:	08 95       	ret

000001fe <rechte_lijnrechts>:

void rechte_lijnrechts(void)
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	cc 55       	subi	r28, 0x5C	; 92
     20c:	d0 40       	sbci	r29, 0x00	; 0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
    int vlag = 1;
     218:	fe 01       	movw	r30, r28
     21a:	e5 5a       	subi	r30, 0xA5	; 165
     21c:	ff 4f       	sbci	r31, 0xFF	; 255
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	91 83       	std	Z+1, r25	; 0x01
     224:	80 83       	st	Z, r24
    TCNT1 = 0;
     226:	e4 e8       	ldi	r30, 0x84	; 132
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	11 82       	std	Z+1, r1	; 0x01
     22c:	10 82       	st	Z, r1
    Grote_klok = 0;
     22e:	10 92 0f 03 	sts	0x030F, r1
     232:	10 92 0e 03 	sts	0x030E, r1
     236:	d5 c3       	rjmp	.+1962   	; 0x9e2 <rechte_lijnrechts+0x7e4>
    while (vlag) //(ultrasoon <= 37)
    {
        if  (!(PINF && (1 << PF0)))
     238:	ef e2       	ldi	r30, 0x2F	; 47
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	88 23       	and	r24, r24
     240:	a1 f0       	breq	.+40     	; 0x26a <rechte_lijnrechts+0x6c>
            _delay_ms(20);
            Grote_klok = waarde6;
        }
        else
        {
            if (ultrasoon > 20)
     242:	80 91 08 03 	lds	r24, 0x0308
     246:	90 91 09 03 	lds	r25, 0x0309
     24a:	a0 91 0a 03 	lds	r26, 0x030A
     24e:	b0 91 0b 03 	lds	r27, 0x030B
     252:	bc 01       	movw	r22, r24
     254:	cd 01       	movw	r24, r26
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 ea       	ldi	r20, 0xA0	; 160
     25c:	51 e4       	ldi	r21, 0x41	; 65
     25e:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     262:	18 16       	cp	r1, r24
     264:	0c f4       	brge	.+2      	; 0x268 <rechte_lijnrechts+0x6a>
     266:	ce c0       	rjmp	.+412    	; 0x404 <rechte_lijnrechts+0x206>
     268:	24 c3       	rjmp	.+1608   	; 0x8b2 <rechte_lijnrechts+0x6b4>
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
    {
        if  (!(PINF && (1 << PF0)))
        {
            motor(0,0);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
            int waarde6 = Grote_klok;
     276:	fe 01       	movw	r30, r28
     278:	e7 5a       	subi	r30, 0xA7	; 167
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	80 91 0e 03 	lds	r24, 0x030E
     280:	90 91 0f 03 	lds	r25, 0x030F
     284:	91 83       	std	Z+1, r25	; 0x01
     286:	80 83       	st	Z, r24
     288:	fe 01       	movw	r30, r28
     28a:	ef 5a       	subi	r30, 0xAF	; 175
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	a0 ea       	ldi	r26, 0xA0	; 160
     294:	b1 e4       	ldi	r27, 0x41	; 65
     296:	80 83       	st	Z, r24
     298:	91 83       	std	Z+1, r25	; 0x01
     29a:	a2 83       	std	Z+2, r26	; 0x02
     29c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     29e:	8e 01       	movw	r16, r28
     2a0:	03 5b       	subi	r16, 0xB3	; 179
     2a2:	1f 4f       	sbci	r17, 0xFF	; 255
     2a4:	fe 01       	movw	r30, r28
     2a6:	ef 5a       	subi	r30, 0xAF	; 175
     2a8:	ff 4f       	sbci	r31, 0xFF	; 255
     2aa:	60 81       	ld	r22, Z
     2ac:	71 81       	ldd	r23, Z+1	; 0x01
     2ae:	82 81       	ldd	r24, Z+2	; 0x02
     2b0:	93 81       	ldd	r25, Z+3	; 0x03
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	4a e7       	ldi	r20, 0x7A	; 122
     2b8:	55 e4       	ldi	r21, 0x45	; 69
     2ba:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     2be:	dc 01       	movw	r26, r24
     2c0:	cb 01       	movw	r24, r22
     2c2:	f8 01       	movw	r30, r16
     2c4:	80 83       	st	Z, r24
     2c6:	91 83       	std	Z+1, r25	; 0x01
     2c8:	a2 83       	std	Z+2, r26	; 0x02
     2ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     2cc:	fe 01       	movw	r30, r28
     2ce:	e3 5b       	subi	r30, 0xB3	; 179
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	60 81       	ld	r22, Z
     2d4:	71 81       	ldd	r23, Z+1	; 0x01
     2d6:	82 81       	ldd	r24, Z+2	; 0x02
     2d8:	93 81       	ldd	r25, Z+3	; 0x03
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	40 e8       	ldi	r20, 0x80	; 128
     2e0:	5f e3       	ldi	r21, 0x3F	; 63
     2e2:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     2e6:	88 23       	and	r24, r24
     2e8:	44 f4       	brge	.+16     	; 0x2fa <rechte_lijnrechts+0xfc>
		__ticks = 1;
     2ea:	fe 01       	movw	r30, r28
     2ec:	e5 5b       	subi	r30, 0xB5	; 181
     2ee:	ff 4f       	sbci	r31, 0xFF	; 255
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	91 83       	std	Z+1, r25	; 0x01
     2f6:	80 83       	st	Z, r24
     2f8:	64 c0       	rjmp	.+200    	; 0x3c2 <rechte_lijnrechts+0x1c4>
	else if (__tmp > 65535)
     2fa:	fe 01       	movw	r30, r28
     2fc:	e3 5b       	subi	r30, 0xB3	; 179
     2fe:	ff 4f       	sbci	r31, 0xFF	; 255
     300:	60 81       	ld	r22, Z
     302:	71 81       	ldd	r23, Z+1	; 0x01
     304:	82 81       	ldd	r24, Z+2	; 0x02
     306:	93 81       	ldd	r25, Z+3	; 0x03
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	3f ef       	ldi	r19, 0xFF	; 255
     30c:	4f e7       	ldi	r20, 0x7F	; 127
     30e:	57 e4       	ldi	r21, 0x47	; 71
     310:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     314:	18 16       	cp	r1, r24
     316:	0c f0       	brlt	.+2      	; 0x31a <rechte_lijnrechts+0x11c>
     318:	43 c0       	rjmp	.+134    	; 0x3a0 <rechte_lijnrechts+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     31a:	fe 01       	movw	r30, r28
     31c:	ef 5a       	subi	r30, 0xAF	; 175
     31e:	ff 4f       	sbci	r31, 0xFF	; 255
     320:	60 81       	ld	r22, Z
     322:	71 81       	ldd	r23, Z+1	; 0x01
     324:	82 81       	ldd	r24, Z+2	; 0x02
     326:	93 81       	ldd	r25, Z+3	; 0x03
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e2       	ldi	r20, 0x20	; 32
     32e:	51 e4       	ldi	r21, 0x41	; 65
     330:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	8e 01       	movw	r16, r28
     33a:	05 5b       	subi	r16, 0xB5	; 181
     33c:	1f 4f       	sbci	r17, 0xFF	; 255
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	f8 01       	movw	r30, r16
     34c:	91 83       	std	Z+1, r25	; 0x01
     34e:	80 83       	st	Z, r24
     350:	1f c0       	rjmp	.+62     	; 0x390 <rechte_lijnrechts+0x192>
     352:	fe 01       	movw	r30, r28
     354:	e7 5b       	subi	r30, 0xB7	; 183
     356:	ff 4f       	sbci	r31, 0xFF	; 255
     358:	80 e9       	ldi	r24, 0x90	; 144
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	91 83       	std	Z+1, r25	; 0x01
     35e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     360:	fe 01       	movw	r30, r28
     362:	e7 5b       	subi	r30, 0xB7	; 183
     364:	ff 4f       	sbci	r31, 0xFF	; 255
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <rechte_lijnrechts+0x16c>
     36e:	fe 01       	movw	r30, r28
     370:	e7 5b       	subi	r30, 0xB7	; 183
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	91 83       	std	Z+1, r25	; 0x01
     376:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     378:	de 01       	movw	r26, r28
     37a:	a5 5b       	subi	r26, 0xB5	; 181
     37c:	bf 4f       	sbci	r27, 0xFF	; 255
     37e:	fe 01       	movw	r30, r28
     380:	e5 5b       	subi	r30, 0xB5	; 181
     382:	ff 4f       	sbci	r31, 0xFF	; 255
     384:	80 81       	ld	r24, Z
     386:	91 81       	ldd	r25, Z+1	; 0x01
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	11 96       	adiw	r26, 0x01	; 1
     38c:	9c 93       	st	X, r25
     38e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     390:	fe 01       	movw	r30, r28
     392:	e5 5b       	subi	r30, 0xB5	; 181
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	80 81       	ld	r24, Z
     398:	91 81       	ldd	r25, Z+1	; 0x01
     39a:	00 97       	sbiw	r24, 0x00	; 0
     39c:	d1 f6       	brne	.-76     	; 0x352 <rechte_lijnrechts+0x154>
     39e:	28 c0       	rjmp	.+80     	; 0x3f0 <rechte_lijnrechts+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3a0:	8e 01       	movw	r16, r28
     3a2:	05 5b       	subi	r16, 0xB5	; 181
     3a4:	1f 4f       	sbci	r17, 0xFF	; 255
     3a6:	fe 01       	movw	r30, r28
     3a8:	e3 5b       	subi	r30, 0xB3	; 179
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	60 81       	ld	r22, Z
     3ae:	71 81       	ldd	r23, Z+1	; 0x01
     3b0:	82 81       	ldd	r24, Z+2	; 0x02
     3b2:	93 81       	ldd	r25, Z+3	; 0x03
     3b4:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	f8 01       	movw	r30, r16
     3be:	91 83       	std	Z+1, r25	; 0x01
     3c0:	80 83       	st	Z, r24
     3c2:	de 01       	movw	r26, r28
     3c4:	a9 5b       	subi	r26, 0xB9	; 185
     3c6:	bf 4f       	sbci	r27, 0xFF	; 255
     3c8:	fe 01       	movw	r30, r28
     3ca:	e5 5b       	subi	r30, 0xB5	; 181
     3cc:	ff 4f       	sbci	r31, 0xFF	; 255
     3ce:	80 81       	ld	r24, Z
     3d0:	91 81       	ldd	r25, Z+1	; 0x01
     3d2:	11 96       	adiw	r26, 0x01	; 1
     3d4:	9c 93       	st	X, r25
     3d6:	8e 93       	st	-X, r24
     3d8:	fe 01       	movw	r30, r28
     3da:	e9 5b       	subi	r30, 0xB9	; 185
     3dc:	ff 4f       	sbci	r31, 0xFF	; 255
     3de:	80 81       	ld	r24, Z
     3e0:	91 81       	ldd	r25, Z+1	; 0x01
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <rechte_lijnrechts+0x1e4>
     3e6:	fe 01       	movw	r30, r28
     3e8:	e9 5b       	subi	r30, 0xB9	; 185
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	91 83       	std	Z+1, r25	; 0x01
     3ee:	80 83       	st	Z, r24
            _delay_ms(20);
            Grote_klok = waarde6;
     3f0:	fe 01       	movw	r30, r28
     3f2:	e7 5a       	subi	r30, 0xA7	; 167
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	80 81       	ld	r24, Z
     3f8:	91 81       	ldd	r25, Z+1	; 0x01
     3fa:	90 93 0f 03 	sts	0x030F, r25
     3fe:	80 93 0e 03 	sts	0x030E, r24
     402:	ef c2       	rjmp	.+1502   	; 0x9e2 <rechte_lijnrechts+0x7e4>
        }
        else
        {
            if (ultrasoon > 20)
            {
                if (((Ir_links < 265))) //boomdectectie
     404:	80 91 10 03 	lds	r24, 0x0310
     408:	90 91 11 03 	lds	r25, 0x0311
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	89 30       	cpi	r24, 0x09	; 9
     410:	9f 07       	cpc	r25, r31
     412:	08 f0       	brcs	.+2      	; 0x416 <rechte_lijnrechts+0x218>
     414:	3d c1       	rjmp	.+634    	; 0x690 <rechte_lijnrechts+0x492>
                {
                    if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
     416:	e0 e2       	ldi	r30, 0x20	; 32
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	88 2f       	mov	r24, r24
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	81 70       	andi	r24, 0x01	; 1
     422:	90 70       	andi	r25, 0x00	; 0
     424:	00 97       	sbiw	r24, 0x00	; 0
     426:	79 f4       	brne	.+30     	; 0x446 <rechte_lijnrechts+0x248>
     428:	e0 e2       	ldi	r30, 0x20	; 32
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	88 2f       	mov	r24, r24
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	82 70       	andi	r24, 0x02	; 2
     434:	90 70       	andi	r25, 0x00	; 0
     436:	00 97       	sbiw	r24, 0x00	; 0
     438:	31 f4       	brne	.+12     	; 0x446 <rechte_lijnrechts+0x248>
                    {
                        motor(170,170);
     43a:	8a ea       	ldi	r24, 0xAA	; 170
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	6a ea       	ldi	r22, 0xAA	; 170
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
                    }
                    if (PINA &(1 << PA0))
     446:	e0 e2       	ldi	r30, 0x20	; 32
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	88 2f       	mov	r24, r24
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	81 70       	andi	r24, 0x01	; 1
     452:	90 70       	andi	r25, 0x00	; 0
     454:	88 23       	and	r24, r24
     456:	09 f4       	brne	.+2      	; 0x45a <rechte_lijnrechts+0x25c>
     458:	8b c0       	rjmp	.+278    	; 0x570 <rechte_lijnrechts+0x372>
                    {
                        motor (170,0);
     45a:	8a ea       	ldi	r24, 0xAA	; 170
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
     466:	fe 01       	movw	r30, r28
     468:	ed 5b       	subi	r30, 0xBD	; 189
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	a0 e2       	ldi	r26, 0x20	; 32
     472:	b2 e4       	ldi	r27, 0x42	; 66
     474:	80 83       	st	Z, r24
     476:	91 83       	std	Z+1, r25	; 0x01
     478:	a2 83       	std	Z+2, r26	; 0x02
     47a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     47c:	8e 01       	movw	r16, r28
     47e:	01 5c       	subi	r16, 0xC1	; 193
     480:	1f 4f       	sbci	r17, 0xFF	; 255
     482:	fe 01       	movw	r30, r28
     484:	ed 5b       	subi	r30, 0xBD	; 189
     486:	ff 4f       	sbci	r31, 0xFF	; 255
     488:	60 81       	ld	r22, Z
     48a:	71 81       	ldd	r23, Z+1	; 0x01
     48c:	82 81       	ldd	r24, Z+2	; 0x02
     48e:	93 81       	ldd	r25, Z+3	; 0x03
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	4a e7       	ldi	r20, 0x7A	; 122
     496:	55 e4       	ldi	r21, 0x45	; 69
     498:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	f8 01       	movw	r30, r16
     4a2:	80 83       	st	Z, r24
     4a4:	91 83       	std	Z+1, r25	; 0x01
     4a6:	a2 83       	std	Z+2, r26	; 0x02
     4a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4aa:	fe 01       	movw	r30, r28
     4ac:	ff 96       	adiw	r30, 0x3f	; 63
     4ae:	60 81       	ld	r22, Z
     4b0:	71 81       	ldd	r23, Z+1	; 0x01
     4b2:	82 81       	ldd	r24, Z+2	; 0x02
     4b4:	93 81       	ldd	r25, Z+3	; 0x03
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e8       	ldi	r20, 0x80	; 128
     4bc:	5f e3       	ldi	r21, 0x3F	; 63
     4be:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     4c2:	88 23       	and	r24, r24
     4c4:	2c f4       	brge	.+10     	; 0x4d0 <rechte_lijnrechts+0x2d2>
		__ticks = 1;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	9e af       	std	Y+62, r25	; 0x3e
     4cc:	8d af       	std	Y+61, r24	; 0x3d
     4ce:	46 c0       	rjmp	.+140    	; 0x55c <rechte_lijnrechts+0x35e>
	else if (__tmp > 65535)
     4d0:	fe 01       	movw	r30, r28
     4d2:	ff 96       	adiw	r30, 0x3f	; 63
     4d4:	60 81       	ld	r22, Z
     4d6:	71 81       	ldd	r23, Z+1	; 0x01
     4d8:	82 81       	ldd	r24, Z+2	; 0x02
     4da:	93 81       	ldd	r25, Z+3	; 0x03
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	3f ef       	ldi	r19, 0xFF	; 255
     4e0:	4f e7       	ldi	r20, 0x7F	; 127
     4e2:	57 e4       	ldi	r21, 0x47	; 71
     4e4:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     4e8:	18 16       	cp	r1, r24
     4ea:	64 f5       	brge	.+88     	; 0x544 <rechte_lijnrechts+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ec:	fe 01       	movw	r30, r28
     4ee:	ed 5b       	subi	r30, 0xBD	; 189
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	60 81       	ld	r22, Z
     4f4:	71 81       	ldd	r23, Z+1	; 0x01
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e2       	ldi	r20, 0x20	; 32
     500:	51 e4       	ldi	r21, 0x41	; 65
     502:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	bc 01       	movw	r22, r24
     50c:	cd 01       	movw	r24, r26
     50e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	9e af       	std	Y+62, r25	; 0x3e
     518:	8d af       	std	Y+61, r24	; 0x3d
     51a:	0f c0       	rjmp	.+30     	; 0x53a <rechte_lijnrechts+0x33c>
     51c:	80 e9       	ldi	r24, 0x90	; 144
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	9c af       	std	Y+60, r25	; 0x3c
     522:	8b af       	std	Y+59, r24	; 0x3b
     524:	8b ad       	ldd	r24, Y+59	; 0x3b
     526:	9c ad       	ldd	r25, Y+60	; 0x3c
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <rechte_lijnrechts+0x32a>
     52c:	9c af       	std	Y+60, r25	; 0x3c
     52e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     530:	8d ad       	ldd	r24, Y+61	; 0x3d
     532:	9e ad       	ldd	r25, Y+62	; 0x3e
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	9e af       	std	Y+62, r25	; 0x3e
     538:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     53a:	8d ad       	ldd	r24, Y+61	; 0x3d
     53c:	9e ad       	ldd	r25, Y+62	; 0x3e
     53e:	00 97       	sbiw	r24, 0x00	; 0
     540:	69 f7       	brne	.-38     	; 0x51c <rechte_lijnrechts+0x31e>
     542:	16 c0       	rjmp	.+44     	; 0x570 <rechte_lijnrechts+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     544:	fe 01       	movw	r30, r28
     546:	ff 96       	adiw	r30, 0x3f	; 63
     548:	60 81       	ld	r22, Z
     54a:	71 81       	ldd	r23, Z+1	; 0x01
     54c:	82 81       	ldd	r24, Z+2	; 0x02
     54e:	93 81       	ldd	r25, Z+3	; 0x03
     550:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	9e af       	std	Y+62, r25	; 0x3e
     55a:	8d af       	std	Y+61, r24	; 0x3d
     55c:	8d ad       	ldd	r24, Y+61	; 0x3d
     55e:	9e ad       	ldd	r25, Y+62	; 0x3e
     560:	9a af       	std	Y+58, r25	; 0x3a
     562:	89 af       	std	Y+57, r24	; 0x39
     564:	89 ad       	ldd	r24, Y+57	; 0x39
     566:	9a ad       	ldd	r25, Y+58	; 0x3a
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <rechte_lijnrechts+0x36a>
     56c:	9a af       	std	Y+58, r25	; 0x3a
     56e:	89 af       	std	Y+57, r24	; 0x39
                        _delay_ms(40);
                    }
                    if (PINA &(1 << PA1))
     570:	e0 e2       	ldi	r30, 0x20	; 32
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	82 70       	andi	r24, 0x02	; 2
     57c:	90 70       	andi	r25, 0x00	; 0
     57e:	00 97       	sbiw	r24, 0x00	; 0
     580:	09 f4       	brne	.+2      	; 0x584 <rechte_lijnrechts+0x386>
     582:	78 c0       	rjmp	.+240    	; 0x674 <rechte_lijnrechts+0x476>
                    {
                        motor (0,170);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	6a ea       	ldi	r22, 0xAA	; 170
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e2       	ldi	r26, 0x20	; 32
     596:	b2 e4       	ldi	r27, 0x42	; 66
     598:	8d ab       	std	Y+53, r24	; 0x35
     59a:	9e ab       	std	Y+54, r25	; 0x36
     59c:	af ab       	std	Y+55, r26	; 0x37
     59e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5a0:	6d a9       	ldd	r22, Y+53	; 0x35
     5a2:	7e a9       	ldd	r23, Y+54	; 0x36
     5a4:	8f a9       	ldd	r24, Y+55	; 0x37
     5a6:	98 ad       	ldd	r25, Y+56	; 0x38
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	4a e7       	ldi	r20, 0x7A	; 122
     5ae:	55 e4       	ldi	r21, 0x45	; 69
     5b0:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	89 ab       	std	Y+49, r24	; 0x31
     5ba:	9a ab       	std	Y+50, r25	; 0x32
     5bc:	ab ab       	std	Y+51, r26	; 0x33
     5be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     5c0:	69 a9       	ldd	r22, Y+49	; 0x31
     5c2:	7a a9       	ldd	r23, Y+50	; 0x32
     5c4:	8b a9       	ldd	r24, Y+51	; 0x33
     5c6:	9c a9       	ldd	r25, Y+52	; 0x34
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e8       	ldi	r20, 0x80	; 128
     5ce:	5f e3       	ldi	r21, 0x3F	; 63
     5d0:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     5d4:	88 23       	and	r24, r24
     5d6:	2c f4       	brge	.+10     	; 0x5e2 <rechte_lijnrechts+0x3e4>
		__ticks = 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	98 ab       	std	Y+48, r25	; 0x30
     5de:	8f a7       	std	Y+47, r24	; 0x2f
     5e0:	3f c0       	rjmp	.+126    	; 0x660 <rechte_lijnrechts+0x462>
	else if (__tmp > 65535)
     5e2:	69 a9       	ldd	r22, Y+49	; 0x31
     5e4:	7a a9       	ldd	r23, Y+50	; 0x32
     5e6:	8b a9       	ldd	r24, Y+51	; 0x33
     5e8:	9c a9       	ldd	r25, Y+52	; 0x34
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	3f ef       	ldi	r19, 0xFF	; 255
     5ee:	4f e7       	ldi	r20, 0x7F	; 127
     5f0:	57 e4       	ldi	r21, 0x47	; 71
     5f2:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     5f6:	18 16       	cp	r1, r24
     5f8:	4c f5       	brge	.+82     	; 0x64c <rechte_lijnrechts+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5fa:	6d a9       	ldd	r22, Y+53	; 0x35
     5fc:	7e a9       	ldd	r23, Y+54	; 0x36
     5fe:	8f a9       	ldd	r24, Y+55	; 0x37
     600:	98 ad       	ldd	r25, Y+56	; 0x38
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e2       	ldi	r20, 0x20	; 32
     608:	51 e4       	ldi	r21, 0x41	; 65
     60a:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	bc 01       	movw	r22, r24
     614:	cd 01       	movw	r24, r26
     616:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	98 ab       	std	Y+48, r25	; 0x30
     620:	8f a7       	std	Y+47, r24	; 0x2f
     622:	0f c0       	rjmp	.+30     	; 0x642 <rechte_lijnrechts+0x444>
     624:	80 e9       	ldi	r24, 0x90	; 144
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	9e a7       	std	Y+46, r25	; 0x2e
     62a:	8d a7       	std	Y+45, r24	; 0x2d
     62c:	8d a5       	ldd	r24, Y+45	; 0x2d
     62e:	9e a5       	ldd	r25, Y+46	; 0x2e
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <rechte_lijnrechts+0x432>
     634:	9e a7       	std	Y+46, r25	; 0x2e
     636:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     638:	8f a5       	ldd	r24, Y+47	; 0x2f
     63a:	98 a9       	ldd	r25, Y+48	; 0x30
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	98 ab       	std	Y+48, r25	; 0x30
     640:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     642:	8f a5       	ldd	r24, Y+47	; 0x2f
     644:	98 a9       	ldd	r25, Y+48	; 0x30
     646:	00 97       	sbiw	r24, 0x00	; 0
     648:	69 f7       	brne	.-38     	; 0x624 <rechte_lijnrechts+0x426>
     64a:	14 c0       	rjmp	.+40     	; 0x674 <rechte_lijnrechts+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     64c:	69 a9       	ldd	r22, Y+49	; 0x31
     64e:	7a a9       	ldd	r23, Y+50	; 0x32
     650:	8b a9       	ldd	r24, Y+51	; 0x33
     652:	9c a9       	ldd	r25, Y+52	; 0x34
     654:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	98 ab       	std	Y+48, r25	; 0x30
     65e:	8f a7       	std	Y+47, r24	; 0x2f
     660:	8f a5       	ldd	r24, Y+47	; 0x2f
     662:	98 a9       	ldd	r25, Y+48	; 0x30
     664:	9c a7       	std	Y+44, r25	; 0x2c
     666:	8b a7       	std	Y+43, r24	; 0x2b
     668:	8b a5       	ldd	r24, Y+43	; 0x2b
     66a:	9c a5       	ldd	r25, Y+44	; 0x2c
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <rechte_lijnrechts+0x46e>
     670:	9c a7       	std	Y+44, r25	; 0x2c
     672:	8b a7       	std	Y+43, r24	; 0x2b
                        _delay_ms(40);
                    }
                    if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
     674:	80 91 0e 03 	lds	r24, 0x030E
     678:	90 91 0f 03 	lds	r25, 0x030F
     67c:	84 3b       	cpi	r24, 0xB4	; 180
     67e:	91 05       	cpc	r25, r1
     680:	0c f4       	brge	.+2      	; 0x684 <rechte_lijnrechts+0x486>
     682:	af c1       	rjmp	.+862    	; 0x9e2 <rechte_lijnrechts+0x7e4>
                    {
                        vlag = 0;
     684:	fe 01       	movw	r30, r28
     686:	e5 5a       	subi	r30, 0xA5	; 165
     688:	ff 4f       	sbci	r31, 0xFF	; 255
     68a:	11 82       	std	Z+1, r1	; 0x01
     68c:	10 82       	st	Z, r1
     68e:	a9 c1       	rjmp	.+850    	; 0x9e2 <rechte_lijnrechts+0x7e4>
                    }
                }
                else
                {
                    int waarde = Grote_klok;
     690:	fe 01       	movw	r30, r28
     692:	e9 5a       	subi	r30, 0xA9	; 169
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	80 91 0e 03 	lds	r24, 0x030E
     69a:	90 91 0f 03 	lds	r25, 0x030F
     69e:	91 83       	std	Z+1, r25	; 0x01
     6a0:	80 83       	st	Z, r24
                    motor (0,0);
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
                    PORTH |=  (1 << PH4);
     6ae:	a2 e0       	ldi	r26, 0x02	; 2
     6b0:	b1 e0       	ldi	r27, 0x01	; 1
     6b2:	e2 e0       	ldi	r30, 0x02	; 2
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	80 81       	ld	r24, Z
     6b8:	80 61       	ori	r24, 0x10	; 16
     6ba:	8c 93       	st	X, r24
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	aa ef       	ldi	r26, 0xFA	; 250
     6c2:	b3 e4       	ldi	r27, 0x43	; 67
     6c4:	8f a3       	std	Y+39, r24	; 0x27
     6c6:	98 a7       	std	Y+40, r25	; 0x28
     6c8:	a9 a7       	std	Y+41, r26	; 0x29
     6ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6cc:	6f a1       	ldd	r22, Y+39	; 0x27
     6ce:	78 a5       	ldd	r23, Y+40	; 0x28
     6d0:	89 a5       	ldd	r24, Y+41	; 0x29
     6d2:	9a a5       	ldd	r25, Y+42	; 0x2a
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	4a e7       	ldi	r20, 0x7A	; 122
     6da:	55 e4       	ldi	r21, 0x45	; 69
     6dc:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	8b a3       	std	Y+35, r24	; 0x23
     6e6:	9c a3       	std	Y+36, r25	; 0x24
     6e8:	ad a3       	std	Y+37, r26	; 0x25
     6ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     6ec:	6b a1       	ldd	r22, Y+35	; 0x23
     6ee:	7c a1       	ldd	r23, Y+36	; 0x24
     6f0:	8d a1       	ldd	r24, Y+37	; 0x25
     6f2:	9e a1       	ldd	r25, Y+38	; 0x26
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e8       	ldi	r20, 0x80	; 128
     6fa:	5f e3       	ldi	r21, 0x3F	; 63
     6fc:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     700:	88 23       	and	r24, r24
     702:	2c f4       	brge	.+10     	; 0x70e <rechte_lijnrechts+0x510>
		__ticks = 1;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	9a a3       	std	Y+34, r25	; 0x22
     70a:	89 a3       	std	Y+33, r24	; 0x21
     70c:	3f c0       	rjmp	.+126    	; 0x78c <rechte_lijnrechts+0x58e>
	else if (__tmp > 65535)
     70e:	6b a1       	ldd	r22, Y+35	; 0x23
     710:	7c a1       	ldd	r23, Y+36	; 0x24
     712:	8d a1       	ldd	r24, Y+37	; 0x25
     714:	9e a1       	ldd	r25, Y+38	; 0x26
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	3f ef       	ldi	r19, 0xFF	; 255
     71a:	4f e7       	ldi	r20, 0x7F	; 127
     71c:	57 e4       	ldi	r21, 0x47	; 71
     71e:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     722:	18 16       	cp	r1, r24
     724:	4c f5       	brge	.+82     	; 0x778 <rechte_lijnrechts+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     726:	6f a1       	ldd	r22, Y+39	; 0x27
     728:	78 a5       	ldd	r23, Y+40	; 0x28
     72a:	89 a5       	ldd	r24, Y+41	; 0x29
     72c:	9a a5       	ldd	r25, Y+42	; 0x2a
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e2       	ldi	r20, 0x20	; 32
     734:	51 e4       	ldi	r21, 0x41	; 65
     736:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     73a:	dc 01       	movw	r26, r24
     73c:	cb 01       	movw	r24, r22
     73e:	bc 01       	movw	r22, r24
     740:	cd 01       	movw	r24, r26
     742:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	9a a3       	std	Y+34, r25	; 0x22
     74c:	89 a3       	std	Y+33, r24	; 0x21
     74e:	0f c0       	rjmp	.+30     	; 0x76e <rechte_lijnrechts+0x570>
     750:	80 e9       	ldi	r24, 0x90	; 144
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	98 a3       	std	Y+32, r25	; 0x20
     756:	8f 8f       	std	Y+31, r24	; 0x1f
     758:	8f 8d       	ldd	r24, Y+31	; 0x1f
     75a:	98 a1       	ldd	r25, Y+32	; 0x20
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <rechte_lijnrechts+0x55e>
     760:	98 a3       	std	Y+32, r25	; 0x20
     762:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     764:	89 a1       	ldd	r24, Y+33	; 0x21
     766:	9a a1       	ldd	r25, Y+34	; 0x22
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	9a a3       	std	Y+34, r25	; 0x22
     76c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76e:	89 a1       	ldd	r24, Y+33	; 0x21
     770:	9a a1       	ldd	r25, Y+34	; 0x22
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	69 f7       	brne	.-38     	; 0x750 <rechte_lijnrechts+0x552>
     776:	14 c0       	rjmp	.+40     	; 0x7a0 <rechte_lijnrechts+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     778:	6b a1       	ldd	r22, Y+35	; 0x23
     77a:	7c a1       	ldd	r23, Y+36	; 0x24
     77c:	8d a1       	ldd	r24, Y+37	; 0x25
     77e:	9e a1       	ldd	r25, Y+38	; 0x26
     780:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     784:	dc 01       	movw	r26, r24
     786:	cb 01       	movw	r24, r22
     788:	9a a3       	std	Y+34, r25	; 0x22
     78a:	89 a3       	std	Y+33, r24	; 0x21
     78c:	89 a1       	ldd	r24, Y+33	; 0x21
     78e:	9a a1       	ldd	r25, Y+34	; 0x22
     790:	9e 8f       	std	Y+30, r25	; 0x1e
     792:	8d 8f       	std	Y+29, r24	; 0x1d
     794:	8d 8d       	ldd	r24, Y+29	; 0x1d
     796:	9e 8d       	ldd	r25, Y+30	; 0x1e
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <rechte_lijnrechts+0x59a>
     79c:	9e 8f       	std	Y+30, r25	; 0x1e
     79e:	8d 8f       	std	Y+29, r24	; 0x1d
                    _delay_ms(500);
                    PORTH &= ~(1 << PH4);
     7a0:	a2 e0       	ldi	r26, 0x02	; 2
     7a2:	b1 e0       	ldi	r27, 0x01	; 1
     7a4:	e2 e0       	ldi	r30, 0x02	; 2
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	80 81       	ld	r24, Z
     7aa:	8f 7e       	andi	r24, 0xEF	; 239
     7ac:	8c 93       	st	X, r24
                    Grote_klok = waarde;
     7ae:	fe 01       	movw	r30, r28
     7b0:	e9 5a       	subi	r30, 0xA9	; 169
     7b2:	ff 4f       	sbci	r31, 0xFF	; 255
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	90 93 0f 03 	sts	0x030F, r25
     7bc:	80 93 0e 03 	sts	0x030E, r24
                    motor(170,170);
     7c0:	8a ea       	ldi	r24, 0xAA	; 170
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	6a ea       	ldi	r22, 0xAA	; 170
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	a8 ec       	ldi	r26, 0xC8	; 200
     7d2:	b2 e4       	ldi	r27, 0x42	; 66
     7d4:	89 8f       	std	Y+25, r24	; 0x19
     7d6:	9a 8f       	std	Y+26, r25	; 0x1a
     7d8:	ab 8f       	std	Y+27, r26	; 0x1b
     7da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7dc:	69 8d       	ldd	r22, Y+25	; 0x19
     7de:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	4a e7       	ldi	r20, 0x7A	; 122
     7ea:	55 e4       	ldi	r21, 0x45	; 69
     7ec:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	8d 8b       	std	Y+21, r24	; 0x15
     7f6:	9e 8b       	std	Y+22, r25	; 0x16
     7f8:	af 8b       	std	Y+23, r26	; 0x17
     7fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     7fc:	6d 89       	ldd	r22, Y+21	; 0x15
     7fe:	7e 89       	ldd	r23, Y+22	; 0x16
     800:	8f 89       	ldd	r24, Y+23	; 0x17
     802:	98 8d       	ldd	r25, Y+24	; 0x18
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e8       	ldi	r20, 0x80	; 128
     80a:	5f e3       	ldi	r21, 0x3F	; 63
     80c:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     810:	88 23       	and	r24, r24
     812:	2c f4       	brge	.+10     	; 0x81e <rechte_lijnrechts+0x620>
		__ticks = 1;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	9c 8b       	std	Y+20, r25	; 0x14
     81a:	8b 8b       	std	Y+19, r24	; 0x13
     81c:	3f c0       	rjmp	.+126    	; 0x89c <rechte_lijnrechts+0x69e>
	else if (__tmp > 65535)
     81e:	6d 89       	ldd	r22, Y+21	; 0x15
     820:	7e 89       	ldd	r23, Y+22	; 0x16
     822:	8f 89       	ldd	r24, Y+23	; 0x17
     824:	98 8d       	ldd	r25, Y+24	; 0x18
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	3f ef       	ldi	r19, 0xFF	; 255
     82a:	4f e7       	ldi	r20, 0x7F	; 127
     82c:	57 e4       	ldi	r21, 0x47	; 71
     82e:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     832:	18 16       	cp	r1, r24
     834:	4c f5       	brge	.+82     	; 0x888 <rechte_lijnrechts+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     836:	69 8d       	ldd	r22, Y+25	; 0x19
     838:	7a 8d       	ldd	r23, Y+26	; 0x1a
     83a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     83c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e2       	ldi	r20, 0x20	; 32
     844:	51 e4       	ldi	r21, 0x41	; 65
     846:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	9c 8b       	std	Y+20, r25	; 0x14
     85c:	8b 8b       	std	Y+19, r24	; 0x13
     85e:	0f c0       	rjmp	.+30     	; 0x87e <rechte_lijnrechts+0x680>
     860:	80 e9       	ldi	r24, 0x90	; 144
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	9a 8b       	std	Y+18, r25	; 0x12
     866:	89 8b       	std	Y+17, r24	; 0x11
     868:	89 89       	ldd	r24, Y+17	; 0x11
     86a:	9a 89       	ldd	r25, Y+18	; 0x12
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <rechte_lijnrechts+0x66e>
     870:	9a 8b       	std	Y+18, r25	; 0x12
     872:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     874:	8b 89       	ldd	r24, Y+19	; 0x13
     876:	9c 89       	ldd	r25, Y+20	; 0x14
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	9c 8b       	std	Y+20, r25	; 0x14
     87c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     87e:	8b 89       	ldd	r24, Y+19	; 0x13
     880:	9c 89       	ldd	r25, Y+20	; 0x14
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	69 f7       	brne	.-38     	; 0x860 <rechte_lijnrechts+0x662>
     886:	ad c0       	rjmp	.+346    	; 0x9e2 <rechte_lijnrechts+0x7e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     888:	6d 89       	ldd	r22, Y+21	; 0x15
     88a:	7e 89       	ldd	r23, Y+22	; 0x16
     88c:	8f 89       	ldd	r24, Y+23	; 0x17
     88e:	98 8d       	ldd	r25, Y+24	; 0x18
     890:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	9c 8b       	std	Y+20, r25	; 0x14
     89a:	8b 8b       	std	Y+19, r24	; 0x13
     89c:	8b 89       	ldd	r24, Y+19	; 0x13
     89e:	9c 89       	ldd	r25, Y+20	; 0x14
     8a0:	98 8b       	std	Y+16, r25	; 0x10
     8a2:	8f 87       	std	Y+15, r24	; 0x0f
     8a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     8a6:	98 89       	ldd	r25, Y+16	; 0x10
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <rechte_lijnrechts+0x6aa>
     8ac:	98 8b       	std	Y+16, r25	; 0x10
     8ae:	8f 87       	std	Y+15, r24	; 0x0f
     8b0:	98 c0       	rjmp	.+304    	; 0x9e2 <rechte_lijnrechts+0x7e4>
                    _delay_ms(100);
                }
            }
            else
            {
                int waarde = Grote_klok;
     8b2:	fe 01       	movw	r30, r28
     8b4:	eb 5a       	subi	r30, 0xAB	; 171
     8b6:	ff 4f       	sbci	r31, 0xFF	; 255
     8b8:	80 91 0e 03 	lds	r24, 0x030E
     8bc:	90 91 0f 03 	lds	r25, 0x030F
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	80 83       	st	Z, r24
                motor (0,0);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
                PORTH |=  (1 << PH4);
     8d0:	a2 e0       	ldi	r26, 0x02	; 2
     8d2:	b1 e0       	ldi	r27, 0x01	; 1
     8d4:	e2 e0       	ldi	r30, 0x02	; 2
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	80 81       	ld	r24, Z
     8da:	80 61       	ori	r24, 0x10	; 16
     8dc:	8c 93       	st	X, r24
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	aa ef       	ldi	r26, 0xFA	; 250
     8e4:	b3 e4       	ldi	r27, 0x43	; 67
     8e6:	8b 87       	std	Y+11, r24	; 0x0b
     8e8:	9c 87       	std	Y+12, r25	; 0x0c
     8ea:	ad 87       	std	Y+13, r26	; 0x0d
     8ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8ee:	6b 85       	ldd	r22, Y+11	; 0x0b
     8f0:	7c 85       	ldd	r23, Y+12	; 0x0c
     8f2:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f4:	9e 85       	ldd	r25, Y+14	; 0x0e
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	4a e7       	ldi	r20, 0x7A	; 122
     8fc:	55 e4       	ldi	r21, 0x45	; 69
     8fe:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	8f 83       	std	Y+7, r24	; 0x07
     908:	98 87       	std	Y+8, r25	; 0x08
     90a:	a9 87       	std	Y+9, r26	; 0x09
     90c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     90e:	6f 81       	ldd	r22, Y+7	; 0x07
     910:	78 85       	ldd	r23, Y+8	; 0x08
     912:	89 85       	ldd	r24, Y+9	; 0x09
     914:	9a 85       	ldd	r25, Y+10	; 0x0a
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	5f e3       	ldi	r21, 0x3F	; 63
     91e:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     922:	88 23       	and	r24, r24
     924:	2c f4       	brge	.+10     	; 0x930 <rechte_lijnrechts+0x732>
		__ticks = 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	9e 83       	std	Y+6, r25	; 0x06
     92c:	8d 83       	std	Y+5, r24	; 0x05
     92e:	3f c0       	rjmp	.+126    	; 0x9ae <rechte_lijnrechts+0x7b0>
	else if (__tmp > 65535)
     930:	6f 81       	ldd	r22, Y+7	; 0x07
     932:	78 85       	ldd	r23, Y+8	; 0x08
     934:	89 85       	ldd	r24, Y+9	; 0x09
     936:	9a 85       	ldd	r25, Y+10	; 0x0a
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	3f ef       	ldi	r19, 0xFF	; 255
     93c:	4f e7       	ldi	r20, 0x7F	; 127
     93e:	57 e4       	ldi	r21, 0x47	; 71
     940:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     944:	18 16       	cp	r1, r24
     946:	4c f5       	brge	.+82     	; 0x99a <rechte_lijnrechts+0x79c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     948:	6b 85       	ldd	r22, Y+11	; 0x0b
     94a:	7c 85       	ldd	r23, Y+12	; 0x0c
     94c:	8d 85       	ldd	r24, Y+13	; 0x0d
     94e:	9e 85       	ldd	r25, Y+14	; 0x0e
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e2       	ldi	r20, 0x20	; 32
     956:	51 e4       	ldi	r21, 0x41	; 65
     958:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     95c:	dc 01       	movw	r26, r24
     95e:	cb 01       	movw	r24, r22
     960:	bc 01       	movw	r22, r24
     962:	cd 01       	movw	r24, r26
     964:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	9e 83       	std	Y+6, r25	; 0x06
     96e:	8d 83       	std	Y+5, r24	; 0x05
     970:	0f c0       	rjmp	.+30     	; 0x990 <rechte_lijnrechts+0x792>
     972:	80 e9       	ldi	r24, 0x90	; 144
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	9c 83       	std	Y+4, r25	; 0x04
     978:	8b 83       	std	Y+3, r24	; 0x03
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <rechte_lijnrechts+0x780>
     982:	9c 83       	std	Y+4, r25	; 0x04
     984:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     986:	8d 81       	ldd	r24, Y+5	; 0x05
     988:	9e 81       	ldd	r25, Y+6	; 0x06
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	9e 83       	std	Y+6, r25	; 0x06
     98e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     990:	8d 81       	ldd	r24, Y+5	; 0x05
     992:	9e 81       	ldd	r25, Y+6	; 0x06
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	69 f7       	brne	.-38     	; 0x972 <rechte_lijnrechts+0x774>
     998:	14 c0       	rjmp	.+40     	; 0x9c2 <rechte_lijnrechts+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     99a:	6f 81       	ldd	r22, Y+7	; 0x07
     99c:	78 85       	ldd	r23, Y+8	; 0x08
     99e:	89 85       	ldd	r24, Y+9	; 0x09
     9a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a2:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	9e 83       	std	Y+6, r25	; 0x06
     9ac:	8d 83       	std	Y+5, r24	; 0x05
     9ae:	8d 81       	ldd	r24, Y+5	; 0x05
     9b0:	9e 81       	ldd	r25, Y+6	; 0x06
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <rechte_lijnrechts+0x7bc>
     9be:	9a 83       	std	Y+2, r25	; 0x02
     9c0:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(500);
                PORTH &= ~(1 << PH4);
     9c2:	a2 e0       	ldi	r26, 0x02	; 2
     9c4:	b1 e0       	ldi	r27, 0x01	; 1
     9c6:	e2 e0       	ldi	r30, 0x02	; 2
     9c8:	f1 e0       	ldi	r31, 0x01	; 1
     9ca:	80 81       	ld	r24, Z
     9cc:	8f 7e       	andi	r24, 0xEF	; 239
     9ce:	8c 93       	st	X, r24
                Grote_klok = waarde;
     9d0:	fe 01       	movw	r30, r28
     9d2:	eb 5a       	subi	r30, 0xAB	; 171
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	90 93 0f 03 	sts	0x030F, r25
     9de:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnrechts(void)
{
    int vlag = 1;
    TCNT1 = 0;
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
     9e2:	fe 01       	movw	r30, r28
     9e4:	e5 5a       	subi	r30, 0xA5	; 165
     9e6:	ff 4f       	sbci	r31, 0xFF	; 255
     9e8:	80 81       	ld	r24, Z
     9ea:	91 81       	ldd	r25, Z+1	; 0x01
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <rechte_lijnrechts+0x7f4>
     9f0:	23 cc       	rjmp	.-1978   	; 0x238 <rechte_lijnrechts+0x3a>
                PORTH &= ~(1 << PH4);
                Grote_klok = waarde;
            }
        }
    }
}
     9f2:	c4 5a       	subi	r28, 0xA4	; 164
     9f4:	df 4f       	sbci	r29, 0xFF	; 255
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	08 95       	ret

00000a0a <rechte_lijnlinks>:

void rechte_lijnlinks(void)
{
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	cc 55       	subi	r28, 0x5C	; 92
     a18:	d0 40       	sbci	r29, 0x00	; 0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
    int vlag = 1;
     a24:	fe 01       	movw	r30, r28
     a26:	e5 5a       	subi	r30, 0xA5	; 165
     a28:	ff 4f       	sbci	r31, 0xFF	; 255
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	80 83       	st	Z, r24
    TCNT1 = 0;
     a32:	e4 e8       	ldi	r30, 0x84	; 132
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	11 82       	std	Z+1, r1	; 0x01
     a38:	10 82       	st	Z, r1
    Grote_klok = 0;
     a3a:	10 92 0f 03 	sts	0x030F, r1
     a3e:	10 92 0e 03 	sts	0x030E, r1
     a42:	d5 c3       	rjmp	.+1962   	; 0x11ee <rechte_lijnlinks+0x7e4>
    while (vlag) //(ultrasoon <= 37)
    {
        if  (!(PINF && (1 << PF0)))
     a44:	ef e2       	ldi	r30, 0x2F	; 47
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	88 23       	and	r24, r24
     a4c:	a1 f0       	breq	.+40     	; 0xa76 <rechte_lijnlinks+0x6c>
            _delay_ms(20);
            Grote_klok = waarde6;
        }
        else
        {
            if (ultrasoon > 20)
     a4e:	80 91 08 03 	lds	r24, 0x0308
     a52:	90 91 09 03 	lds	r25, 0x0309
     a56:	a0 91 0a 03 	lds	r26, 0x030A
     a5a:	b0 91 0b 03 	lds	r27, 0x030B
     a5e:	bc 01       	movw	r22, r24
     a60:	cd 01       	movw	r24, r26
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 ea       	ldi	r20, 0xA0	; 160
     a68:	51 e4       	ldi	r21, 0x41	; 65
     a6a:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     a6e:	18 16       	cp	r1, r24
     a70:	0c f4       	brge	.+2      	; 0xa74 <rechte_lijnlinks+0x6a>
     a72:	ce c0       	rjmp	.+412    	; 0xc10 <rechte_lijnlinks+0x206>
     a74:	24 c3       	rjmp	.+1608   	; 0x10be <rechte_lijnlinks+0x6b4>
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
    {
        if  (!(PINF && (1 << PF0)))
        {
            motor(0,0);
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
            int waarde6 = Grote_klok;
     a82:	fe 01       	movw	r30, r28
     a84:	e7 5a       	subi	r30, 0xA7	; 167
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	80 91 0e 03 	lds	r24, 0x030E
     a8c:	90 91 0f 03 	lds	r25, 0x030F
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	80 83       	st	Z, r24
     a94:	fe 01       	movw	r30, r28
     a96:	ef 5a       	subi	r30, 0xAF	; 175
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 ea       	ldi	r26, 0xA0	; 160
     aa0:	b1 e4       	ldi	r27, 0x41	; 65
     aa2:	80 83       	st	Z, r24
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	a2 83       	std	Z+2, r26	; 0x02
     aa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aaa:	8e 01       	movw	r16, r28
     aac:	03 5b       	subi	r16, 0xB3	; 179
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	fe 01       	movw	r30, r28
     ab2:	ef 5a       	subi	r30, 0xAF	; 175
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	60 81       	ld	r22, Z
     ab8:	71 81       	ldd	r23, Z+1	; 0x01
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	93 81       	ldd	r25, Z+3	; 0x03
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	4a e7       	ldi	r20, 0x7A	; 122
     ac4:	55 e4       	ldi	r21, 0x45	; 69
     ac6:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     aca:	dc 01       	movw	r26, r24
     acc:	cb 01       	movw	r24, r22
     ace:	f8 01       	movw	r30, r16
     ad0:	80 83       	st	Z, r24
     ad2:	91 83       	std	Z+1, r25	; 0x01
     ad4:	a2 83       	std	Z+2, r26	; 0x02
     ad6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ad8:	fe 01       	movw	r30, r28
     ada:	e3 5b       	subi	r30, 0xB3	; 179
     adc:	ff 4f       	sbci	r31, 0xFF	; 255
     ade:	60 81       	ld	r22, Z
     ae0:	71 81       	ldd	r23, Z+1	; 0x01
     ae2:	82 81       	ldd	r24, Z+2	; 0x02
     ae4:	93 81       	ldd	r25, Z+3	; 0x03
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 e8       	ldi	r20, 0x80	; 128
     aec:	5f e3       	ldi	r21, 0x3F	; 63
     aee:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     af2:	88 23       	and	r24, r24
     af4:	44 f4       	brge	.+16     	; 0xb06 <rechte_lijnlinks+0xfc>
		__ticks = 1;
     af6:	fe 01       	movw	r30, r28
     af8:	e5 5b       	subi	r30, 0xB5	; 181
     afa:	ff 4f       	sbci	r31, 0xFF	; 255
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
     b04:	64 c0       	rjmp	.+200    	; 0xbce <rechte_lijnlinks+0x1c4>
	else if (__tmp > 65535)
     b06:	fe 01       	movw	r30, r28
     b08:	e3 5b       	subi	r30, 0xB3	; 179
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	60 81       	ld	r22, Z
     b0e:	71 81       	ldd	r23, Z+1	; 0x01
     b10:	82 81       	ldd	r24, Z+2	; 0x02
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	3f ef       	ldi	r19, 0xFF	; 255
     b18:	4f e7       	ldi	r20, 0x7F	; 127
     b1a:	57 e4       	ldi	r21, 0x47	; 71
     b1c:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     b20:	18 16       	cp	r1, r24
     b22:	0c f0       	brlt	.+2      	; 0xb26 <rechte_lijnlinks+0x11c>
     b24:	43 c0       	rjmp	.+134    	; 0xbac <rechte_lijnlinks+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b26:	fe 01       	movw	r30, r28
     b28:	ef 5a       	subi	r30, 0xAF	; 175
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	60 81       	ld	r22, Z
     b2e:	71 81       	ldd	r23, Z+1	; 0x01
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	93 81       	ldd	r25, Z+3	; 0x03
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e2       	ldi	r20, 0x20	; 32
     b3a:	51 e4       	ldi	r21, 0x41	; 65
     b3c:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	8e 01       	movw	r16, r28
     b46:	05 5b       	subi	r16, 0xB5	; 181
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
     b4a:	bc 01       	movw	r22, r24
     b4c:	cd 01       	movw	r24, r26
     b4e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     b52:	dc 01       	movw	r26, r24
     b54:	cb 01       	movw	r24, r22
     b56:	f8 01       	movw	r30, r16
     b58:	91 83       	std	Z+1, r25	; 0x01
     b5a:	80 83       	st	Z, r24
     b5c:	1f c0       	rjmp	.+62     	; 0xb9c <rechte_lijnlinks+0x192>
     b5e:	fe 01       	movw	r30, r28
     b60:	e7 5b       	subi	r30, 0xB7	; 183
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	80 e9       	ldi	r24, 0x90	; 144
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	91 83       	std	Z+1, r25	; 0x01
     b6a:	80 83       	st	Z, r24
     b6c:	fe 01       	movw	r30, r28
     b6e:	e7 5b       	subi	r30, 0xB7	; 183
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <rechte_lijnlinks+0x16c>
     b7a:	fe 01       	movw	r30, r28
     b7c:	e7 5b       	subi	r30, 0xB7	; 183
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	91 83       	std	Z+1, r25	; 0x01
     b82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b84:	de 01       	movw	r26, r28
     b86:	a5 5b       	subi	r26, 0xB5	; 181
     b88:	bf 4f       	sbci	r27, 0xFF	; 255
     b8a:	fe 01       	movw	r30, r28
     b8c:	e5 5b       	subi	r30, 0xB5	; 181
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	11 96       	adiw	r26, 0x01	; 1
     b98:	9c 93       	st	X, r25
     b9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9c:	fe 01       	movw	r30, r28
     b9e:	e5 5b       	subi	r30, 0xB5	; 181
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	d1 f6       	brne	.-76     	; 0xb5e <rechte_lijnlinks+0x154>
     baa:	28 c0       	rjmp	.+80     	; 0xbfc <rechte_lijnlinks+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bac:	8e 01       	movw	r16, r28
     bae:	05 5b       	subi	r16, 0xB5	; 181
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	fe 01       	movw	r30, r28
     bb4:	e3 5b       	subi	r30, 0xB3	; 179
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	60 81       	ld	r22, Z
     bba:	71 81       	ldd	r23, Z+1	; 0x01
     bbc:	82 81       	ldd	r24, Z+2	; 0x02
     bbe:	93 81       	ldd	r25, Z+3	; 0x03
     bc0:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	f8 01       	movw	r30, r16
     bca:	91 83       	std	Z+1, r25	; 0x01
     bcc:	80 83       	st	Z, r24
     bce:	de 01       	movw	r26, r28
     bd0:	a9 5b       	subi	r26, 0xB9	; 185
     bd2:	bf 4f       	sbci	r27, 0xFF	; 255
     bd4:	fe 01       	movw	r30, r28
     bd6:	e5 5b       	subi	r30, 0xB5	; 181
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	80 81       	ld	r24, Z
     bdc:	91 81       	ldd	r25, Z+1	; 0x01
     bde:	11 96       	adiw	r26, 0x01	; 1
     be0:	9c 93       	st	X, r25
     be2:	8e 93       	st	-X, r24
     be4:	fe 01       	movw	r30, r28
     be6:	e9 5b       	subi	r30, 0xB9	; 185
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <rechte_lijnlinks+0x1e4>
     bf2:	fe 01       	movw	r30, r28
     bf4:	e9 5b       	subi	r30, 0xB9	; 185
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	80 83       	st	Z, r24
            _delay_ms(20);
            Grote_klok = waarde6;
     bfc:	fe 01       	movw	r30, r28
     bfe:	e7 5a       	subi	r30, 0xA7	; 167
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	90 93 0f 03 	sts	0x030F, r25
     c0a:	80 93 0e 03 	sts	0x030E, r24
     c0e:	ef c2       	rjmp	.+1502   	; 0x11ee <rechte_lijnlinks+0x7e4>
        }
        else
        {
            if (ultrasoon > 20)
            {
                if (((Ir_rechts < 265))) //boomdectectie
     c10:	80 91 0c 03 	lds	r24, 0x030C
     c14:	90 91 0d 03 	lds	r25, 0x030D
     c18:	f1 e0       	ldi	r31, 0x01	; 1
     c1a:	89 30       	cpi	r24, 0x09	; 9
     c1c:	9f 07       	cpc	r25, r31
     c1e:	08 f0       	brcs	.+2      	; 0xc22 <rechte_lijnlinks+0x218>
     c20:	3d c1       	rjmp	.+634    	; 0xe9c <rechte_lijnlinks+0x492>
                {
                    if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
     c22:	e0 e2       	ldi	r30, 0x20	; 32
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	81 70       	andi	r24, 0x01	; 1
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	79 f4       	brne	.+30     	; 0xc52 <rechte_lijnlinks+0x248>
     c34:	e0 e2       	ldi	r30, 0x20	; 32
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	82 70       	andi	r24, 0x02	; 2
     c40:	90 70       	andi	r25, 0x00	; 0
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	31 f4       	brne	.+12     	; 0xc52 <rechte_lijnlinks+0x248>
                    {
                        motor(170,170);
     c46:	8a ea       	ldi	r24, 0xAA	; 170
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	6a ea       	ldi	r22, 0xAA	; 170
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
                    }
                    if (PINA &(1 << PA0))
     c52:	e0 e2       	ldi	r30, 0x20	; 32
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	81 70       	andi	r24, 0x01	; 1
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	88 23       	and	r24, r24
     c62:	09 f4       	brne	.+2      	; 0xc66 <rechte_lijnlinks+0x25c>
     c64:	8b c0       	rjmp	.+278    	; 0xd7c <rechte_lijnlinks+0x372>
                    {
                        motor (170,0);
     c66:	8a ea       	ldi	r24, 0xAA	; 170
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
     c72:	fe 01       	movw	r30, r28
     c74:	ed 5b       	subi	r30, 0xBD	; 189
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e2       	ldi	r26, 0x20	; 32
     c7e:	b2 e4       	ldi	r27, 0x42	; 66
     c80:	80 83       	st	Z, r24
     c82:	91 83       	std	Z+1, r25	; 0x01
     c84:	a2 83       	std	Z+2, r26	; 0x02
     c86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c88:	8e 01       	movw	r16, r28
     c8a:	01 5c       	subi	r16, 0xC1	; 193
     c8c:	1f 4f       	sbci	r17, 0xFF	; 255
     c8e:	fe 01       	movw	r30, r28
     c90:	ed 5b       	subi	r30, 0xBD	; 189
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	60 81       	ld	r22, Z
     c96:	71 81       	ldd	r23, Z+1	; 0x01
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	93 81       	ldd	r25, Z+3	; 0x03
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	4a e7       	ldi	r20, 0x7A	; 122
     ca2:	55 e4       	ldi	r21, 0x45	; 69
     ca4:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	f8 01       	movw	r30, r16
     cae:	80 83       	st	Z, r24
     cb0:	91 83       	std	Z+1, r25	; 0x01
     cb2:	a2 83       	std	Z+2, r26	; 0x02
     cb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cb6:	fe 01       	movw	r30, r28
     cb8:	ff 96       	adiw	r30, 0x3f	; 63
     cba:	60 81       	ld	r22, Z
     cbc:	71 81       	ldd	r23, Z+1	; 0x01
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
     cc0:	93 81       	ldd	r25, Z+3	; 0x03
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e8       	ldi	r20, 0x80	; 128
     cc8:	5f e3       	ldi	r21, 0x3F	; 63
     cca:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     cce:	88 23       	and	r24, r24
     cd0:	2c f4       	brge	.+10     	; 0xcdc <rechte_lijnlinks+0x2d2>
		__ticks = 1;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	9e af       	std	Y+62, r25	; 0x3e
     cd8:	8d af       	std	Y+61, r24	; 0x3d
     cda:	46 c0       	rjmp	.+140    	; 0xd68 <rechte_lijnlinks+0x35e>
	else if (__tmp > 65535)
     cdc:	fe 01       	movw	r30, r28
     cde:	ff 96       	adiw	r30, 0x3f	; 63
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	3f ef       	ldi	r19, 0xFF	; 255
     cec:	4f e7       	ldi	r20, 0x7F	; 127
     cee:	57 e4       	ldi	r21, 0x47	; 71
     cf0:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     cf4:	18 16       	cp	r1, r24
     cf6:	64 f5       	brge	.+88     	; 0xd50 <rechte_lijnlinks+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf8:	fe 01       	movw	r30, r28
     cfa:	ed 5b       	subi	r30, 0xBD	; 189
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	60 81       	ld	r22, Z
     d00:	71 81       	ldd	r23, Z+1	; 0x01
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e2       	ldi	r20, 0x20	; 32
     d0c:	51 e4       	ldi	r21, 0x41	; 65
     d0e:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	bc 01       	movw	r22, r24
     d18:	cd 01       	movw	r24, r26
     d1a:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9e af       	std	Y+62, r25	; 0x3e
     d24:	8d af       	std	Y+61, r24	; 0x3d
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <rechte_lijnlinks+0x33c>
     d28:	80 e9       	ldi	r24, 0x90	; 144
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	9c af       	std	Y+60, r25	; 0x3c
     d2e:	8b af       	std	Y+59, r24	; 0x3b
     d30:	8b ad       	ldd	r24, Y+59	; 0x3b
     d32:	9c ad       	ldd	r25, Y+60	; 0x3c
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <rechte_lijnlinks+0x32a>
     d38:	9c af       	std	Y+60, r25	; 0x3c
     d3a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3c:	8d ad       	ldd	r24, Y+61	; 0x3d
     d3e:	9e ad       	ldd	r25, Y+62	; 0x3e
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	9e af       	std	Y+62, r25	; 0x3e
     d44:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d46:	8d ad       	ldd	r24, Y+61	; 0x3d
     d48:	9e ad       	ldd	r25, Y+62	; 0x3e
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	69 f7       	brne	.-38     	; 0xd28 <rechte_lijnlinks+0x31e>
     d4e:	16 c0       	rjmp	.+44     	; 0xd7c <rechte_lijnlinks+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d50:	fe 01       	movw	r30, r28
     d52:	ff 96       	adiw	r30, 0x3f	; 63
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	9e af       	std	Y+62, r25	; 0x3e
     d66:	8d af       	std	Y+61, r24	; 0x3d
     d68:	8d ad       	ldd	r24, Y+61	; 0x3d
     d6a:	9e ad       	ldd	r25, Y+62	; 0x3e
     d6c:	9a af       	std	Y+58, r25	; 0x3a
     d6e:	89 af       	std	Y+57, r24	; 0x39
     d70:	89 ad       	ldd	r24, Y+57	; 0x39
     d72:	9a ad       	ldd	r25, Y+58	; 0x3a
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <rechte_lijnlinks+0x36a>
     d78:	9a af       	std	Y+58, r25	; 0x3a
     d7a:	89 af       	std	Y+57, r24	; 0x39
                        _delay_ms(40);
                    }
                    if (PINA &(1 << PA1))
     d7c:	e0 e2       	ldi	r30, 0x20	; 32
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	82 70       	andi	r24, 0x02	; 2
     d88:	90 70       	andi	r25, 0x00	; 0
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	09 f4       	brne	.+2      	; 0xd90 <rechte_lijnlinks+0x386>
     d8e:	78 c0       	rjmp	.+240    	; 0xe80 <rechte_lijnlinks+0x476>
                    {
                        motor (0,170);
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	6a ea       	ldi	r22, 0xAA	; 170
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	a0 e2       	ldi	r26, 0x20	; 32
     da2:	b2 e4       	ldi	r27, 0x42	; 66
     da4:	8d ab       	std	Y+53, r24	; 0x35
     da6:	9e ab       	std	Y+54, r25	; 0x36
     da8:	af ab       	std	Y+55, r26	; 0x37
     daa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dac:	6d a9       	ldd	r22, Y+53	; 0x35
     dae:	7e a9       	ldd	r23, Y+54	; 0x36
     db0:	8f a9       	ldd	r24, Y+55	; 0x37
     db2:	98 ad       	ldd	r25, Y+56	; 0x38
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a e7       	ldi	r20, 0x7A	; 122
     dba:	55 e4       	ldi	r21, 0x45	; 69
     dbc:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	89 ab       	std	Y+49, r24	; 0x31
     dc6:	9a ab       	std	Y+50, r25	; 0x32
     dc8:	ab ab       	std	Y+51, r26	; 0x33
     dca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dcc:	69 a9       	ldd	r22, Y+49	; 0x31
     dce:	7a a9       	ldd	r23, Y+50	; 0x32
     dd0:	8b a9       	ldd	r24, Y+51	; 0x33
     dd2:	9c a9       	ldd	r25, Y+52	; 0x34
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e8       	ldi	r20, 0x80	; 128
     dda:	5f e3       	ldi	r21, 0x3F	; 63
     ddc:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     de0:	88 23       	and	r24, r24
     de2:	2c f4       	brge	.+10     	; 0xdee <rechte_lijnlinks+0x3e4>
		__ticks = 1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	98 ab       	std	Y+48, r25	; 0x30
     dea:	8f a7       	std	Y+47, r24	; 0x2f
     dec:	3f c0       	rjmp	.+126    	; 0xe6c <rechte_lijnlinks+0x462>
	else if (__tmp > 65535)
     dee:	69 a9       	ldd	r22, Y+49	; 0x31
     df0:	7a a9       	ldd	r23, Y+50	; 0x32
     df2:	8b a9       	ldd	r24, Y+51	; 0x33
     df4:	9c a9       	ldd	r25, Y+52	; 0x34
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	3f ef       	ldi	r19, 0xFF	; 255
     dfa:	4f e7       	ldi	r20, 0x7F	; 127
     dfc:	57 e4       	ldi	r21, 0x47	; 71
     dfe:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     e02:	18 16       	cp	r1, r24
     e04:	4c f5       	brge	.+82     	; 0xe58 <rechte_lijnlinks+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e06:	6d a9       	ldd	r22, Y+53	; 0x35
     e08:	7e a9       	ldd	r23, Y+54	; 0x36
     e0a:	8f a9       	ldd	r24, Y+55	; 0x37
     e0c:	98 ad       	ldd	r25, Y+56	; 0x38
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e2       	ldi	r20, 0x20	; 32
     e14:	51 e4       	ldi	r21, 0x41	; 65
     e16:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	98 ab       	std	Y+48, r25	; 0x30
     e2c:	8f a7       	std	Y+47, r24	; 0x2f
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <rechte_lijnlinks+0x444>
     e30:	80 e9       	ldi	r24, 0x90	; 144
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	9e a7       	std	Y+46, r25	; 0x2e
     e36:	8d a7       	std	Y+45, r24	; 0x2d
     e38:	8d a5       	ldd	r24, Y+45	; 0x2d
     e3a:	9e a5       	ldd	r25, Y+46	; 0x2e
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <rechte_lijnlinks+0x432>
     e40:	9e a7       	std	Y+46, r25	; 0x2e
     e42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e44:	8f a5       	ldd	r24, Y+47	; 0x2f
     e46:	98 a9       	ldd	r25, Y+48	; 0x30
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	98 ab       	std	Y+48, r25	; 0x30
     e4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e50:	98 a9       	ldd	r25, Y+48	; 0x30
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	69 f7       	brne	.-38     	; 0xe30 <rechte_lijnlinks+0x426>
     e56:	14 c0       	rjmp	.+40     	; 0xe80 <rechte_lijnlinks+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e58:	69 a9       	ldd	r22, Y+49	; 0x31
     e5a:	7a a9       	ldd	r23, Y+50	; 0x32
     e5c:	8b a9       	ldd	r24, Y+51	; 0x33
     e5e:	9c a9       	ldd	r25, Y+52	; 0x34
     e60:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	98 ab       	std	Y+48, r25	; 0x30
     e6a:	8f a7       	std	Y+47, r24	; 0x2f
     e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e6e:	98 a9       	ldd	r25, Y+48	; 0x30
     e70:	9c a7       	std	Y+44, r25	; 0x2c
     e72:	8b a7       	std	Y+43, r24	; 0x2b
     e74:	8b a5       	ldd	r24, Y+43	; 0x2b
     e76:	9c a5       	ldd	r25, Y+44	; 0x2c
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <rechte_lijnlinks+0x46e>
     e7c:	9c a7       	std	Y+44, r25	; 0x2c
     e7e:	8b a7       	std	Y+43, r24	; 0x2b
                        _delay_ms(40);
                    }
                    if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
     e80:	80 91 0e 03 	lds	r24, 0x030E
     e84:	90 91 0f 03 	lds	r25, 0x030F
     e88:	84 3b       	cpi	r24, 0xB4	; 180
     e8a:	91 05       	cpc	r25, r1
     e8c:	0c f4       	brge	.+2      	; 0xe90 <rechte_lijnlinks+0x486>
     e8e:	af c1       	rjmp	.+862    	; 0x11ee <rechte_lijnlinks+0x7e4>
                    {
                        vlag = 0;
     e90:	fe 01       	movw	r30, r28
     e92:	e5 5a       	subi	r30, 0xA5	; 165
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	11 82       	std	Z+1, r1	; 0x01
     e98:	10 82       	st	Z, r1
     e9a:	a9 c1       	rjmp	.+850    	; 0x11ee <rechte_lijnlinks+0x7e4>
                    }
                }
                else
                {
                    int waarde = Grote_klok;
     e9c:	fe 01       	movw	r30, r28
     e9e:	e9 5a       	subi	r30, 0xA9	; 169
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	80 91 0e 03 	lds	r24, 0x030E
     ea6:	90 91 0f 03 	lds	r25, 0x030F
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	80 83       	st	Z, r24
                    motor (0,0);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
                    PORTH |=  (1 << PH4);
     eba:	a2 e0       	ldi	r26, 0x02	; 2
     ebc:	b1 e0       	ldi	r27, 0x01	; 1
     ebe:	e2 e0       	ldi	r30, 0x02	; 2
     ec0:	f1 e0       	ldi	r31, 0x01	; 1
     ec2:	80 81       	ld	r24, Z
     ec4:	80 61       	ori	r24, 0x10	; 16
     ec6:	8c 93       	st	X, r24
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	aa ef       	ldi	r26, 0xFA	; 250
     ece:	b3 e4       	ldi	r27, 0x43	; 67
     ed0:	8f a3       	std	Y+39, r24	; 0x27
     ed2:	98 a7       	std	Y+40, r25	; 0x28
     ed4:	a9 a7       	std	Y+41, r26	; 0x29
     ed6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed8:	6f a1       	ldd	r22, Y+39	; 0x27
     eda:	78 a5       	ldd	r23, Y+40	; 0x28
     edc:	89 a5       	ldd	r24, Y+41	; 0x29
     ede:	9a a5       	ldd	r25, Y+42	; 0x2a
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	4a e7       	ldi	r20, 0x7A	; 122
     ee6:	55 e4       	ldi	r21, 0x45	; 69
     ee8:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	8b a3       	std	Y+35, r24	; 0x23
     ef2:	9c a3       	std	Y+36, r25	; 0x24
     ef4:	ad a3       	std	Y+37, r26	; 0x25
     ef6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ef8:	6b a1       	ldd	r22, Y+35	; 0x23
     efa:	7c a1       	ldd	r23, Y+36	; 0x24
     efc:	8d a1       	ldd	r24, Y+37	; 0x25
     efe:	9e a1       	ldd	r25, Y+38	; 0x26
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e8       	ldi	r20, 0x80	; 128
     f06:	5f e3       	ldi	r21, 0x3F	; 63
     f08:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
     f0c:	88 23       	and	r24, r24
     f0e:	2c f4       	brge	.+10     	; 0xf1a <rechte_lijnlinks+0x510>
		__ticks = 1;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	9a a3       	std	Y+34, r25	; 0x22
     f16:	89 a3       	std	Y+33, r24	; 0x21
     f18:	3f c0       	rjmp	.+126    	; 0xf98 <rechte_lijnlinks+0x58e>
	else if (__tmp > 65535)
     f1a:	6b a1       	ldd	r22, Y+35	; 0x23
     f1c:	7c a1       	ldd	r23, Y+36	; 0x24
     f1e:	8d a1       	ldd	r24, Y+37	; 0x25
     f20:	9e a1       	ldd	r25, Y+38	; 0x26
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	4f e7       	ldi	r20, 0x7F	; 127
     f28:	57 e4       	ldi	r21, 0x47	; 71
     f2a:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
     f2e:	18 16       	cp	r1, r24
     f30:	4c f5       	brge	.+82     	; 0xf84 <rechte_lijnlinks+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f32:	6f a1       	ldd	r22, Y+39	; 0x27
     f34:	78 a5       	ldd	r23, Y+40	; 0x28
     f36:	89 a5       	ldd	r24, Y+41	; 0x29
     f38:	9a a5       	ldd	r25, Y+42	; 0x2a
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e2       	ldi	r20, 0x20	; 32
     f40:	51 e4       	ldi	r21, 0x41	; 65
     f42:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	9a a3       	std	Y+34, r25	; 0x22
     f58:	89 a3       	std	Y+33, r24	; 0x21
     f5a:	0f c0       	rjmp	.+30     	; 0xf7a <rechte_lijnlinks+0x570>
     f5c:	80 e9       	ldi	r24, 0x90	; 144
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	98 a3       	std	Y+32, r25	; 0x20
     f62:	8f 8f       	std	Y+31, r24	; 0x1f
     f64:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f66:	98 a1       	ldd	r25, Y+32	; 0x20
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <rechte_lijnlinks+0x55e>
     f6c:	98 a3       	std	Y+32, r25	; 0x20
     f6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f70:	89 a1       	ldd	r24, Y+33	; 0x21
     f72:	9a a1       	ldd	r25, Y+34	; 0x22
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	9a a3       	std	Y+34, r25	; 0x22
     f78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7a:	89 a1       	ldd	r24, Y+33	; 0x21
     f7c:	9a a1       	ldd	r25, Y+34	; 0x22
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	69 f7       	brne	.-38     	; 0xf5c <rechte_lijnlinks+0x552>
     f82:	14 c0       	rjmp	.+40     	; 0xfac <rechte_lijnlinks+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f84:	6b a1       	ldd	r22, Y+35	; 0x23
     f86:	7c a1       	ldd	r23, Y+36	; 0x24
     f88:	8d a1       	ldd	r24, Y+37	; 0x25
     f8a:	9e a1       	ldd	r25, Y+38	; 0x26
     f8c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	9a a3       	std	Y+34, r25	; 0x22
     f96:	89 a3       	std	Y+33, r24	; 0x21
     f98:	89 a1       	ldd	r24, Y+33	; 0x21
     f9a:	9a a1       	ldd	r25, Y+34	; 0x22
     f9c:	9e 8f       	std	Y+30, r25	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
     fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <rechte_lijnlinks+0x59a>
     fa8:	9e 8f       	std	Y+30, r25	; 0x1e
     faa:	8d 8f       	std	Y+29, r24	; 0x1d
                    _delay_ms(500);
                    PORTH &= ~(1 << PH4);
     fac:	a2 e0       	ldi	r26, 0x02	; 2
     fae:	b1 e0       	ldi	r27, 0x01	; 1
     fb0:	e2 e0       	ldi	r30, 0x02	; 2
     fb2:	f1 e0       	ldi	r31, 0x01	; 1
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7e       	andi	r24, 0xEF	; 239
     fb8:	8c 93       	st	X, r24
                    Grote_klok = waarde;
     fba:	fe 01       	movw	r30, r28
     fbc:	e9 5a       	subi	r30, 0xA9	; 169
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	90 93 0f 03 	sts	0x030F, r25
     fc8:	80 93 0e 03 	sts	0x030E, r24
                    motor(170,170);
     fcc:	8a ea       	ldi	r24, 0xAA	; 170
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	6a ea       	ldi	r22, 0xAA	; 170
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a8 ec       	ldi	r26, 0xC8	; 200
     fde:	b2 e4       	ldi	r27, 0x42	; 66
     fe0:	89 8f       	std	Y+25, r24	; 0x19
     fe2:	9a 8f       	std	Y+26, r25	; 0x1a
     fe4:	ab 8f       	std	Y+27, r26	; 0x1b
     fe6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe8:	69 8d       	ldd	r22, Y+25	; 0x19
     fea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	4a e7       	ldi	r20, 0x7A	; 122
     ff6:	55 e4       	ldi	r21, 0x45	; 69
     ff8:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	8d 8b       	std	Y+21, r24	; 0x15
    1002:	9e 8b       	std	Y+22, r25	; 0x16
    1004:	af 8b       	std	Y+23, r26	; 0x17
    1006:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1008:	6d 89       	ldd	r22, Y+21	; 0x15
    100a:	7e 89       	ldd	r23, Y+22	; 0x16
    100c:	8f 89       	ldd	r24, Y+23	; 0x17
    100e:	98 8d       	ldd	r25, Y+24	; 0x18
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
    101c:	88 23       	and	r24, r24
    101e:	2c f4       	brge	.+10     	; 0x102a <rechte_lijnlinks+0x620>
		__ticks = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 8b       	std	Y+20, r25	; 0x14
    1026:	8b 8b       	std	Y+19, r24	; 0x13
    1028:	3f c0       	rjmp	.+126    	; 0x10a8 <rechte_lijnlinks+0x69e>
	else if (__tmp > 65535)
    102a:	6d 89       	ldd	r22, Y+21	; 0x15
    102c:	7e 89       	ldd	r23, Y+22	; 0x16
    102e:	8f 89       	ldd	r24, Y+23	; 0x17
    1030:	98 8d       	ldd	r25, Y+24	; 0x18
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	3f ef       	ldi	r19, 0xFF	; 255
    1036:	4f e7       	ldi	r20, 0x7F	; 127
    1038:	57 e4       	ldi	r21, 0x47	; 71
    103a:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
    103e:	18 16       	cp	r1, r24
    1040:	4c f5       	brge	.+82     	; 0x1094 <rechte_lijnlinks+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1042:	69 8d       	ldd	r22, Y+25	; 0x19
    1044:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1046:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1048:	9c 8d       	ldd	r25, Y+28	; 0x1c
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e2       	ldi	r20, 0x20	; 32
    1050:	51 e4       	ldi	r21, 0x41	; 65
    1052:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	9c 8b       	std	Y+20, r25	; 0x14
    1068:	8b 8b       	std	Y+19, r24	; 0x13
    106a:	0f c0       	rjmp	.+30     	; 0x108a <rechte_lijnlinks+0x680>
    106c:	80 e9       	ldi	r24, 0x90	; 144
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	9a 8b       	std	Y+18, r25	; 0x12
    1072:	89 8b       	std	Y+17, r24	; 0x11
    1074:	89 89       	ldd	r24, Y+17	; 0x11
    1076:	9a 89       	ldd	r25, Y+18	; 0x12
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <rechte_lijnlinks+0x66e>
    107c:	9a 8b       	std	Y+18, r25	; 0x12
    107e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1080:	8b 89       	ldd	r24, Y+19	; 0x13
    1082:	9c 89       	ldd	r25, Y+20	; 0x14
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	9c 8b       	std	Y+20, r25	; 0x14
    1088:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108a:	8b 89       	ldd	r24, Y+19	; 0x13
    108c:	9c 89       	ldd	r25, Y+20	; 0x14
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	69 f7       	brne	.-38     	; 0x106c <rechte_lijnlinks+0x662>
    1092:	ad c0       	rjmp	.+346    	; 0x11ee <rechte_lijnlinks+0x7e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1094:	6d 89       	ldd	r22, Y+21	; 0x15
    1096:	7e 89       	ldd	r23, Y+22	; 0x16
    1098:	8f 89       	ldd	r24, Y+23	; 0x17
    109a:	98 8d       	ldd	r25, Y+24	; 0x18
    109c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	9c 8b       	std	Y+20, r25	; 0x14
    10a6:	8b 8b       	std	Y+19, r24	; 0x13
    10a8:	8b 89       	ldd	r24, Y+19	; 0x13
    10aa:	9c 89       	ldd	r25, Y+20	; 0x14
    10ac:	98 8b       	std	Y+16, r25	; 0x10
    10ae:	8f 87       	std	Y+15, r24	; 0x0f
    10b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b2:	98 89       	ldd	r25, Y+16	; 0x10
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <rechte_lijnlinks+0x6aa>
    10b8:	98 8b       	std	Y+16, r25	; 0x10
    10ba:	8f 87       	std	Y+15, r24	; 0x0f
    10bc:	98 c0       	rjmp	.+304    	; 0x11ee <rechte_lijnlinks+0x7e4>
                    _delay_ms(100);
                }
            }
            else
            {
                int waarde = Grote_klok;
    10be:	fe 01       	movw	r30, r28
    10c0:	eb 5a       	subi	r30, 0xAB	; 171
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 91 0e 03 	lds	r24, 0x030E
    10c8:	90 91 0f 03 	lds	r25, 0x030F
    10cc:	91 83       	std	Z+1, r25	; 0x01
    10ce:	80 83       	st	Z, r24
                motor (0,0);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
                PORTH |=  (1 << PH4);
    10dc:	a2 e0       	ldi	r26, 0x02	; 2
    10de:	b1 e0       	ldi	r27, 0x01	; 1
    10e0:	e2 e0       	ldi	r30, 0x02	; 2
    10e2:	f1 e0       	ldi	r31, 0x01	; 1
    10e4:	80 81       	ld	r24, Z
    10e6:	80 61       	ori	r24, 0x10	; 16
    10e8:	8c 93       	st	X, r24
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	aa ef       	ldi	r26, 0xFA	; 250
    10f0:	b3 e4       	ldi	r27, 0x43	; 67
    10f2:	8b 87       	std	Y+11, r24	; 0x0b
    10f4:	9c 87       	std	Y+12, r25	; 0x0c
    10f6:	ad 87       	std	Y+13, r26	; 0x0d
    10f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a e7       	ldi	r20, 0x7A	; 122
    1108:	55 e4       	ldi	r21, 0x45	; 69
    110a:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8f 83       	std	Y+7, r24	; 0x07
    1114:	98 87       	std	Y+8, r25	; 0x08
    1116:	a9 87       	std	Y+9, r26	; 0x09
    1118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    111a:	6f 81       	ldd	r22, Y+7	; 0x07
    111c:	78 85       	ldd	r23, Y+8	; 0x08
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
    112e:	88 23       	and	r24, r24
    1130:	2c f4       	brge	.+10     	; 0x113c <rechte_lijnlinks+0x732>
		__ticks = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	3f c0       	rjmp	.+126    	; 0x11ba <rechte_lijnlinks+0x7b0>
	else if (__tmp > 65535)
    113c:	6f 81       	ldd	r22, Y+7	; 0x07
    113e:	78 85       	ldd	r23, Y+8	; 0x08
    1140:	89 85       	ldd	r24, Y+9	; 0x09
    1142:	9a 85       	ldd	r25, Y+10	; 0x0a
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	3f ef       	ldi	r19, 0xFF	; 255
    1148:	4f e7       	ldi	r20, 0x7F	; 127
    114a:	57 e4       	ldi	r21, 0x47	; 71
    114c:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
    1150:	18 16       	cp	r1, r24
    1152:	4c f5       	brge	.+82     	; 0x11a6 <rechte_lijnlinks+0x79c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1154:	6b 85       	ldd	r22, Y+11	; 0x0b
    1156:	7c 85       	ldd	r23, Y+12	; 0x0c
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	9e 85       	ldd	r25, Y+14	; 0x0e
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	0f c0       	rjmp	.+30     	; 0x119c <rechte_lijnlinks+0x792>
    117e:	80 e9       	ldi	r24, 0x90	; 144
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <rechte_lijnlinks+0x780>
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	9e 83       	std	Y+6, r25	; 0x06
    119a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	69 f7       	brne	.-38     	; 0x117e <rechte_lijnlinks+0x774>
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <rechte_lijnlinks+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a6:	6f 81       	ldd	r22, Y+7	; 0x07
    11a8:	78 85       	ldd	r23, Y+8	; 0x08
    11aa:	89 85       	ldd	r24, Y+9	; 0x09
    11ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ae:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <rechte_lijnlinks+0x7bc>
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(500);
                PORTH &= ~(1 << PH4);
    11ce:	a2 e0       	ldi	r26, 0x02	; 2
    11d0:	b1 e0       	ldi	r27, 0x01	; 1
    11d2:	e2 e0       	ldi	r30, 0x02	; 2
    11d4:	f1 e0       	ldi	r31, 0x01	; 1
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7e       	andi	r24, 0xEF	; 239
    11da:	8c 93       	st	X, r24
                Grote_klok = waarde;
    11dc:	fe 01       	movw	r30, r28
    11de:	eb 5a       	subi	r30, 0xAB	; 171
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	90 93 0f 03 	sts	0x030F, r25
    11ea:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnlinks(void)
{
    int vlag = 1;
    TCNT1 = 0;
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
    11ee:	fe 01       	movw	r30, r28
    11f0:	e5 5a       	subi	r30, 0xA5	; 165
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	09 f0       	breq	.+2      	; 0x11fe <rechte_lijnlinks+0x7f4>
    11fc:	23 cc       	rjmp	.-1978   	; 0xa44 <rechte_lijnlinks+0x3a>
                PORTH &= ~(1 << PH4);
                Grote_klok = waarde;
            }
        }
    }
}
    11fe:	c4 5a       	subi	r28, 0xA4	; 164
    1200:	df 4f       	sbci	r29, 0xFF	; 255
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <rechte_lijnbeide>:


void rechte_lijnbeide(void)
{
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	cc 55       	subi	r28, 0x5C	; 92
    1224:	d0 40       	sbci	r29, 0x00	; 0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    int vlag = 1;
    1230:	fe 01       	movw	r30, r28
    1232:	e5 5a       	subi	r30, 0xA5	; 165
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
    TCNT1 = 0;
    123e:	e4 e8       	ldi	r30, 0x84	; 132
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	11 82       	std	Z+1, r1	; 0x01
    1244:	10 82       	st	Z, r1
    Grote_klok = 0;
    1246:	10 92 0f 03 	sts	0x030F, r1
    124a:	10 92 0e 03 	sts	0x030E, r1
    124e:	de c3       	rjmp	.+1980   	; 0x1a0c <rechte_lijnbeide+0x7f6>
    while (vlag) //(ultrasoon <= 37)
    {
        if  (!(PINF && (1 << PF0)))
    1250:	ef e2       	ldi	r30, 0x2F	; 47
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 23       	and	r24, r24
    1258:	a1 f0       	breq	.+40     	; 0x1282 <rechte_lijnbeide+0x6c>
            _delay_ms(20);
            Grote_klok = waarde6;
        }
        else
        {
            if (ultrasoon > 20)
    125a:	80 91 08 03 	lds	r24, 0x0308
    125e:	90 91 09 03 	lds	r25, 0x0309
    1262:	a0 91 0a 03 	lds	r26, 0x030A
    1266:	b0 91 0b 03 	lds	r27, 0x030B
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 ea       	ldi	r20, 0xA0	; 160
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
    127a:	18 16       	cp	r1, r24
    127c:	0c f4       	brge	.+2      	; 0x1280 <rechte_lijnbeide+0x6a>
    127e:	ce c0       	rjmp	.+412    	; 0x141c <rechte_lijnbeide+0x206>
    1280:	2d c3       	rjmp	.+1626   	; 0x18dc <rechte_lijnbeide+0x6c6>
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
    {
        if  (!(PINF && (1 << PF0)))
        {
            motor(0,0);
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
            int waarde6 = Grote_klok;
    128e:	fe 01       	movw	r30, r28
    1290:	e7 5a       	subi	r30, 0xA7	; 167
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	80 91 0e 03 	lds	r24, 0x030E
    1298:	90 91 0f 03 	lds	r25, 0x030F
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	80 83       	st	Z, r24
    12a0:	fe 01       	movw	r30, r28
    12a2:	ef 5a       	subi	r30, 0xAF	; 175
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a0 ea       	ldi	r26, 0xA0	; 160
    12ac:	b1 e4       	ldi	r27, 0x41	; 65
    12ae:	80 83       	st	Z, r24
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	a2 83       	std	Z+2, r26	; 0x02
    12b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b6:	8e 01       	movw	r16, r28
    12b8:	03 5b       	subi	r16, 0xB3	; 179
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	fe 01       	movw	r30, r28
    12be:	ef 5a       	subi	r30, 0xAF	; 175
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	4a e7       	ldi	r20, 0x7A	; 122
    12d0:	55 e4       	ldi	r21, 0x45	; 69
    12d2:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	f8 01       	movw	r30, r16
    12dc:	80 83       	st	Z, r24
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	a2 83       	std	Z+2, r26	; 0x02
    12e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12e4:	fe 01       	movw	r30, r28
    12e6:	e3 5b       	subi	r30, 0xB3	; 179
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e8       	ldi	r20, 0x80	; 128
    12f8:	5f e3       	ldi	r21, 0x3F	; 63
    12fa:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
    12fe:	88 23       	and	r24, r24
    1300:	44 f4       	brge	.+16     	; 0x1312 <rechte_lijnbeide+0xfc>
		__ticks = 1;
    1302:	fe 01       	movw	r30, r28
    1304:	e5 5b       	subi	r30, 0xB5	; 181
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	80 83       	st	Z, r24
    1310:	64 c0       	rjmp	.+200    	; 0x13da <rechte_lijnbeide+0x1c4>
	else if (__tmp > 65535)
    1312:	fe 01       	movw	r30, r28
    1314:	e3 5b       	subi	r30, 0xB3	; 179
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	3f ef       	ldi	r19, 0xFF	; 255
    1324:	4f e7       	ldi	r20, 0x7F	; 127
    1326:	57 e4       	ldi	r21, 0x47	; 71
    1328:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
    132c:	18 16       	cp	r1, r24
    132e:	0c f0       	brlt	.+2      	; 0x1332 <rechte_lijnbeide+0x11c>
    1330:	43 c0       	rjmp	.+134    	; 0x13b8 <rechte_lijnbeide+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1332:	fe 01       	movw	r30, r28
    1334:	ef 5a       	subi	r30, 0xAF	; 175
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	8e 01       	movw	r16, r28
    1352:	05 5b       	subi	r16, 0xB5	; 181
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	f8 01       	movw	r30, r16
    1364:	91 83       	std	Z+1, r25	; 0x01
    1366:	80 83       	st	Z, r24
    1368:	1f c0       	rjmp	.+62     	; 0x13a8 <rechte_lijnbeide+0x192>
    136a:	fe 01       	movw	r30, r28
    136c:	e7 5b       	subi	r30, 0xB7	; 183
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	80 e9       	ldi	r24, 0x90	; 144
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	80 83       	st	Z, r24
    1378:	fe 01       	movw	r30, r28
    137a:	e7 5b       	subi	r30, 0xB7	; 183
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <rechte_lijnbeide+0x16c>
    1386:	fe 01       	movw	r30, r28
    1388:	e7 5b       	subi	r30, 0xB7	; 183
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1390:	de 01       	movw	r26, r28
    1392:	a5 5b       	subi	r26, 0xB5	; 181
    1394:	bf 4f       	sbci	r27, 0xFF	; 255
    1396:	fe 01       	movw	r30, r28
    1398:	e5 5b       	subi	r30, 0xB5	; 181
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	9c 93       	st	X, r25
    13a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a8:	fe 01       	movw	r30, r28
    13aa:	e5 5b       	subi	r30, 0xB5	; 181
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	d1 f6       	brne	.-76     	; 0x136a <rechte_lijnbeide+0x154>
    13b6:	28 c0       	rjmp	.+80     	; 0x1408 <rechte_lijnbeide+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b8:	8e 01       	movw	r16, r28
    13ba:	05 5b       	subi	r16, 0xB5	; 181
    13bc:	1f 4f       	sbci	r17, 0xFF	; 255
    13be:	fe 01       	movw	r30, r28
    13c0:	e3 5b       	subi	r30, 0xB3	; 179
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	93 81       	ldd	r25, Z+3	; 0x03
    13cc:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	f8 01       	movw	r30, r16
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
    13da:	de 01       	movw	r26, r28
    13dc:	a9 5b       	subi	r26, 0xB9	; 185
    13de:	bf 4f       	sbci	r27, 0xFF	; 255
    13e0:	fe 01       	movw	r30, r28
    13e2:	e5 5b       	subi	r30, 0xB5	; 181
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	9c 93       	st	X, r25
    13ee:	8e 93       	st	-X, r24
    13f0:	fe 01       	movw	r30, r28
    13f2:	e9 5b       	subi	r30, 0xB9	; 185
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <rechte_lijnbeide+0x1e4>
    13fe:	fe 01       	movw	r30, r28
    1400:	e9 5b       	subi	r30, 0xB9	; 185
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	80 83       	st	Z, r24
            _delay_ms(20);
            Grote_klok = waarde6;
    1408:	fe 01       	movw	r30, r28
    140a:	e7 5a       	subi	r30, 0xA7	; 167
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	90 93 0f 03 	sts	0x030F, r25
    1416:	80 93 0e 03 	sts	0x030E, r24
    141a:	f8 c2       	rjmp	.+1520   	; 0x1a0c <rechte_lijnbeide+0x7f6>
        }
        else
        {
            if (ultrasoon > 20)
            {
                if (((Ir_links < 265) && (Ir_rechts < 265))) //boomdectectie
    141c:	80 91 10 03 	lds	r24, 0x0310
    1420:	90 91 11 03 	lds	r25, 0x0311
    1424:	f1 e0       	ldi	r31, 0x01	; 1
    1426:	89 30       	cpi	r24, 0x09	; 9
    1428:	9f 07       	cpc	r25, r31
    142a:	08 f0       	brcs	.+2      	; 0x142e <rechte_lijnbeide+0x218>
    142c:	46 c1       	rjmp	.+652    	; 0x16ba <rechte_lijnbeide+0x4a4>
    142e:	80 91 0c 03 	lds	r24, 0x030C
    1432:	90 91 0d 03 	lds	r25, 0x030D
    1436:	21 e0       	ldi	r18, 0x01	; 1
    1438:	89 30       	cpi	r24, 0x09	; 9
    143a:	92 07       	cpc	r25, r18
    143c:	08 f0       	brcs	.+2      	; 0x1440 <rechte_lijnbeide+0x22a>
    143e:	3d c1       	rjmp	.+634    	; 0x16ba <rechte_lijnbeide+0x4a4>
                {
                    if ((!(PINA & (1 << PA0))) && (!(PINA & (1 << PA1))))
    1440:	e0 e2       	ldi	r30, 0x20	; 32
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	81 70       	andi	r24, 0x01	; 1
    144c:	90 70       	andi	r25, 0x00	; 0
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	79 f4       	brne	.+30     	; 0x1470 <rechte_lijnbeide+0x25a>
    1452:	e0 e2       	ldi	r30, 0x20	; 32
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	82 70       	andi	r24, 0x02	; 2
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	31 f4       	brne	.+12     	; 0x1470 <rechte_lijnbeide+0x25a>
                    {
                        motor(170,170);
    1464:	8a ea       	ldi	r24, 0xAA	; 170
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	6a ea       	ldi	r22, 0xAA	; 170
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
                    }
                    if (PINA &(1 << PA0))
    1470:	e0 e2       	ldi	r30, 0x20	; 32
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	81 70       	andi	r24, 0x01	; 1
    147c:	90 70       	andi	r25, 0x00	; 0
    147e:	88 23       	and	r24, r24
    1480:	09 f4       	brne	.+2      	; 0x1484 <rechte_lijnbeide+0x26e>
    1482:	8b c0       	rjmp	.+278    	; 0x159a <rechte_lijnbeide+0x384>
                    {
                        motor (170,0);
    1484:	8a ea       	ldi	r24, 0xAA	; 170
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
    1490:	fe 01       	movw	r30, r28
    1492:	ed 5b       	subi	r30, 0xBD	; 189
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a0 e2       	ldi	r26, 0x20	; 32
    149c:	b2 e4       	ldi	r27, 0x42	; 66
    149e:	80 83       	st	Z, r24
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	a2 83       	std	Z+2, r26	; 0x02
    14a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a6:	8e 01       	movw	r16, r28
    14a8:	01 5c       	subi	r16, 0xC1	; 193
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	fe 01       	movw	r30, r28
    14ae:	ed 5b       	subi	r30, 0xBD	; 189
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	60 81       	ld	r22, Z
    14b4:	71 81       	ldd	r23, Z+1	; 0x01
    14b6:	82 81       	ldd	r24, Z+2	; 0x02
    14b8:	93 81       	ldd	r25, Z+3	; 0x03
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a e7       	ldi	r20, 0x7A	; 122
    14c0:	55 e4       	ldi	r21, 0x45	; 69
    14c2:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	f8 01       	movw	r30, r16
    14cc:	80 83       	st	Z, r24
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	a2 83       	std	Z+2, r26	; 0x02
    14d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d4:	fe 01       	movw	r30, r28
    14d6:	ff 96       	adiw	r30, 0x3f	; 63
    14d8:	60 81       	ld	r22, Z
    14da:	71 81       	ldd	r23, Z+1	; 0x01
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	2c f4       	brge	.+10     	; 0x14fa <rechte_lijnbeide+0x2e4>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9e af       	std	Y+62, r25	; 0x3e
    14f6:	8d af       	std	Y+61, r24	; 0x3d
    14f8:	46 c0       	rjmp	.+140    	; 0x1586 <rechte_lijnbeide+0x370>
	else if (__tmp > 65535)
    14fa:	fe 01       	movw	r30, r28
    14fc:	ff 96       	adiw	r30, 0x3f	; 63
    14fe:	60 81       	ld	r22, Z
    1500:	71 81       	ldd	r23, Z+1	; 0x01
    1502:	82 81       	ldd	r24, Z+2	; 0x02
    1504:	93 81       	ldd	r25, Z+3	; 0x03
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	3f ef       	ldi	r19, 0xFF	; 255
    150a:	4f e7       	ldi	r20, 0x7F	; 127
    150c:	57 e4       	ldi	r21, 0x47	; 71
    150e:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
    1512:	18 16       	cp	r1, r24
    1514:	64 f5       	brge	.+88     	; 0x156e <rechte_lijnbeide+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1516:	fe 01       	movw	r30, r28
    1518:	ed 5b       	subi	r30, 0xBD	; 189
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	60 81       	ld	r22, Z
    151e:	71 81       	ldd	r23, Z+1	; 0x01
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	93 81       	ldd	r25, Z+3	; 0x03
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9e af       	std	Y+62, r25	; 0x3e
    1542:	8d af       	std	Y+61, r24	; 0x3d
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <rechte_lijnbeide+0x34e>
    1546:	80 e9       	ldi	r24, 0x90	; 144
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	9c af       	std	Y+60, r25	; 0x3c
    154c:	8b af       	std	Y+59, r24	; 0x3b
    154e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1550:	9c ad       	ldd	r25, Y+60	; 0x3c
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <rechte_lijnbeide+0x33c>
    1556:	9c af       	std	Y+60, r25	; 0x3c
    1558:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	8d ad       	ldd	r24, Y+61	; 0x3d
    155c:	9e ad       	ldd	r25, Y+62	; 0x3e
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9e af       	std	Y+62, r25	; 0x3e
    1562:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	8d ad       	ldd	r24, Y+61	; 0x3d
    1566:	9e ad       	ldd	r25, Y+62	; 0x3e
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <rechte_lijnbeide+0x330>
    156c:	16 c0       	rjmp	.+44     	; 0x159a <rechte_lijnbeide+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	fe 01       	movw	r30, r28
    1570:	ff 96       	adiw	r30, 0x3f	; 63
    1572:	60 81       	ld	r22, Z
    1574:	71 81       	ldd	r23, Z+1	; 0x01
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9e af       	std	Y+62, r25	; 0x3e
    1584:	8d af       	std	Y+61, r24	; 0x3d
    1586:	8d ad       	ldd	r24, Y+61	; 0x3d
    1588:	9e ad       	ldd	r25, Y+62	; 0x3e
    158a:	9a af       	std	Y+58, r25	; 0x3a
    158c:	89 af       	std	Y+57, r24	; 0x39
    158e:	89 ad       	ldd	r24, Y+57	; 0x39
    1590:	9a ad       	ldd	r25, Y+58	; 0x3a
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <rechte_lijnbeide+0x37c>
    1596:	9a af       	std	Y+58, r25	; 0x3a
    1598:	89 af       	std	Y+57, r24	; 0x39
                        _delay_ms(40);
                    }
                    if (PINA &(1 << PA1))
    159a:	e0 e2       	ldi	r30, 0x20	; 32
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	82 70       	andi	r24, 0x02	; 2
    15a6:	90 70       	andi	r25, 0x00	; 0
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	09 f4       	brne	.+2      	; 0x15ae <rechte_lijnbeide+0x398>
    15ac:	78 c0       	rjmp	.+240    	; 0x169e <rechte_lijnbeide+0x488>
                    {
                        motor (0,170);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	6a ea       	ldi	r22, 0xAA	; 170
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 e2       	ldi	r26, 0x20	; 32
    15c0:	b2 e4       	ldi	r27, 0x42	; 66
    15c2:	8d ab       	std	Y+53, r24	; 0x35
    15c4:	9e ab       	std	Y+54, r25	; 0x36
    15c6:	af ab       	std	Y+55, r26	; 0x37
    15c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ca:	6d a9       	ldd	r22, Y+53	; 0x35
    15cc:	7e a9       	ldd	r23, Y+54	; 0x36
    15ce:	8f a9       	ldd	r24, Y+55	; 0x37
    15d0:	98 ad       	ldd	r25, Y+56	; 0x38
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	4a e7       	ldi	r20, 0x7A	; 122
    15d8:	55 e4       	ldi	r21, 0x45	; 69
    15da:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	89 ab       	std	Y+49, r24	; 0x31
    15e4:	9a ab       	std	Y+50, r25	; 0x32
    15e6:	ab ab       	std	Y+51, r26	; 0x33
    15e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15ea:	69 a9       	ldd	r22, Y+49	; 0x31
    15ec:	7a a9       	ldd	r23, Y+50	; 0x32
    15ee:	8b a9       	ldd	r24, Y+51	; 0x33
    15f0:	9c a9       	ldd	r25, Y+52	; 0x34
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
    15fe:	88 23       	and	r24, r24
    1600:	2c f4       	brge	.+10     	; 0x160c <rechte_lijnbeide+0x3f6>
		__ticks = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	98 ab       	std	Y+48, r25	; 0x30
    1608:	8f a7       	std	Y+47, r24	; 0x2f
    160a:	3f c0       	rjmp	.+126    	; 0x168a <rechte_lijnbeide+0x474>
	else if (__tmp > 65535)
    160c:	69 a9       	ldd	r22, Y+49	; 0x31
    160e:	7a a9       	ldd	r23, Y+50	; 0x32
    1610:	8b a9       	ldd	r24, Y+51	; 0x33
    1612:	9c a9       	ldd	r25, Y+52	; 0x34
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	3f ef       	ldi	r19, 0xFF	; 255
    1618:	4f e7       	ldi	r20, 0x7F	; 127
    161a:	57 e4       	ldi	r21, 0x47	; 71
    161c:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
    1620:	18 16       	cp	r1, r24
    1622:	4c f5       	brge	.+82     	; 0x1676 <rechte_lijnbeide+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1624:	6d a9       	ldd	r22, Y+53	; 0x35
    1626:	7e a9       	ldd	r23, Y+54	; 0x36
    1628:	8f a9       	ldd	r24, Y+55	; 0x37
    162a:	98 ad       	ldd	r25, Y+56	; 0x38
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e2       	ldi	r20, 0x20	; 32
    1632:	51 e4       	ldi	r21, 0x41	; 65
    1634:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	98 ab       	std	Y+48, r25	; 0x30
    164a:	8f a7       	std	Y+47, r24	; 0x2f
    164c:	0f c0       	rjmp	.+30     	; 0x166c <rechte_lijnbeide+0x456>
    164e:	80 e9       	ldi	r24, 0x90	; 144
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	9e a7       	std	Y+46, r25	; 0x2e
    1654:	8d a7       	std	Y+45, r24	; 0x2d
    1656:	8d a5       	ldd	r24, Y+45	; 0x2d
    1658:	9e a5       	ldd	r25, Y+46	; 0x2e
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <rechte_lijnbeide+0x444>
    165e:	9e a7       	std	Y+46, r25	; 0x2e
    1660:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1662:	8f a5       	ldd	r24, Y+47	; 0x2f
    1664:	98 a9       	ldd	r25, Y+48	; 0x30
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	98 ab       	std	Y+48, r25	; 0x30
    166a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166c:	8f a5       	ldd	r24, Y+47	; 0x2f
    166e:	98 a9       	ldd	r25, Y+48	; 0x30
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	69 f7       	brne	.-38     	; 0x164e <rechte_lijnbeide+0x438>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <rechte_lijnbeide+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1676:	69 a9       	ldd	r22, Y+49	; 0x31
    1678:	7a a9       	ldd	r23, Y+50	; 0x32
    167a:	8b a9       	ldd	r24, Y+51	; 0x33
    167c:	9c a9       	ldd	r25, Y+52	; 0x34
    167e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	98 ab       	std	Y+48, r25	; 0x30
    1688:	8f a7       	std	Y+47, r24	; 0x2f
    168a:	8f a5       	ldd	r24, Y+47	; 0x2f
    168c:	98 a9       	ldd	r25, Y+48	; 0x30
    168e:	9c a7       	std	Y+44, r25	; 0x2c
    1690:	8b a7       	std	Y+43, r24	; 0x2b
    1692:	8b a5       	ldd	r24, Y+43	; 0x2b
    1694:	9c a5       	ldd	r25, Y+44	; 0x2c
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <rechte_lijnbeide+0x480>
    169a:	9c a7       	std	Y+44, r25	; 0x2c
    169c:	8b a7       	std	Y+43, r24	; 0x2b
                        _delay_ms(40);
                    }
                    if (Grote_klok >= 180)//stel de boog begint te laat dan kun je de waarde veranderen nu 18.0 seconden
    169e:	80 91 0e 03 	lds	r24, 0x030E
    16a2:	90 91 0f 03 	lds	r25, 0x030F
    16a6:	84 3b       	cpi	r24, 0xB4	; 180
    16a8:	91 05       	cpc	r25, r1
    16aa:	0c f4       	brge	.+2      	; 0x16ae <rechte_lijnbeide+0x498>
    16ac:	af c1       	rjmp	.+862    	; 0x1a0c <rechte_lijnbeide+0x7f6>
                    {
                        vlag = 0;
    16ae:	fe 01       	movw	r30, r28
    16b0:	e5 5a       	subi	r30, 0xA5	; 165
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	11 82       	std	Z+1, r1	; 0x01
    16b6:	10 82       	st	Z, r1
    16b8:	a9 c1       	rjmp	.+850    	; 0x1a0c <rechte_lijnbeide+0x7f6>
                    }
                }
                else
                {
                    int waarde = Grote_klok;
    16ba:	fe 01       	movw	r30, r28
    16bc:	e9 5a       	subi	r30, 0xA9	; 169
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 91 0e 03 	lds	r24, 0x030E
    16c4:	90 91 0f 03 	lds	r25, 0x030F
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	80 83       	st	Z, r24
                    motor (0,0);
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
                    PORTH |=  (1 << PH4);
    16d8:	a2 e0       	ldi	r26, 0x02	; 2
    16da:	b1 e0       	ldi	r27, 0x01	; 1
    16dc:	e2 e0       	ldi	r30, 0x02	; 2
    16de:	f1 e0       	ldi	r31, 0x01	; 1
    16e0:	80 81       	ld	r24, Z
    16e2:	80 61       	ori	r24, 0x10	; 16
    16e4:	8c 93       	st	X, r24
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	aa ef       	ldi	r26, 0xFA	; 250
    16ec:	b3 e4       	ldi	r27, 0x43	; 67
    16ee:	8f a3       	std	Y+39, r24	; 0x27
    16f0:	98 a7       	std	Y+40, r25	; 0x28
    16f2:	a9 a7       	std	Y+41, r26	; 0x29
    16f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f6:	6f a1       	ldd	r22, Y+39	; 0x27
    16f8:	78 a5       	ldd	r23, Y+40	; 0x28
    16fa:	89 a5       	ldd	r24, Y+41	; 0x29
    16fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a e7       	ldi	r20, 0x7A	; 122
    1704:	55 e4       	ldi	r21, 0x45	; 69
    1706:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	8b a3       	std	Y+35, r24	; 0x23
    1710:	9c a3       	std	Y+36, r25	; 0x24
    1712:	ad a3       	std	Y+37, r26	; 0x25
    1714:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1716:	6b a1       	ldd	r22, Y+35	; 0x23
    1718:	7c a1       	ldd	r23, Y+36	; 0x24
    171a:	8d a1       	ldd	r24, Y+37	; 0x25
    171c:	9e a1       	ldd	r25, Y+38	; 0x26
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e8       	ldi	r20, 0x80	; 128
    1724:	5f e3       	ldi	r21, 0x3F	; 63
    1726:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
    172a:	88 23       	and	r24, r24
    172c:	2c f4       	brge	.+10     	; 0x1738 <rechte_lijnbeide+0x522>
		__ticks = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9a a3       	std	Y+34, r25	; 0x22
    1734:	89 a3       	std	Y+33, r24	; 0x21
    1736:	3f c0       	rjmp	.+126    	; 0x17b6 <rechte_lijnbeide+0x5a0>
	else if (__tmp > 65535)
    1738:	6b a1       	ldd	r22, Y+35	; 0x23
    173a:	7c a1       	ldd	r23, Y+36	; 0x24
    173c:	8d a1       	ldd	r24, Y+37	; 0x25
    173e:	9e a1       	ldd	r25, Y+38	; 0x26
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	4c f5       	brge	.+82     	; 0x17a2 <rechte_lijnbeide+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1750:	6f a1       	ldd	r22, Y+39	; 0x27
    1752:	78 a5       	ldd	r23, Y+40	; 0x28
    1754:	89 a5       	ldd	r24, Y+41	; 0x29
    1756:	9a a5       	ldd	r25, Y+42	; 0x2a
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e2       	ldi	r20, 0x20	; 32
    175e:	51 e4       	ldi	r21, 0x41	; 65
    1760:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9a a3       	std	Y+34, r25	; 0x22
    1776:	89 a3       	std	Y+33, r24	; 0x21
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <rechte_lijnbeide+0x582>
    177a:	80 e9       	ldi	r24, 0x90	; 144
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	98 a3       	std	Y+32, r25	; 0x20
    1780:	8f 8f       	std	Y+31, r24	; 0x1f
    1782:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1784:	98 a1       	ldd	r25, Y+32	; 0x20
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <rechte_lijnbeide+0x570>
    178a:	98 a3       	std	Y+32, r25	; 0x20
    178c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178e:	89 a1       	ldd	r24, Y+33	; 0x21
    1790:	9a a1       	ldd	r25, Y+34	; 0x22
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	9a a3       	std	Y+34, r25	; 0x22
    1796:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1798:	89 a1       	ldd	r24, Y+33	; 0x21
    179a:	9a a1       	ldd	r25, Y+34	; 0x22
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	69 f7       	brne	.-38     	; 0x177a <rechte_lijnbeide+0x564>
    17a0:	14 c0       	rjmp	.+40     	; 0x17ca <rechte_lijnbeide+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	6b a1       	ldd	r22, Y+35	; 0x23
    17a4:	7c a1       	ldd	r23, Y+36	; 0x24
    17a6:	8d a1       	ldd	r24, Y+37	; 0x25
    17a8:	9e a1       	ldd	r25, Y+38	; 0x26
    17aa:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9a a3       	std	Y+34, r25	; 0x22
    17b4:	89 a3       	std	Y+33, r24	; 0x21
    17b6:	89 a1       	ldd	r24, Y+33	; 0x21
    17b8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ba:	9e 8f       	std	Y+30, r25	; 0x1e
    17bc:	8d 8f       	std	Y+29, r24	; 0x1d
    17be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <rechte_lijnbeide+0x5ac>
    17c6:	9e 8f       	std	Y+30, r25	; 0x1e
    17c8:	8d 8f       	std	Y+29, r24	; 0x1d
                    _delay_ms(500);
                    PORTH &= ~(1 << PH4);
    17ca:	a2 e0       	ldi	r26, 0x02	; 2
    17cc:	b1 e0       	ldi	r27, 0x01	; 1
    17ce:	e2 e0       	ldi	r30, 0x02	; 2
    17d0:	f1 e0       	ldi	r31, 0x01	; 1
    17d2:	80 81       	ld	r24, Z
    17d4:	8f 7e       	andi	r24, 0xEF	; 239
    17d6:	8c 93       	st	X, r24
                    Grote_klok = waarde;
    17d8:	fe 01       	movw	r30, r28
    17da:	e9 5a       	subi	r30, 0xA9	; 169
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	90 93 0f 03 	sts	0x030F, r25
    17e6:	80 93 0e 03 	sts	0x030E, r24
                    motor(170,170);
    17ea:	8a ea       	ldi	r24, 0xAA	; 170
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	6a ea       	ldi	r22, 0xAA	; 170
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a8 ec       	ldi	r26, 0xC8	; 200
    17fc:	b2 e4       	ldi	r27, 0x42	; 66
    17fe:	89 8f       	std	Y+25, r24	; 0x19
    1800:	9a 8f       	std	Y+26, r25	; 0x1a
    1802:	ab 8f       	std	Y+27, r26	; 0x1b
    1804:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	69 8d       	ldd	r22, Y+25	; 0x19
    1808:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a e7       	ldi	r20, 0x7A	; 122
    1814:	55 e4       	ldi	r21, 0x45	; 69
    1816:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8d 8b       	std	Y+21, r24	; 0x15
    1820:	9e 8b       	std	Y+22, r25	; 0x16
    1822:	af 8b       	std	Y+23, r26	; 0x17
    1824:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1826:	6d 89       	ldd	r22, Y+21	; 0x15
    1828:	7e 89       	ldd	r23, Y+22	; 0x16
    182a:	8f 89       	ldd	r24, Y+23	; 0x17
    182c:	98 8d       	ldd	r25, Y+24	; 0x18
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <rechte_lijnbeide+0x632>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9c 8b       	std	Y+20, r25	; 0x14
    1844:	8b 8b       	std	Y+19, r24	; 0x13
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <rechte_lijnbeide+0x6b0>
	else if (__tmp > 65535)
    1848:	6d 89       	ldd	r22, Y+21	; 0x15
    184a:	7e 89       	ldd	r23, Y+22	; 0x16
    184c:	8f 89       	ldd	r24, Y+23	; 0x17
    184e:	98 8d       	ldd	r25, Y+24	; 0x18
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <rechte_lijnbeide+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	69 8d       	ldd	r22, Y+25	; 0x19
    1862:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1864:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1866:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9c 8b       	std	Y+20, r25	; 0x14
    1886:	8b 8b       	std	Y+19, r24	; 0x13
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <rechte_lijnbeide+0x692>
    188a:	80 e9       	ldi	r24, 0x90	; 144
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	9a 8b       	std	Y+18, r25	; 0x12
    1890:	89 8b       	std	Y+17, r24	; 0x11
    1892:	89 89       	ldd	r24, Y+17	; 0x11
    1894:	9a 89       	ldd	r25, Y+18	; 0x12
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <rechte_lijnbeide+0x680>
    189a:	9a 8b       	std	Y+18, r25	; 0x12
    189c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8b 89       	ldd	r24, Y+19	; 0x13
    18a0:	9c 89       	ldd	r25, Y+20	; 0x14
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9c 8b       	std	Y+20, r25	; 0x14
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8b 89       	ldd	r24, Y+19	; 0x13
    18aa:	9c 89       	ldd	r25, Y+20	; 0x14
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <rechte_lijnbeide+0x674>
    18b0:	ad c0       	rjmp	.+346    	; 0x1a0c <rechte_lijnbeide+0x7f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6d 89       	ldd	r22, Y+21	; 0x15
    18b4:	7e 89       	ldd	r23, Y+22	; 0x16
    18b6:	8f 89       	ldd	r24, Y+23	; 0x17
    18b8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ba:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9c 8b       	std	Y+20, r25	; 0x14
    18c4:	8b 8b       	std	Y+19, r24	; 0x13
    18c6:	8b 89       	ldd	r24, Y+19	; 0x13
    18c8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ca:	98 8b       	std	Y+16, r25	; 0x10
    18cc:	8f 87       	std	Y+15, r24	; 0x0f
    18ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d0:	98 89       	ldd	r25, Y+16	; 0x10
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <rechte_lijnbeide+0x6bc>
    18d6:	98 8b       	std	Y+16, r25	; 0x10
    18d8:	8f 87       	std	Y+15, r24	; 0x0f
    18da:	98 c0       	rjmp	.+304    	; 0x1a0c <rechte_lijnbeide+0x7f6>
                    _delay_ms(100);
                }
            }
            else
            {
                int waarde = Grote_klok;
    18dc:	fe 01       	movw	r30, r28
    18de:	eb 5a       	subi	r30, 0xAB	; 171
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 91 0e 03 	lds	r24, 0x030E
    18e6:	90 91 0f 03 	lds	r25, 0x030F
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	80 83       	st	Z, r24
                motor (0,0);
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
                PORTH |=  (1 << PH4);
    18fa:	a2 e0       	ldi	r26, 0x02	; 2
    18fc:	b1 e0       	ldi	r27, 0x01	; 1
    18fe:	e2 e0       	ldi	r30, 0x02	; 2
    1900:	f1 e0       	ldi	r31, 0x01	; 1
    1902:	80 81       	ld	r24, Z
    1904:	80 61       	ori	r24, 0x10	; 16
    1906:	8c 93       	st	X, r24
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	aa ef       	ldi	r26, 0xFA	; 250
    190e:	b3 e4       	ldi	r27, 0x43	; 67
    1910:	8b 87       	std	Y+11, r24	; 0x0b
    1912:	9c 87       	std	Y+12, r25	; 0x0c
    1914:	ad 87       	std	Y+13, r26	; 0x0d
    1916:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a e7       	ldi	r20, 0x7A	; 122
    1926:	55 e4       	ldi	r21, 0x45	; 69
    1928:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8f 83       	std	Y+7, r24	; 0x07
    1932:	98 87       	std	Y+8, r25	; 0x08
    1934:	a9 87       	std	Y+9, r26	; 0x09
    1936:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 0e 14 	call	0x281c	; 0x281c <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	2c f4       	brge	.+10     	; 0x195a <rechte_lijnbeide+0x744>
		__ticks = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <rechte_lijnbeide+0x7c2>
	else if (__tmp > 65535)
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 ae 13 	call	0x275c	; 0x275c <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	4c f5       	brge	.+82     	; 0x19c4 <rechte_lijnbeide+0x7ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	6b 85       	ldd	r22, Y+11	; 0x0b
    1974:	7c 85       	ldd	r23, Y+12	; 0x0c
    1976:	8d 85       	ldd	r24, Y+13	; 0x0d
    1978:	9e 85       	ldd	r25, Y+14	; 0x0e
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <rechte_lijnbeide+0x7a4>
    199c:	80 e9       	ldi	r24, 0x90	; 144
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <rechte_lijnbeide+0x792>
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <rechte_lijnbeide+0x786>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <rechte_lijnbeide+0x7d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <rechte_lijnbeide+0x7ce>
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(500);
                PORTH &= ~(1 << PH4);
    19ec:	a2 e0       	ldi	r26, 0x02	; 2
    19ee:	b1 e0       	ldi	r27, 0x01	; 1
    19f0:	e2 e0       	ldi	r30, 0x02	; 2
    19f2:	f1 e0       	ldi	r31, 0x01	; 1
    19f4:	80 81       	ld	r24, Z
    19f6:	8f 7e       	andi	r24, 0xEF	; 239
    19f8:	8c 93       	st	X, r24
                Grote_klok = waarde;
    19fa:	fe 01       	movw	r30, r28
    19fc:	eb 5a       	subi	r30, 0xAB	; 171
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	90 93 0f 03 	sts	0x030F, r25
    1a08:	80 93 0e 03 	sts	0x030E, r24
void rechte_lijnbeide(void)
{
    int vlag = 1;
    TCNT1 = 0;
    Grote_klok = 0;
    while (vlag) //(ultrasoon <= 37)
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e5 5a       	subi	r30, 0xA5	; 165
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <rechte_lijnbeide+0x806>
    1a1a:	1a cc       	rjmp	.-1996   	; 0x1250 <rechte_lijnbeide+0x3a>
                PORTH &= ~(1 << PH4);
                Grote_klok = waarde;
            }
        }
    }
}
    1a1c:	c4 5a       	subi	r28, 0xA4	; 164
    1a1e:	df 4f       	sbci	r29, 0xFF	; 255
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <bocht_links>:

    void bocht_links (void)
    {
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	0f 92       	push	r0
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
        int vlag;
        TCNT1 = 0;
    1a40:	e4 e8       	ldi	r30, 0x84	; 132
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	11 82       	std	Z+1, r1	; 0x01
    1a46:	10 82       	st	Z, r1
        Grote_klok = 0;
    1a48:	10 92 0f 03 	sts	0x030F, r1
    1a4c:	10 92 0e 03 	sts	0x030E, r1
    1a50:	45 c0       	rjmp	.+138    	; 0x1adc <bocht_links+0xa8>
        while ((vlag == 1))// && (PINA &(1 << PA0))
        {
            motor(35,170); //bocht naar rechts maken
    1a52:	83 e2       	ldi	r24, 0x23	; 35
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	6a ea       	ldi	r22, 0xAA	; 170
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
            if ((PINA &(1 << PA0)) && (Grote_klok <= 11.3)) //waarde
    1a5e:	e0 e2       	ldi	r30, 0x20	; 32
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	81 70       	andi	r24, 0x01	; 1
    1a6a:	90 70       	andi	r25, 0x00	; 0
    1a6c:	88 23       	and	r24, r24
    1a6e:	d1 f0       	breq	.+52     	; 0x1aa4 <bocht_links+0x70>
    1a70:	80 91 0e 03 	lds	r24, 0x030E
    1a74:	90 91 0f 03 	lds	r25, 0x030F
    1a78:	aa 27       	eor	r26, r26
    1a7a:	97 fd       	sbrc	r25, 7
    1a7c:	a0 95       	com	r26
    1a7e:	ba 2f       	mov	r27, r26
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__floatsisf>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	2d ec       	ldi	r18, 0xCD	; 205
    1a92:	3c ec       	ldi	r19, 0xCC	; 204
    1a94:	44 e3       	ldi	r20, 0x34	; 52
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 3e 14 	call	0x287c	; 0x287c <__lesf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	14 f0       	brlt	.+4      	; 0x1aa4 <bocht_links+0x70>
            {
                error();
    1aa0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <error>
            }
            if (Grote_klok >= 11.3)
    1aa4:	80 91 0e 03 	lds	r24, 0x030E
    1aa8:	90 91 0f 03 	lds	r25, 0x030F
    1aac:	aa 27       	eor	r26, r26
    1aae:	97 fd       	sbrc	r25, 7
    1ab0:	a0 95       	com	r26
    1ab2:	ba 2f       	mov	r27, r26
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__floatsisf>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	2d ec       	ldi	r18, 0xCD	; 205
    1ac6:	3c ec       	ldi	r19, 0xCC	; 204
    1ac8:	44 e3       	ldi	r20, 0x34	; 52
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 de 13 	call	0x27bc	; 0x27bc <__gesf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	24 f0       	brlt	.+8      	; 0x1adc <bocht_links+0xa8>
            {
                vlag = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
    void bocht_links (void)
    {
        int vlag;
        TCNT1 = 0;
        Grote_klok = 0;
        while ((vlag == 1))// && (PINA &(1 << PA0))
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <bocht_links+0xb4>
    1ae6:	b5 cf       	rjmp	.-150    	; 0x1a52 <bocht_links+0x1e>
                vlag = 1;
            }

        }

    }
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <bocht_rechts>:



void bocht_rechts (void)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	0f 92       	push	r0
    1af8:	0f 92       	push	r0
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    int vlag;
    TCNT1 = 0;
    1afe:	e4 e8       	ldi	r30, 0x84	; 132
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	11 82       	std	Z+1, r1	; 0x01
    1b04:	10 82       	st	Z, r1
    Grote_klok = 0;
    1b06:	10 92 0f 03 	sts	0x030F, r1
    1b0a:	10 92 0e 03 	sts	0x030E, r1
    1b0e:	45 c0       	rjmp	.+138    	; 0x1b9a <bocht_rechts+0xa8>
    while ((vlag == 1)) //(PINA &(1 << PA0)) &&
    {
        motor(170,35); //bocht naar rechts maken
    1b10:	8a ea       	ldi	r24, 0xAA	; 170
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	63 e2       	ldi	r22, 0x23	; 35
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
        if ((PINA &(1 << PA0)) && (Grote_klok <= 11.3)) //waarde
    1b1c:	e0 e2       	ldi	r30, 0x20	; 32
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	90 70       	andi	r25, 0x00	; 0
    1b2a:	88 23       	and	r24, r24
    1b2c:	d1 f0       	breq	.+52     	; 0x1b62 <bocht_rechts+0x70>
    1b2e:	80 91 0e 03 	lds	r24, 0x030E
    1b32:	90 91 0f 03 	lds	r25, 0x030F
    1b36:	aa 27       	eor	r26, r26
    1b38:	97 fd       	sbrc	r25, 7
    1b3a:	a0 95       	com	r26
    1b3c:	ba 2f       	mov	r27, r26
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__floatsisf>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	2d ec       	ldi	r18, 0xCD	; 205
    1b50:	3c ec       	ldi	r19, 0xCC	; 204
    1b52:	44 e3       	ldi	r20, 0x34	; 52
    1b54:	51 e4       	ldi	r21, 0x41	; 65
    1b56:	0e 94 3e 14 	call	0x287c	; 0x287c <__lesf2>
    1b5a:	18 16       	cp	r1, r24
    1b5c:	14 f0       	brlt	.+4      	; 0x1b62 <bocht_rechts+0x70>
        {
            error();
    1b5e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <error>
        }
        if (Grote_klok >= 11.3)
    1b62:	80 91 0e 03 	lds	r24, 0x030E
    1b66:	90 91 0f 03 	lds	r25, 0x030F
    1b6a:	aa 27       	eor	r26, r26
    1b6c:	97 fd       	sbrc	r25, 7
    1b6e:	a0 95       	com	r26
    1b70:	ba 2f       	mov	r27, r26
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__floatsisf>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	2d ec       	ldi	r18, 0xCD	; 205
    1b84:	3c ec       	ldi	r19, 0xCC	; 204
    1b86:	44 e3       	ldi	r20, 0x34	; 52
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__gesf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	24 f0       	brlt	.+8      	; 0x1b9a <bocht_rechts+0xa8>
        {
            vlag = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	89 83       	std	Y+1, r24	; 0x01
void bocht_rechts (void)
{
    int vlag;
    TCNT1 = 0;
    Grote_klok = 0;
    while ((vlag == 1)) //(PINA &(1 << PA0)) &&
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <bocht_rechts+0xb4>
    1ba4:	b5 cf       	rjmp	.-150    	; 0x1b10 <bocht_rechts+0x1e>
            vlag = 1;
        }

    }

}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <error>:

void error (void) //om een probleem optelossen todat we een betere oplossing hebben of niet
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    while (1)
    {
        motor(0,0);
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	0e 94 c5 10 	call	0x218a	; 0x218a <motor>
    1bc4:	f9 cf       	rjmp	.-14     	; 0x1bb8 <error+0x8>

00001bc6 <__vector_17>:
uint16_t waarde2;
uint32_t counts;
int geweest;

ISR(TIMER1_COMPA_vect)
{
    1bc6:	1f 92       	push	r1
    1bc8:	0f 92       	push	r0
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	0f 92       	push	r0
    1bce:	00 90 5b 00 	lds	r0, 0x005B
    1bd2:	0f 92       	push	r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	8f 93       	push	r24
    1bd8:	9f 93       	push	r25
    1bda:	ef 93       	push	r30
    1bdc:	ff 93       	push	r31
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
    1be6:	e4 e8       	ldi	r30, 0x84	; 132
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	11 82       	std	Z+1, r1	; 0x01
    1bec:	10 82       	st	Z, r1
    Grote_klok++;
    1bee:	80 91 0e 03 	lds	r24, 0x030E
    1bf2:	90 91 0f 03 	lds	r25, 0x030F
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	90 93 0f 03 	sts	0x030F, r25
    1bfc:	80 93 0e 03 	sts	0x030E, r24
}
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	ff 91       	pop	r31
    1c06:	ef 91       	pop	r30
    1c08:	9f 91       	pop	r25
    1c0a:	8f 91       	pop	r24
    1c0c:	0f 90       	pop	r0
    1c0e:	00 92 5b 00 	sts	0x005B, r0
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <__vector_41>:

ISR (TIMER4_CAPT_vect)
{
    1c1c:	1f 92       	push	r1
    1c1e:	0f 92       	push	r0
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	0f 92       	push	r0
    1c24:	00 90 5b 00 	lds	r0, 0x005B
    1c28:	0f 92       	push	r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	2f 93       	push	r18
    1c36:	3f 93       	push	r19
    1c38:	4f 93       	push	r20
    1c3a:	5f 93       	push	r21
    1c3c:	6f 93       	push	r22
    1c3e:	7f 93       	push	r23
    1c40:	8f 93       	push	r24
    1c42:	9f 93       	push	r25
    1c44:	af 93       	push	r26
    1c46:	bf 93       	push	r27
    1c48:	ef 93       	push	r30
    1c4a:	ff 93       	push	r31
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    if (TCCR4B & (1<<ICES4)) // On rising edge
    1c54:	e1 ea       	ldi	r30, 0xA1	; 161
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	80 74       	andi	r24, 0x40	; 64
    1c60:	90 70       	andi	r25, 0x00	; 0
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	31 f1       	breq	.+76     	; 0x1cb2 <__vector_41+0x96>
    {
        TCCR4B &= ~(1<<ICES4); // Next time detect falling edge
    1c66:	a1 ea       	ldi	r26, 0xA1	; 161
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e1 ea       	ldi	r30, 0xA1	; 161
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8f 7b       	andi	r24, 0xBF	; 191
    1c72:	8c 93       	st	X, r24
        waarde1 = TCNT4; // Save current count
    1c74:	e4 ea       	ldi	r30, 0xA4	; 164
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	91 81       	ldd	r25, Z+1	; 0x01
    1c7c:	90 93 1b 03 	sts	0x031B, r25
    1c80:	80 93 1a 03 	sts	0x031A, r24
        if (geweest == 0)
    1c84:	80 91 12 03 	lds	r24, 0x0312
    1c88:	90 91 13 03 	lds	r25, 0x0313
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	61 f4       	brne	.+24     	; 0x1ca8 <__vector_41+0x8c>
        {
            ultrasoon = 23;
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a8 eb       	ldi	r26, 0xB8	; 184
    1c96:	b1 e4       	ldi	r27, 0x41	; 65
    1c98:	80 93 08 03 	sts	0x0308, r24
    1c9c:	90 93 09 03 	sts	0x0309, r25
    1ca0:	a0 93 0a 03 	sts	0x030A, r26
    1ca4:	b0 93 0b 03 	sts	0x030B, r27
        }
        geweest = 0;
    1ca8:	10 92 13 03 	sts	0x0313, r1
    1cac:	10 92 12 03 	sts	0x0312, r1
    1cb0:	56 c0       	rjmp	.+172    	; 0x1d5e <__vector_41+0x142>
    }
    else // On falling edge
    {
        geweest = 1;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	90 93 13 03 	sts	0x0313, r25
    1cba:	80 93 12 03 	sts	0x0312, r24
        TCCR4B |= 0; // geen interrupts meer
    1cbe:	a1 ea       	ldi	r26, 0xA1	; 161
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e1 ea       	ldi	r30, 0xA1	; 161
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	8c 93       	st	X, r24
        waarde2 = TCNT4; // Save current count
    1cca:	e4 ea       	ldi	r30, 0xA4	; 164
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	91 81       	ldd	r25, Z+1	; 0x01
    1cd2:	90 93 15 03 	sts	0x0315, r25
    1cd6:	80 93 14 03 	sts	0x0314, r24
        counts = (uint32_t)waarde2 - (uint32_t)waarde1;
    1cda:	80 91 14 03 	lds	r24, 0x0314
    1cde:	90 91 15 03 	lds	r25, 0x0315
    1ce2:	9c 01       	movw	r18, r24
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	80 91 1a 03 	lds	r24, 0x031A
    1cec:	90 91 1b 03 	lds	r25, 0x031B
    1cf0:	cc 01       	movw	r24, r24
    1cf2:	a0 e0       	ldi	r26, 0x00	; 0
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	79 01       	movw	r14, r18
    1cf8:	8a 01       	movw	r16, r20
    1cfa:	e8 1a       	sub	r14, r24
    1cfc:	f9 0a       	sbc	r15, r25
    1cfe:	0a 0b       	sbc	r16, r26
    1d00:	1b 0b       	sbc	r17, r27
    1d02:	d8 01       	movw	r26, r16
    1d04:	c7 01       	movw	r24, r14
    1d06:	80 93 16 03 	sts	0x0316, r24
    1d0a:	90 93 17 03 	sts	0x0317, r25
    1d0e:	a0 93 18 03 	sts	0x0318, r26
    1d12:	b0 93 19 03 	sts	0x0319, r27
        ultrasoon = (counts/2)*0.01715; //snelheid van geluid keer de tijd die de klok vertegenwoordigd (16/8 = 2 1/2E6= 5E-7)
    1d16:	80 91 16 03 	lds	r24, 0x0316
    1d1a:	90 91 17 03 	lds	r25, 0x0317
    1d1e:	a0 91 18 03 	lds	r26, 0x0318
    1d22:	b0 91 19 03 	lds	r27, 0x0319
    1d26:	b6 95       	lsr	r27
    1d28:	a7 95       	ror	r26
    1d2a:	97 95       	ror	r25
    1d2c:	87 95       	ror	r24
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__floatunsisf>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	bc 01       	movw	r22, r24
    1d3c:	cd 01       	movw	r24, r26
    1d3e:	28 e2       	ldi	r18, 0x28	; 40
    1d40:	3e e7       	ldi	r19, 0x7E	; 126
    1d42:	4c e8       	ldi	r20, 0x8C	; 140
    1d44:	5c e3       	ldi	r21, 0x3C	; 60
    1d46:	0e 94 b4 12 	call	0x2568	; 0x2568 <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	80 93 08 03 	sts	0x0308, r24
    1d52:	90 93 09 03 	sts	0x0309, r25
    1d56:	a0 93 0a 03 	sts	0x030A, r26
    1d5a:	b0 93 0b 03 	sts	0x030B, r27
    }
}
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	ff 91       	pop	r31
    1d64:	ef 91       	pop	r30
    1d66:	bf 91       	pop	r27
    1d68:	af 91       	pop	r26
    1d6a:	9f 91       	pop	r25
    1d6c:	8f 91       	pop	r24
    1d6e:	7f 91       	pop	r23
    1d70:	6f 91       	pop	r22
    1d72:	5f 91       	pop	r21
    1d74:	4f 91       	pop	r20
    1d76:	3f 91       	pop	r19
    1d78:	2f 91       	pop	r18
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	0f 90       	pop	r0
    1d84:	00 92 5b 00 	sts	0x005B, r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	0f 90       	pop	r0
    1d8e:	1f 90       	pop	r1
    1d90:	18 95       	reti

00001d92 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    1d92:	1f 92       	push	r1
    1d94:	0f 92       	push	r0
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	0f 92       	push	r0
    1d9a:	00 90 5b 00 	lds	r0, 0x005B
    1d9e:	0f 92       	push	r0
    1da0:	11 24       	eor	r1, r1
    1da2:	8f 93       	push	r24
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	ef 93       	push	r30
    1daa:	ff 93       	push	r31
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    PORTC &= ~(1 << PC5);
    1db4:	a8 e2       	ldi	r26, 0x28	; 40
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e8 e2       	ldi	r30, 0x28	; 40
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8f 7d       	andi	r24, 0xDF	; 223
    1dc0:	8c 93       	st	X, r24

    TIMSK4 |= (1 << ICIE4);
    1dc2:	a2 e7       	ldi	r26, 0x72	; 114
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e2 e7       	ldi	r30, 0x72	; 114
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 62       	ori	r24, 0x20	; 32
    1dce:	8c 93       	st	X, r24
    TCCR4B |= (1 << ICES4);
    1dd0:	a1 ea       	ldi	r26, 0xA1	; 161
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e1 ea       	ldi	r30, 0xA1	; 161
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	80 64       	ori	r24, 0x40	; 64
    1ddc:	8c 93       	st	X, r24
}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	ff 91       	pop	r31
    1de4:	ef 91       	pop	r30
    1de6:	bf 91       	pop	r27
    1de8:	af 91       	pop	r26
    1dea:	8f 91       	pop	r24
    1dec:	0f 90       	pop	r0
    1dee:	00 92 5b 00 	sts	0x005B, r0
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	0f 90       	pop	r0
    1df8:	1f 90       	pop	r1
    1dfa:	18 95       	reti

00001dfc <__vector_15>:

ISR(TIMER2_OVF_vect)
{
    1dfc:	1f 92       	push	r1
    1dfe:	0f 92       	push	r0
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	0f 92       	push	r0
    1e04:	00 90 5b 00 	lds	r0, 0x005B
    1e08:	0f 92       	push	r0
    1e0a:	11 24       	eor	r1, r1
    1e0c:	8f 93       	push	r24
    1e0e:	9f 93       	push	r25
    1e10:	af 93       	push	r26
    1e12:	bf 93       	push	r27
    1e14:	ef 93       	push	r30
    1e16:	ff 93       	push	r31
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    PORTC |= (1<<PC5);
    1e20:	a8 e2       	ldi	r26, 0x28	; 40
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e8 e2       	ldi	r30, 0x28	; 40
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 62       	ori	r24, 0x20	; 32
    1e2c:	8c 93       	st	X, r24
    TCNT4 =0;
    1e2e:	e4 ea       	ldi	r30, 0xA4	; 164
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	11 82       	std	Z+1, r1	; 0x01
    1e34:	10 82       	st	Z, r1
    OCR4A = 20;
    1e36:	e8 ea       	ldi	r30, 0xA8	; 168
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	84 e1       	ldi	r24, 0x14	; 20
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	80 83       	st	Z, r24
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	ff 91       	pop	r31
    1e48:	ef 91       	pop	r30
    1e4a:	bf 91       	pop	r27
    1e4c:	af 91       	pop	r26
    1e4e:	9f 91       	pop	r25
    1e50:	8f 91       	pop	r24
    1e52:	0f 90       	pop	r0
    1e54:	00 92 5b 00 	sts	0x005B, r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti

00001e62 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
    1e62:	1f 92       	push	r1
    1e64:	0f 92       	push	r0
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	0f 92       	push	r0
    1e6a:	00 90 5b 00 	lds	r0, 0x005B
    1e6e:	0f 92       	push	r0
    1e70:	11 24       	eor	r1, r1
    1e72:	8f 93       	push	r24
    1e74:	9f 93       	push	r25
    1e76:	af 93       	push	r26
    1e78:	bf 93       	push	r27
    1e7a:	ef 93       	push	r30
    1e7c:	ff 93       	push	r31
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    if (ADCSRA & (1 << ADIF))
    1e86:	ea e7       	ldi	r30, 0x7A	; 122
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	80 71       	andi	r24, 0x10	; 16
    1e92:	90 70       	andi	r25, 0x00	; 0
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	41 f0       	breq	.+16     	; 0x1ea8 <__vector_13+0x46>
    {
        Ir_links= ADC; //waarde ir links wordt upgedate
    1e98:	e8 e7       	ldi	r30, 0x78	; 120
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	90 93 11 03 	sts	0x0311, r25
    1ea4:	80 93 10 03 	sts	0x0310, r24
    }
    ADMUX &= ~(1);// Analoog 6 wissel naar
    1ea8:	ac e7       	ldi	r26, 0x7C	; 124
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ec e7       	ldi	r30, 0x7C	; 124
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8e 7f       	andi	r24, 0xFE	; 254
    1eb4:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADSC); //start convertion
    1eb6:	aa e7       	ldi	r26, 0x7A	; 122
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	ea e7       	ldi	r30, 0x7A	; 122
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 64       	ori	r24, 0x40	; 64
    1ec2:	8c 93       	st	X, r24
}
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	ff 91       	pop	r31
    1eca:	ef 91       	pop	r30
    1ecc:	bf 91       	pop	r27
    1ece:	af 91       	pop	r26
    1ed0:	9f 91       	pop	r25
    1ed2:	8f 91       	pop	r24
    1ed4:	0f 90       	pop	r0
    1ed6:	00 92 5b 00 	sts	0x005B, r0
    1eda:	0f 90       	pop	r0
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	0f 90       	pop	r0
    1ee0:	1f 90       	pop	r1
    1ee2:	18 95       	reti

00001ee4 <__vector_14>:

ISR(TIMER2_COMPB_vect)
{
    1ee4:	1f 92       	push	r1
    1ee6:	0f 92       	push	r0
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	0f 92       	push	r0
    1eec:	00 90 5b 00 	lds	r0, 0x005B
    1ef0:	0f 92       	push	r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	8f 93       	push	r24
    1ef6:	9f 93       	push	r25
    1ef8:	af 93       	push	r26
    1efa:	bf 93       	push	r27
    1efc:	ef 93       	push	r30
    1efe:	ff 93       	push	r31
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    if(ADCSRA & (1 << ADIF))
    1f08:	ea e7       	ldi	r30, 0x7A	; 122
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	80 71       	andi	r24, 0x10	; 16
    1f14:	90 70       	andi	r25, 0x00	; 0
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	41 f0       	breq	.+16     	; 0x1f2a <__vector_14+0x46>
    {
        Ir_rechts = ADC; //waarde ir links wordt upgedate
    1f1a:	e8 e7       	ldi	r30, 0x78	; 120
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	91 81       	ldd	r25, Z+1	; 0x01
    1f22:	90 93 0d 03 	sts	0x030D, r25
    1f26:	80 93 0c 03 	sts	0x030C, r24
    }
    ADMUX |= 7;
    1f2a:	ac e7       	ldi	r26, 0x7C	; 124
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	ec e7       	ldi	r30, 0x7C	; 124
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	87 60       	ori	r24, 0x07	; 7
    1f36:	8c 93       	st	X, r24
    ADCSRA |= (1<<ADSC); //start convertion
    1f38:	aa e7       	ldi	r26, 0x7A	; 122
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ea e7       	ldi	r30, 0x7A	; 122
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	80 64       	ori	r24, 0x40	; 64
    1f44:	8c 93       	st	X, r24
}
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	0f 90       	pop	r0
    1f58:	00 92 5b 00 	sts	0x005B, r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
    1f66:	1f 92       	push	r1
    1f68:	0f 92       	push	r0
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	0f 92       	push	r0
    1f6e:	00 90 5b 00 	lds	r0, 0x005B
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	8f 93       	push	r24
    1f78:	af 93       	push	r26
    1f7a:	bf 93       	push	r27
    1f7c:	ef 93       	push	r30
    1f7e:	ff 93       	push	r31
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    if (OCR0A == 0)
    1f88:	e7 e4       	ldi	r30, 0x47	; 71
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 23       	and	r24, r24
    1f90:	39 f4       	brne	.+14     	; 0x1fa0 <__vector_23+0x3a>
    {
        PORTE &= ~(1<<PE4);
    1f92:	ae e2       	ldi	r26, 0x2E	; 46
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	ee e2       	ldi	r30, 0x2E	; 46
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8f 7e       	andi	r24, 0xEF	; 239
    1f9e:	8c 93       	st	X, r24
    }
    if (OCR0B == 0)
    1fa0:	e8 e4       	ldi	r30, 0x48	; 72
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 23       	and	r24, r24
    1fa8:	39 f4       	brne	.+14     	; 0x1fb8 <__vector_23+0x52>
    {
        PORTE &= ~(1<<PE3);
    1faa:	ae e2       	ldi	r26, 0x2E	; 46
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	ee e2       	ldi	r30, 0x2E	; 46
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	87 7f       	andi	r24, 0xF7	; 247
    1fb6:	8c 93       	st	X, r24
    }
    if (OCR0A != 0)
    1fb8:	e7 e4       	ldi	r30, 0x47	; 71
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	88 23       	and	r24, r24
    1fc0:	39 f0       	breq	.+14     	; 0x1fd0 <__vector_23+0x6a>
    {
        PORTE |= (1<<PE4);
    1fc2:	ae e2       	ldi	r26, 0x2E	; 46
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	ee e2       	ldi	r30, 0x2E	; 46
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 61       	ori	r24, 0x10	; 16
    1fce:	8c 93       	st	X, r24
    }
    if (OCR0B != 0)
    1fd0:	e8 e4       	ldi	r30, 0x48	; 72
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	88 23       	and	r24, r24
    1fd8:	39 f0       	breq	.+14     	; 0x1fe8 <__vector_23+0x82>
    {
        PORTE |= (1<<PE3);
    1fda:	ae e2       	ldi	r26, 0x2E	; 46
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	ee e2       	ldi	r30, 0x2E	; 46
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 60       	ori	r24, 0x08	; 8
    1fe6:	8c 93       	st	X, r24
    }
}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	ff 91       	pop	r31
    1fee:	ef 91       	pop	r30
    1ff0:	bf 91       	pop	r27
    1ff2:	af 91       	pop	r26
    1ff4:	8f 91       	pop	r24
    1ff6:	0f 90       	pop	r0
    1ff8:	00 92 5b 00 	sts	0x005B, r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	0f 90       	pop	r0
    2002:	1f 90       	pop	r1
    2004:	18 95       	reti

00002006 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
    2006:	1f 92       	push	r1
    2008:	0f 92       	push	r0
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	0f 92       	push	r0
    200e:	00 90 5b 00 	lds	r0, 0x005B
    2012:	0f 92       	push	r0
    2014:	11 24       	eor	r1, r1
    2016:	8f 93       	push	r24
    2018:	af 93       	push	r26
    201a:	bf 93       	push	r27
    201c:	ef 93       	push	r30
    201e:	ff 93       	push	r31
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    PORTE &= ~(1<<PE4);
    2028:	ae e2       	ldi	r26, 0x2E	; 46
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	ee e2       	ldi	r30, 0x2E	; 46
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 7e       	andi	r24, 0xEF	; 239
    2034:	8c 93       	st	X, r24
}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	ff 91       	pop	r31
    203c:	ef 91       	pop	r30
    203e:	bf 91       	pop	r27
    2040:	af 91       	pop	r26
    2042:	8f 91       	pop	r24
    2044:	0f 90       	pop	r0
    2046:	00 92 5b 00 	sts	0x005B, r0
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	0f 90       	pop	r0
    2050:	1f 90       	pop	r1
    2052:	18 95       	reti

00002054 <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
    2054:	1f 92       	push	r1
    2056:	0f 92       	push	r0
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	0f 92       	push	r0
    205c:	00 90 5b 00 	lds	r0, 0x005B
    2060:	0f 92       	push	r0
    2062:	11 24       	eor	r1, r1
    2064:	8f 93       	push	r24
    2066:	af 93       	push	r26
    2068:	bf 93       	push	r27
    206a:	ef 93       	push	r30
    206c:	ff 93       	push	r31
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    PORTE &= ~(1<<PE3);
    2076:	ae e2       	ldi	r26, 0x2E	; 46
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	ee e2       	ldi	r30, 0x2E	; 46
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	87 7f       	andi	r24, 0xF7	; 247
    2082:	8c 93       	st	X, r24
}
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	ff 91       	pop	r31
    208a:	ef 91       	pop	r30
    208c:	bf 91       	pop	r27
    208e:	af 91       	pop	r26
    2090:	8f 91       	pop	r24
    2092:	0f 90       	pop	r0
    2094:	00 92 5b 00 	sts	0x005B, r0
    2098:	0f 90       	pop	r0
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	0f 90       	pop	r0
    209e:	1f 90       	pop	r1
    20a0:	18 95       	reti

000020a2 <init_motor>:

void init_motor (void)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    // Output low
    PORTE &= ~(1<<PE4); //motor laag
    20aa:	ae e2       	ldi	r26, 0x2E	; 46
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	ee e2       	ldi	r30, 0x2E	; 46
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	8f 7e       	andi	r24, 0xEF	; 239
    20b6:	8c 93       	st	X, r24
    PORTE &= ~(1<<PE3);
    20b8:	ae e2       	ldi	r26, 0x2E	; 46
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	ee e2       	ldi	r30, 0x2E	; 46
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	87 7f       	andi	r24, 0xF7	; 247
    20c4:	8c 93       	st	X, r24

    //Use mode 0, clkdiv = 64 klok 0 Pwm signalen
    TCCR0A = 0;
    20c6:	e4 e4       	ldi	r30, 0x44	; 68
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	10 82       	st	Z, r1
    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
    20cc:	e5 e4       	ldi	r30, 0x45	; 69
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	80 83       	st	Z, r24
    TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0);
    20d4:	ee e6       	ldi	r30, 0x6E	; 110
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	87 e0       	ldi	r24, 0x07	; 7
    20da:	80 83       	st	Z, r24
    OCR0A = 0;
    20dc:	e7 e4       	ldi	r30, 0x47	; 71
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	10 82       	st	Z, r1
    OCR0B = 0;
    20e2:	e8 e4       	ldi	r30, 0x48	; 72
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	10 82       	st	Z, r1

    //Use mode 0, clkdiv = 256 klok 1 globale klok
    TCCR1A = 0;
    20e8:	e0 e8       	ldi	r30, 0x80	; 128
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	10 82       	st	Z, r1
    TCCR1B = (1<<CS12) | (0<<CS11) | (0<<CS10);
    20ee:	e1 e8       	ldi	r30, 0x81	; 129
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	84 e0       	ldi	r24, 0x04	; 4
    20f4:	80 83       	st	Z, r24
    TIMSK1 = (1<<OCIE0A);
    20f6:	ef e6       	ldi	r30, 0x6F	; 111
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	80 83       	st	Z, r24
    OCR1A = 6250; //0.1 van een seconde dus kan gebruikt worden om een grote klok te maken voor 25.5 seconden
    20fe:	e8 e8       	ldi	r30, 0x88	; 136
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	8a e6       	ldi	r24, 0x6A	; 106
    2104:	98 e1       	ldi	r25, 0x18	; 24
    2106:	91 83       	std	Z+1, r25	; 0x01
    2108:	80 83       	st	Z, r24

    //Use mode 0, clkdiv = 1024   klok 2 globale trigger
    TCCR2A = 0;
    210a:	e0 eb       	ldi	r30, 0xB0	; 176
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	10 82       	st	Z, r1
    TCCR2B = (1<<CS22) | (0<<CS21) | (1<<CS20);
    2110:	e1 eb       	ldi	r30, 0xB1	; 177
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	85 e0       	ldi	r24, 0x05	; 5
    2116:	80 83       	st	Z, r24
    TIMSK2 = (1<<OCIE2B) | (1<<OCIE2A) | (1<<TOIE2);
    2118:	e0 e7       	ldi	r30, 0x70	; 112
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	87 e0       	ldi	r24, 0x07	; 7
    211e:	80 83       	st	Z, r24
    OCR2A = 85;
    2120:	e3 eb       	ldi	r30, 0xB3	; 179
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	85 e5       	ldi	r24, 0x55	; 85
    2126:	80 83       	st	Z, r24
    OCR2B = 170;
    2128:	e4 eb       	ldi	r30, 0xB4	; 180
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	8a ea       	ldi	r24, 0xAA	; 170
    212e:	80 83       	st	Z, r24

    //Use mode 0, clkdiv = 8 klok 4 ultrasoon
    TCCR4A = 0;
    2130:	e0 ea       	ldi	r30, 0xA0	; 160
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	10 82       	st	Z, r1
    TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);
    2136:	e1 ea       	ldi	r30, 0xA1	; 161
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	82 e0       	ldi	r24, 0x02	; 2
    213c:	80 83       	st	Z, r24
    TIMSK4 |= (1<<OCIE4A);
    213e:	a2 e7       	ldi	r26, 0x72	; 114
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e2 e7       	ldi	r30, 0x72	; 114
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	82 60       	ori	r24, 0x02	; 2
    214a:	8c 93       	st	X, r24

// intialisatie ADC goed controleren vrij nieuw
    ADMUX =(0 << REFS1)|(1 << REFS0); //meet vanaf 0 volt
    214c:	ec e7       	ldi	r30, 0x7C	; 124
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 e4       	ldi	r24, 0x40	; 64
    2152:	80 83       	st	Z, r24
    ADCSRA = (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);//Division factor van 128
    2154:	ea e7       	ldi	r30, 0x7A	; 122
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	87 e0       	ldi	r24, 0x07	; 7
    215a:	80 83       	st	Z, r24
    ADCSRA |=(1 << ADEN); // ADC activeren
    215c:	aa e7       	ldi	r26, 0x7A	; 122
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	ea e7       	ldi	r30, 0x7A	; 122
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	80 68       	ori	r24, 0x80	; 128
    2168:	8c 93       	st	X, r24

    //ultrasoon correctie
    ultrasoon = 23; //
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	a8 eb       	ldi	r26, 0xB8	; 184
    2170:	b1 e4       	ldi	r27, 0x41	; 65
    2172:	80 93 08 03 	sts	0x0308, r24
    2176:	90 93 09 03 	sts	0x0309, r25
    217a:	a0 93 0a 03 	sts	0x030A, r26
    217e:	b0 93 0b 03 	sts	0x030B, r27

    // Interupts geactiveerd*/
    sei();
    2182:	78 94       	sei
}
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <motor>:

void motor (int Af, int Bf)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <motor+0x6>
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	7c 83       	std	Y+4, r23	; 0x04
    219c:	6b 83       	std	Y+3, r22	; 0x03
            OCR0A = Af;
    219e:	e7 e4       	ldi	r30, 0x47	; 71
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	80 83       	st	Z, r24
            OCR0B = Bf;
    21a6:	e8 e4       	ldi	r30, 0x48	; 72
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	80 83       	st	Z, r24
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <__fixunssfsi>:
    21bc:	ef 92       	push	r14
    21be:	ff 92       	push	r15
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	7b 01       	movw	r14, r22
    21c6:	8c 01       	movw	r16, r24
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	5f e4       	ldi	r21, 0x4F	; 79
    21d0:	0e 94 de 13 	call	0x27bc	; 0x27bc <__gesf2>
    21d4:	88 23       	and	r24, r24
    21d6:	8c f0       	brlt	.+34     	; 0x21fa <__fixunssfsi+0x3e>
    21d8:	c8 01       	movw	r24, r16
    21da:	b7 01       	movw	r22, r14
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	5f e4       	ldi	r21, 0x4F	; 79
    21e4:	0e 94 56 12 	call	0x24ac	; 0x24ac <__subsf3>
    21e8:	0e 94 cc 14 	call	0x2998	; 0x2998 <__fixsfsi>
    21ec:	9b 01       	movw	r18, r22
    21ee:	ac 01       	movw	r20, r24
    21f0:	20 50       	subi	r18, 0x00	; 0
    21f2:	30 40       	sbci	r19, 0x00	; 0
    21f4:	40 40       	sbci	r20, 0x00	; 0
    21f6:	50 48       	sbci	r21, 0x80	; 128
    21f8:	06 c0       	rjmp	.+12     	; 0x2206 <__stack+0x7>
    21fa:	c8 01       	movw	r24, r16
    21fc:	b7 01       	movw	r22, r14
    21fe:	0e 94 cc 14 	call	0x2998	; 0x2998 <__fixsfsi>
    2202:	9b 01       	movw	r18, r22
    2204:	ac 01       	movw	r20, r24
    2206:	b9 01       	movw	r22, r18
    2208:	ca 01       	movw	r24, r20
    220a:	1f 91       	pop	r17
    220c:	0f 91       	pop	r16
    220e:	ff 90       	pop	r15
    2210:	ef 90       	pop	r14
    2212:	08 95       	ret

00002214 <_fpadd_parts>:
    2214:	a0 e0       	ldi	r26, 0x00	; 0
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e0 e1       	ldi	r30, 0x10	; 16
    221a:	f1 e1       	ldi	r31, 0x11	; 17
    221c:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__prologue_saves__>
    2220:	dc 01       	movw	r26, r24
    2222:	2b 01       	movw	r4, r22
    2224:	fa 01       	movw	r30, r20
    2226:	9c 91       	ld	r25, X
    2228:	92 30       	cpi	r25, 0x02	; 2
    222a:	08 f4       	brcc	.+2      	; 0x222e <_fpadd_parts+0x1a>
    222c:	39 c1       	rjmp	.+626    	; 0x24a0 <_fpadd_parts+0x28c>
    222e:	eb 01       	movw	r28, r22
    2230:	88 81       	ld	r24, Y
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	08 f4       	brcc	.+2      	; 0x2238 <_fpadd_parts+0x24>
    2236:	33 c1       	rjmp	.+614    	; 0x249e <_fpadd_parts+0x28a>
    2238:	94 30       	cpi	r25, 0x04	; 4
    223a:	69 f4       	brne	.+26     	; 0x2256 <_fpadd_parts+0x42>
    223c:	84 30       	cpi	r24, 0x04	; 4
    223e:	09 f0       	breq	.+2      	; 0x2242 <_fpadd_parts+0x2e>
    2240:	2f c1       	rjmp	.+606    	; 0x24a0 <_fpadd_parts+0x28c>
    2242:	11 96       	adiw	r26, 0x01	; 1
    2244:	9c 91       	ld	r25, X
    2246:	11 97       	sbiw	r26, 0x01	; 1
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	98 17       	cp	r25, r24
    224c:	09 f4       	brne	.+2      	; 0x2250 <_fpadd_parts+0x3c>
    224e:	28 c1       	rjmp	.+592    	; 0x24a0 <_fpadd_parts+0x28c>
    2250:	a0 e0       	ldi	r26, 0x00	; 0
    2252:	b2 e0       	ldi	r27, 0x02	; 2
    2254:	25 c1       	rjmp	.+586    	; 0x24a0 <_fpadd_parts+0x28c>
    2256:	84 30       	cpi	r24, 0x04	; 4
    2258:	09 f4       	brne	.+2      	; 0x225c <_fpadd_parts+0x48>
    225a:	21 c1       	rjmp	.+578    	; 0x249e <_fpadd_parts+0x28a>
    225c:	82 30       	cpi	r24, 0x02	; 2
    225e:	a9 f4       	brne	.+42     	; 0x228a <_fpadd_parts+0x76>
    2260:	92 30       	cpi	r25, 0x02	; 2
    2262:	09 f0       	breq	.+2      	; 0x2266 <_fpadd_parts+0x52>
    2264:	1d c1       	rjmp	.+570    	; 0x24a0 <_fpadd_parts+0x28c>
    2266:	9a 01       	movw	r18, r20
    2268:	ad 01       	movw	r20, r26
    226a:	88 e0       	ldi	r24, 0x08	; 8
    226c:	ea 01       	movw	r28, r20
    226e:	09 90       	ld	r0, Y+
    2270:	ae 01       	movw	r20, r28
    2272:	e9 01       	movw	r28, r18
    2274:	09 92       	st	Y+, r0
    2276:	9e 01       	movw	r18, r28
    2278:	81 50       	subi	r24, 0x01	; 1
    227a:	c1 f7       	brne	.-16     	; 0x226c <_fpadd_parts+0x58>
    227c:	e2 01       	movw	r28, r4
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	11 96       	adiw	r26, 0x01	; 1
    2282:	9c 91       	ld	r25, X
    2284:	89 23       	and	r24, r25
    2286:	81 83       	std	Z+1, r24	; 0x01
    2288:	08 c1       	rjmp	.+528    	; 0x249a <_fpadd_parts+0x286>
    228a:	92 30       	cpi	r25, 0x02	; 2
    228c:	09 f4       	brne	.+2      	; 0x2290 <_fpadd_parts+0x7c>
    228e:	07 c1       	rjmp	.+526    	; 0x249e <_fpadd_parts+0x28a>
    2290:	12 96       	adiw	r26, 0x02	; 2
    2292:	2d 90       	ld	r2, X+
    2294:	3c 90       	ld	r3, X
    2296:	13 97       	sbiw	r26, 0x03	; 3
    2298:	eb 01       	movw	r28, r22
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	9b 81       	ldd	r25, Y+3	; 0x03
    229e:	14 96       	adiw	r26, 0x04	; 4
    22a0:	ad 90       	ld	r10, X+
    22a2:	bd 90       	ld	r11, X+
    22a4:	cd 90       	ld	r12, X+
    22a6:	dc 90       	ld	r13, X
    22a8:	17 97       	sbiw	r26, 0x07	; 7
    22aa:	ec 80       	ldd	r14, Y+4	; 0x04
    22ac:	fd 80       	ldd	r15, Y+5	; 0x05
    22ae:	0e 81       	ldd	r16, Y+6	; 0x06
    22b0:	1f 81       	ldd	r17, Y+7	; 0x07
    22b2:	91 01       	movw	r18, r2
    22b4:	28 1b       	sub	r18, r24
    22b6:	39 0b       	sbc	r19, r25
    22b8:	b9 01       	movw	r22, r18
    22ba:	37 ff       	sbrs	r19, 7
    22bc:	04 c0       	rjmp	.+8      	; 0x22c6 <_fpadd_parts+0xb2>
    22be:	66 27       	eor	r22, r22
    22c0:	77 27       	eor	r23, r23
    22c2:	62 1b       	sub	r22, r18
    22c4:	73 0b       	sbc	r23, r19
    22c6:	60 32       	cpi	r22, 0x20	; 32
    22c8:	71 05       	cpc	r23, r1
    22ca:	0c f0       	brlt	.+2      	; 0x22ce <_fpadd_parts+0xba>
    22cc:	61 c0       	rjmp	.+194    	; 0x2390 <_fpadd_parts+0x17c>
    22ce:	12 16       	cp	r1, r18
    22d0:	13 06       	cpc	r1, r19
    22d2:	6c f5       	brge	.+90     	; 0x232e <_fpadd_parts+0x11a>
    22d4:	37 01       	movw	r6, r14
    22d6:	48 01       	movw	r8, r16
    22d8:	06 2e       	mov	r0, r22
    22da:	04 c0       	rjmp	.+8      	; 0x22e4 <_fpadd_parts+0xd0>
    22dc:	96 94       	lsr	r9
    22de:	87 94       	ror	r8
    22e0:	77 94       	ror	r7
    22e2:	67 94       	ror	r6
    22e4:	0a 94       	dec	r0
    22e6:	d2 f7       	brpl	.-12     	; 0x22dc <_fpadd_parts+0xc8>
    22e8:	21 e0       	ldi	r18, 0x01	; 1
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	04 c0       	rjmp	.+8      	; 0x22fa <_fpadd_parts+0xe6>
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	44 1f       	adc	r20, r20
    22f8:	55 1f       	adc	r21, r21
    22fa:	6a 95       	dec	r22
    22fc:	d2 f7       	brpl	.-12     	; 0x22f2 <_fpadd_parts+0xde>
    22fe:	21 50       	subi	r18, 0x01	; 1
    2300:	30 40       	sbci	r19, 0x00	; 0
    2302:	40 40       	sbci	r20, 0x00	; 0
    2304:	50 40       	sbci	r21, 0x00	; 0
    2306:	2e 21       	and	r18, r14
    2308:	3f 21       	and	r19, r15
    230a:	40 23       	and	r20, r16
    230c:	51 23       	and	r21, r17
    230e:	21 15       	cp	r18, r1
    2310:	31 05       	cpc	r19, r1
    2312:	41 05       	cpc	r20, r1
    2314:	51 05       	cpc	r21, r1
    2316:	21 f0       	breq	.+8      	; 0x2320 <_fpadd_parts+0x10c>
    2318:	21 e0       	ldi	r18, 0x01	; 1
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	79 01       	movw	r14, r18
    2322:	8a 01       	movw	r16, r20
    2324:	e6 28       	or	r14, r6
    2326:	f7 28       	or	r15, r7
    2328:	08 29       	or	r16, r8
    232a:	19 29       	or	r17, r9
    232c:	3c c0       	rjmp	.+120    	; 0x23a6 <_fpadd_parts+0x192>
    232e:	23 2b       	or	r18, r19
    2330:	d1 f1       	breq	.+116    	; 0x23a6 <_fpadd_parts+0x192>
    2332:	26 0e       	add	r2, r22
    2334:	37 1e       	adc	r3, r23
    2336:	35 01       	movw	r6, r10
    2338:	46 01       	movw	r8, r12
    233a:	06 2e       	mov	r0, r22
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <_fpadd_parts+0x132>
    233e:	96 94       	lsr	r9
    2340:	87 94       	ror	r8
    2342:	77 94       	ror	r7
    2344:	67 94       	ror	r6
    2346:	0a 94       	dec	r0
    2348:	d2 f7       	brpl	.-12     	; 0x233e <_fpadd_parts+0x12a>
    234a:	21 e0       	ldi	r18, 0x01	; 1
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	04 c0       	rjmp	.+8      	; 0x235c <_fpadd_parts+0x148>
    2354:	22 0f       	add	r18, r18
    2356:	33 1f       	adc	r19, r19
    2358:	44 1f       	adc	r20, r20
    235a:	55 1f       	adc	r21, r21
    235c:	6a 95       	dec	r22
    235e:	d2 f7       	brpl	.-12     	; 0x2354 <_fpadd_parts+0x140>
    2360:	21 50       	subi	r18, 0x01	; 1
    2362:	30 40       	sbci	r19, 0x00	; 0
    2364:	40 40       	sbci	r20, 0x00	; 0
    2366:	50 40       	sbci	r21, 0x00	; 0
    2368:	2a 21       	and	r18, r10
    236a:	3b 21       	and	r19, r11
    236c:	4c 21       	and	r20, r12
    236e:	5d 21       	and	r21, r13
    2370:	21 15       	cp	r18, r1
    2372:	31 05       	cpc	r19, r1
    2374:	41 05       	cpc	r20, r1
    2376:	51 05       	cpc	r21, r1
    2378:	21 f0       	breq	.+8      	; 0x2382 <_fpadd_parts+0x16e>
    237a:	21 e0       	ldi	r18, 0x01	; 1
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	59 01       	movw	r10, r18
    2384:	6a 01       	movw	r12, r20
    2386:	a6 28       	or	r10, r6
    2388:	b7 28       	or	r11, r7
    238a:	c8 28       	or	r12, r8
    238c:	d9 28       	or	r13, r9
    238e:	0b c0       	rjmp	.+22     	; 0x23a6 <_fpadd_parts+0x192>
    2390:	82 15       	cp	r24, r2
    2392:	93 05       	cpc	r25, r3
    2394:	2c f0       	brlt	.+10     	; 0x23a0 <_fpadd_parts+0x18c>
    2396:	1c 01       	movw	r2, r24
    2398:	aa 24       	eor	r10, r10
    239a:	bb 24       	eor	r11, r11
    239c:	65 01       	movw	r12, r10
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <_fpadd_parts+0x192>
    23a0:	ee 24       	eor	r14, r14
    23a2:	ff 24       	eor	r15, r15
    23a4:	87 01       	movw	r16, r14
    23a6:	11 96       	adiw	r26, 0x01	; 1
    23a8:	9c 91       	ld	r25, X
    23aa:	d2 01       	movw	r26, r4
    23ac:	11 96       	adiw	r26, 0x01	; 1
    23ae:	8c 91       	ld	r24, X
    23b0:	98 17       	cp	r25, r24
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <_fpadd_parts+0x1a2>
    23b4:	45 c0       	rjmp	.+138    	; 0x2440 <_fpadd_parts+0x22c>
    23b6:	99 23       	and	r25, r25
    23b8:	39 f0       	breq	.+14     	; 0x23c8 <_fpadd_parts+0x1b4>
    23ba:	a8 01       	movw	r20, r16
    23bc:	97 01       	movw	r18, r14
    23be:	2a 19       	sub	r18, r10
    23c0:	3b 09       	sbc	r19, r11
    23c2:	4c 09       	sbc	r20, r12
    23c4:	5d 09       	sbc	r21, r13
    23c6:	06 c0       	rjmp	.+12     	; 0x23d4 <_fpadd_parts+0x1c0>
    23c8:	a6 01       	movw	r20, r12
    23ca:	95 01       	movw	r18, r10
    23cc:	2e 19       	sub	r18, r14
    23ce:	3f 09       	sbc	r19, r15
    23d0:	40 0b       	sbc	r20, r16
    23d2:	51 0b       	sbc	r21, r17
    23d4:	57 fd       	sbrc	r21, 7
    23d6:	08 c0       	rjmp	.+16     	; 0x23e8 <_fpadd_parts+0x1d4>
    23d8:	11 82       	std	Z+1, r1	; 0x01
    23da:	33 82       	std	Z+3, r3	; 0x03
    23dc:	22 82       	std	Z+2, r2	; 0x02
    23de:	24 83       	std	Z+4, r18	; 0x04
    23e0:	35 83       	std	Z+5, r19	; 0x05
    23e2:	46 83       	std	Z+6, r20	; 0x06
    23e4:	57 83       	std	Z+7, r21	; 0x07
    23e6:	1d c0       	rjmp	.+58     	; 0x2422 <_fpadd_parts+0x20e>
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	81 83       	std	Z+1, r24	; 0x01
    23ec:	33 82       	std	Z+3, r3	; 0x03
    23ee:	22 82       	std	Z+2, r2	; 0x02
    23f0:	88 27       	eor	r24, r24
    23f2:	99 27       	eor	r25, r25
    23f4:	dc 01       	movw	r26, r24
    23f6:	82 1b       	sub	r24, r18
    23f8:	93 0b       	sbc	r25, r19
    23fa:	a4 0b       	sbc	r26, r20
    23fc:	b5 0b       	sbc	r27, r21
    23fe:	84 83       	std	Z+4, r24	; 0x04
    2400:	95 83       	std	Z+5, r25	; 0x05
    2402:	a6 83       	std	Z+6, r26	; 0x06
    2404:	b7 83       	std	Z+7, r27	; 0x07
    2406:	0d c0       	rjmp	.+26     	; 0x2422 <_fpadd_parts+0x20e>
    2408:	22 0f       	add	r18, r18
    240a:	33 1f       	adc	r19, r19
    240c:	44 1f       	adc	r20, r20
    240e:	55 1f       	adc	r21, r21
    2410:	24 83       	std	Z+4, r18	; 0x04
    2412:	35 83       	std	Z+5, r19	; 0x05
    2414:	46 83       	std	Z+6, r20	; 0x06
    2416:	57 83       	std	Z+7, r21	; 0x07
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	93 83       	std	Z+3, r25	; 0x03
    2420:	82 83       	std	Z+2, r24	; 0x02
    2422:	24 81       	ldd	r18, Z+4	; 0x04
    2424:	35 81       	ldd	r19, Z+5	; 0x05
    2426:	46 81       	ldd	r20, Z+6	; 0x06
    2428:	57 81       	ldd	r21, Z+7	; 0x07
    242a:	da 01       	movw	r26, r20
    242c:	c9 01       	movw	r24, r18
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	a1 09       	sbc	r26, r1
    2432:	b1 09       	sbc	r27, r1
    2434:	8f 5f       	subi	r24, 0xFF	; 255
    2436:	9f 4f       	sbci	r25, 0xFF	; 255
    2438:	af 4f       	sbci	r26, 0xFF	; 255
    243a:	bf 43       	sbci	r27, 0x3F	; 63
    243c:	28 f3       	brcs	.-54     	; 0x2408 <_fpadd_parts+0x1f4>
    243e:	0b c0       	rjmp	.+22     	; 0x2456 <_fpadd_parts+0x242>
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	33 82       	std	Z+3, r3	; 0x03
    2444:	22 82       	std	Z+2, r2	; 0x02
    2446:	ea 0c       	add	r14, r10
    2448:	fb 1c       	adc	r15, r11
    244a:	0c 1d       	adc	r16, r12
    244c:	1d 1d       	adc	r17, r13
    244e:	e4 82       	std	Z+4, r14	; 0x04
    2450:	f5 82       	std	Z+5, r15	; 0x05
    2452:	06 83       	std	Z+6, r16	; 0x06
    2454:	17 83       	std	Z+7, r17	; 0x07
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	80 83       	st	Z, r24
    245a:	24 81       	ldd	r18, Z+4	; 0x04
    245c:	35 81       	ldd	r19, Z+5	; 0x05
    245e:	46 81       	ldd	r20, Z+6	; 0x06
    2460:	57 81       	ldd	r21, Z+7	; 0x07
    2462:	57 ff       	sbrs	r21, 7
    2464:	1a c0       	rjmp	.+52     	; 0x249a <_fpadd_parts+0x286>
    2466:	c9 01       	movw	r24, r18
    2468:	aa 27       	eor	r26, r26
    246a:	97 fd       	sbrc	r25, 7
    246c:	a0 95       	com	r26
    246e:	ba 2f       	mov	r27, r26
    2470:	81 70       	andi	r24, 0x01	; 1
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	a0 70       	andi	r26, 0x00	; 0
    2476:	b0 70       	andi	r27, 0x00	; 0
    2478:	56 95       	lsr	r21
    247a:	47 95       	ror	r20
    247c:	37 95       	ror	r19
    247e:	27 95       	ror	r18
    2480:	82 2b       	or	r24, r18
    2482:	93 2b       	or	r25, r19
    2484:	a4 2b       	or	r26, r20
    2486:	b5 2b       	or	r27, r21
    2488:	84 83       	std	Z+4, r24	; 0x04
    248a:	95 83       	std	Z+5, r25	; 0x05
    248c:	a6 83       	std	Z+6, r26	; 0x06
    248e:	b7 83       	std	Z+7, r27	; 0x07
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	93 83       	std	Z+3, r25	; 0x03
    2498:	82 83       	std	Z+2, r24	; 0x02
    249a:	df 01       	movw	r26, r30
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <_fpadd_parts+0x28c>
    249e:	d2 01       	movw	r26, r4
    24a0:	cd 01       	movw	r24, r26
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	e2 e1       	ldi	r30, 0x12	; 18
    24a8:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__epilogue_restores__>

000024ac <__subsf3>:
    24ac:	a0 e2       	ldi	r26, 0x20	; 32
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	ec e5       	ldi	r30, 0x5C	; 92
    24b2:	f2 e1       	ldi	r31, 0x12	; 18
    24b4:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__prologue_saves__+0x18>
    24b8:	69 83       	std	Y+1, r22	; 0x01
    24ba:	7a 83       	std	Y+2, r23	; 0x02
    24bc:	8b 83       	std	Y+3, r24	; 0x03
    24be:	9c 83       	std	Y+4, r25	; 0x04
    24c0:	2d 83       	std	Y+5, r18	; 0x05
    24c2:	3e 83       	std	Y+6, r19	; 0x06
    24c4:	4f 83       	std	Y+7, r20	; 0x07
    24c6:	58 87       	std	Y+8, r21	; 0x08
    24c8:	e9 e0       	ldi	r30, 0x09	; 9
    24ca:	ee 2e       	mov	r14, r30
    24cc:	f1 2c       	mov	r15, r1
    24ce:	ec 0e       	add	r14, r28
    24d0:	fd 1e       	adc	r15, r29
    24d2:	ce 01       	movw	r24, r28
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	b7 01       	movw	r22, r14
    24d8:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    24dc:	8e 01       	movw	r16, r28
    24de:	0f 5e       	subi	r16, 0xEF	; 239
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	ce 01       	movw	r24, r28
    24e4:	05 96       	adiw	r24, 0x05	; 5
    24e6:	b8 01       	movw	r22, r16
    24e8:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    24ec:	8a 89       	ldd	r24, Y+18	; 0x12
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	89 27       	eor	r24, r25
    24f2:	8a 8b       	std	Y+18, r24	; 0x12
    24f4:	c7 01       	movw	r24, r14
    24f6:	b8 01       	movw	r22, r16
    24f8:	ae 01       	movw	r20, r28
    24fa:	47 5e       	subi	r20, 0xE7	; 231
    24fc:	5f 4f       	sbci	r21, 0xFF	; 255
    24fe:	0e 94 0a 11 	call	0x2214	; 0x2214 <_fpadd_parts>
    2502:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__pack_f>
    2506:	a0 96       	adiw	r28, 0x20	; 32
    2508:	e6 e0       	ldi	r30, 0x06	; 6
    250a:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__epilogue_restores__+0x18>

0000250e <__addsf3>:
    250e:	a0 e2       	ldi	r26, 0x20	; 32
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	ed e8       	ldi	r30, 0x8D	; 141
    2514:	f2 e1       	ldi	r31, 0x12	; 18
    2516:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__prologue_saves__+0x18>
    251a:	69 83       	std	Y+1, r22	; 0x01
    251c:	7a 83       	std	Y+2, r23	; 0x02
    251e:	8b 83       	std	Y+3, r24	; 0x03
    2520:	9c 83       	std	Y+4, r25	; 0x04
    2522:	2d 83       	std	Y+5, r18	; 0x05
    2524:	3e 83       	std	Y+6, r19	; 0x06
    2526:	4f 83       	std	Y+7, r20	; 0x07
    2528:	58 87       	std	Y+8, r21	; 0x08
    252a:	f9 e0       	ldi	r31, 0x09	; 9
    252c:	ef 2e       	mov	r14, r31
    252e:	f1 2c       	mov	r15, r1
    2530:	ec 0e       	add	r14, r28
    2532:	fd 1e       	adc	r15, r29
    2534:	ce 01       	movw	r24, r28
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	b7 01       	movw	r22, r14
    253a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    253e:	8e 01       	movw	r16, r28
    2540:	0f 5e       	subi	r16, 0xEF	; 239
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	ce 01       	movw	r24, r28
    2546:	05 96       	adiw	r24, 0x05	; 5
    2548:	b8 01       	movw	r22, r16
    254a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    254e:	c7 01       	movw	r24, r14
    2550:	b8 01       	movw	r22, r16
    2552:	ae 01       	movw	r20, r28
    2554:	47 5e       	subi	r20, 0xE7	; 231
    2556:	5f 4f       	sbci	r21, 0xFF	; 255
    2558:	0e 94 0a 11 	call	0x2214	; 0x2214 <_fpadd_parts>
    255c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__pack_f>
    2560:	a0 96       	adiw	r28, 0x20	; 32
    2562:	e6 e0       	ldi	r30, 0x06	; 6
    2564:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__epilogue_restores__+0x18>

00002568 <__mulsf3>:
    2568:	a0 e2       	ldi	r26, 0x20	; 32
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ea eb       	ldi	r30, 0xBA	; 186
    256e:	f2 e1       	ldi	r31, 0x12	; 18
    2570:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__prologue_saves__>
    2574:	69 83       	std	Y+1, r22	; 0x01
    2576:	7a 83       	std	Y+2, r23	; 0x02
    2578:	8b 83       	std	Y+3, r24	; 0x03
    257a:	9c 83       	std	Y+4, r25	; 0x04
    257c:	2d 83       	std	Y+5, r18	; 0x05
    257e:	3e 83       	std	Y+6, r19	; 0x06
    2580:	4f 83       	std	Y+7, r20	; 0x07
    2582:	58 87       	std	Y+8, r21	; 0x08
    2584:	ce 01       	movw	r24, r28
    2586:	01 96       	adiw	r24, 0x01	; 1
    2588:	be 01       	movw	r22, r28
    258a:	67 5f       	subi	r22, 0xF7	; 247
    258c:	7f 4f       	sbci	r23, 0xFF	; 255
    258e:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    2592:	ce 01       	movw	r24, r28
    2594:	05 96       	adiw	r24, 0x05	; 5
    2596:	be 01       	movw	r22, r28
    2598:	6f 5e       	subi	r22, 0xEF	; 239
    259a:	7f 4f       	sbci	r23, 0xFF	; 255
    259c:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    25a0:	99 85       	ldd	r25, Y+9	; 0x09
    25a2:	92 30       	cpi	r25, 0x02	; 2
    25a4:	88 f0       	brcs	.+34     	; 0x25c8 <__mulsf3+0x60>
    25a6:	89 89       	ldd	r24, Y+17	; 0x11
    25a8:	82 30       	cpi	r24, 0x02	; 2
    25aa:	c8 f0       	brcs	.+50     	; 0x25de <__mulsf3+0x76>
    25ac:	94 30       	cpi	r25, 0x04	; 4
    25ae:	19 f4       	brne	.+6      	; 0x25b6 <__mulsf3+0x4e>
    25b0:	82 30       	cpi	r24, 0x02	; 2
    25b2:	51 f4       	brne	.+20     	; 0x25c8 <__mulsf3+0x60>
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <__mulsf3+0x56>
    25b6:	84 30       	cpi	r24, 0x04	; 4
    25b8:	29 f4       	brne	.+10     	; 0x25c4 <__mulsf3+0x5c>
    25ba:	92 30       	cpi	r25, 0x02	; 2
    25bc:	81 f4       	brne	.+32     	; 0x25de <__mulsf3+0x76>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	c6 c0       	rjmp	.+396    	; 0x2750 <__mulsf3+0x1e8>
    25c4:	92 30       	cpi	r25, 0x02	; 2
    25c6:	49 f4       	brne	.+18     	; 0x25da <__mulsf3+0x72>
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	8a 89       	ldd	r24, Y+18	; 0x12
    25ce:	98 13       	cpse	r25, r24
    25d0:	21 e0       	ldi	r18, 0x01	; 1
    25d2:	2a 87       	std	Y+10, r18	; 0x0a
    25d4:	ce 01       	movw	r24, r28
    25d6:	09 96       	adiw	r24, 0x09	; 9
    25d8:	bb c0       	rjmp	.+374    	; 0x2750 <__mulsf3+0x1e8>
    25da:	82 30       	cpi	r24, 0x02	; 2
    25dc:	49 f4       	brne	.+18     	; 0x25f0 <__mulsf3+0x88>
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	8a 89       	ldd	r24, Y+18	; 0x12
    25e4:	98 13       	cpse	r25, r24
    25e6:	21 e0       	ldi	r18, 0x01	; 1
    25e8:	2a 8b       	std	Y+18, r18	; 0x12
    25ea:	ce 01       	movw	r24, r28
    25ec:	41 96       	adiw	r24, 0x11	; 17
    25ee:	b0 c0       	rjmp	.+352    	; 0x2750 <__mulsf3+0x1e8>
    25f0:	2d 84       	ldd	r2, Y+13	; 0x0d
    25f2:	3e 84       	ldd	r3, Y+14	; 0x0e
    25f4:	4f 84       	ldd	r4, Y+15	; 0x0f
    25f6:	58 88       	ldd	r5, Y+16	; 0x10
    25f8:	6d 88       	ldd	r6, Y+21	; 0x15
    25fa:	7e 88       	ldd	r7, Y+22	; 0x16
    25fc:	8f 88       	ldd	r8, Y+23	; 0x17
    25fe:	98 8c       	ldd	r9, Y+24	; 0x18
    2600:	ee 24       	eor	r14, r14
    2602:	ff 24       	eor	r15, r15
    2604:	87 01       	movw	r16, r14
    2606:	aa 24       	eor	r10, r10
    2608:	bb 24       	eor	r11, r11
    260a:	65 01       	movw	r12, r10
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	e0 e0       	ldi	r30, 0x00	; 0
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	c1 01       	movw	r24, r2
    261a:	81 70       	andi	r24, 0x01	; 1
    261c:	90 70       	andi	r25, 0x00	; 0
    261e:	89 2b       	or	r24, r25
    2620:	e9 f0       	breq	.+58     	; 0x265c <__mulsf3+0xf4>
    2622:	e6 0c       	add	r14, r6
    2624:	f7 1c       	adc	r15, r7
    2626:	08 1d       	adc	r16, r8
    2628:	19 1d       	adc	r17, r9
    262a:	9a 01       	movw	r18, r20
    262c:	ab 01       	movw	r20, r22
    262e:	2a 0d       	add	r18, r10
    2630:	3b 1d       	adc	r19, r11
    2632:	4c 1d       	adc	r20, r12
    2634:	5d 1d       	adc	r21, r13
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a0 e0       	ldi	r26, 0x00	; 0
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e6 14       	cp	r14, r6
    2640:	f7 04       	cpc	r15, r7
    2642:	08 05       	cpc	r16, r8
    2644:	19 05       	cpc	r17, r9
    2646:	20 f4       	brcc	.+8      	; 0x2650 <__mulsf3+0xe8>
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 e0       	ldi	r26, 0x00	; 0
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	ba 01       	movw	r22, r20
    2652:	a9 01       	movw	r20, r18
    2654:	48 0f       	add	r20, r24
    2656:	59 1f       	adc	r21, r25
    2658:	6a 1f       	adc	r22, r26
    265a:	7b 1f       	adc	r23, r27
    265c:	aa 0c       	add	r10, r10
    265e:	bb 1c       	adc	r11, r11
    2660:	cc 1c       	adc	r12, r12
    2662:	dd 1c       	adc	r13, r13
    2664:	97 fe       	sbrs	r9, 7
    2666:	08 c0       	rjmp	.+16     	; 0x2678 <__mulsf3+0x110>
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a0 e0       	ldi	r26, 0x00	; 0
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	a8 2a       	or	r10, r24
    2672:	b9 2a       	or	r11, r25
    2674:	ca 2a       	or	r12, r26
    2676:	db 2a       	or	r13, r27
    2678:	31 96       	adiw	r30, 0x01	; 1
    267a:	e0 32       	cpi	r30, 0x20	; 32
    267c:	f1 05       	cpc	r31, r1
    267e:	49 f0       	breq	.+18     	; 0x2692 <__mulsf3+0x12a>
    2680:	66 0c       	add	r6, r6
    2682:	77 1c       	adc	r7, r7
    2684:	88 1c       	adc	r8, r8
    2686:	99 1c       	adc	r9, r9
    2688:	56 94       	lsr	r5
    268a:	47 94       	ror	r4
    268c:	37 94       	ror	r3
    268e:	27 94       	ror	r2
    2690:	c3 cf       	rjmp	.-122    	; 0x2618 <__mulsf3+0xb0>
    2692:	fa 85       	ldd	r31, Y+10	; 0x0a
    2694:	ea 89       	ldd	r30, Y+18	; 0x12
    2696:	2b 89       	ldd	r18, Y+19	; 0x13
    2698:	3c 89       	ldd	r19, Y+20	; 0x14
    269a:	8b 85       	ldd	r24, Y+11	; 0x0b
    269c:	9c 85       	ldd	r25, Y+12	; 0x0c
    269e:	28 0f       	add	r18, r24
    26a0:	39 1f       	adc	r19, r25
    26a2:	2e 5f       	subi	r18, 0xFE	; 254
    26a4:	3f 4f       	sbci	r19, 0xFF	; 255
    26a6:	17 c0       	rjmp	.+46     	; 0x26d6 <__mulsf3+0x16e>
    26a8:	ca 01       	movw	r24, r20
    26aa:	81 70       	andi	r24, 0x01	; 1
    26ac:	90 70       	andi	r25, 0x00	; 0
    26ae:	89 2b       	or	r24, r25
    26b0:	61 f0       	breq	.+24     	; 0x26ca <__mulsf3+0x162>
    26b2:	16 95       	lsr	r17
    26b4:	07 95       	ror	r16
    26b6:	f7 94       	ror	r15
    26b8:	e7 94       	ror	r14
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	a0 e0       	ldi	r26, 0x00	; 0
    26c0:	b0 e8       	ldi	r27, 0x80	; 128
    26c2:	e8 2a       	or	r14, r24
    26c4:	f9 2a       	or	r15, r25
    26c6:	0a 2b       	or	r16, r26
    26c8:	1b 2b       	or	r17, r27
    26ca:	76 95       	lsr	r23
    26cc:	67 95       	ror	r22
    26ce:	57 95       	ror	r21
    26d0:	47 95       	ror	r20
    26d2:	2f 5f       	subi	r18, 0xFF	; 255
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255
    26d6:	77 fd       	sbrc	r23, 7
    26d8:	e7 cf       	rjmp	.-50     	; 0x26a8 <__mulsf3+0x140>
    26da:	0c c0       	rjmp	.+24     	; 0x26f4 <__mulsf3+0x18c>
    26dc:	44 0f       	add	r20, r20
    26de:	55 1f       	adc	r21, r21
    26e0:	66 1f       	adc	r22, r22
    26e2:	77 1f       	adc	r23, r23
    26e4:	17 fd       	sbrc	r17, 7
    26e6:	41 60       	ori	r20, 0x01	; 1
    26e8:	ee 0c       	add	r14, r14
    26ea:	ff 1c       	adc	r15, r15
    26ec:	00 1f       	adc	r16, r16
    26ee:	11 1f       	adc	r17, r17
    26f0:	21 50       	subi	r18, 0x01	; 1
    26f2:	30 40       	sbci	r19, 0x00	; 0
    26f4:	40 30       	cpi	r20, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	59 07       	cpc	r21, r25
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	69 07       	cpc	r22, r25
    26fe:	90 e4       	ldi	r25, 0x40	; 64
    2700:	79 07       	cpc	r23, r25
    2702:	60 f3       	brcs	.-40     	; 0x26dc <__mulsf3+0x174>
    2704:	2b 8f       	std	Y+27, r18	; 0x1b
    2706:	3c 8f       	std	Y+28, r19	; 0x1c
    2708:	db 01       	movw	r26, r22
    270a:	ca 01       	movw	r24, r20
    270c:	8f 77       	andi	r24, 0x7F	; 127
    270e:	90 70       	andi	r25, 0x00	; 0
    2710:	a0 70       	andi	r26, 0x00	; 0
    2712:	b0 70       	andi	r27, 0x00	; 0
    2714:	80 34       	cpi	r24, 0x40	; 64
    2716:	91 05       	cpc	r25, r1
    2718:	a1 05       	cpc	r26, r1
    271a:	b1 05       	cpc	r27, r1
    271c:	61 f4       	brne	.+24     	; 0x2736 <__mulsf3+0x1ce>
    271e:	47 fd       	sbrc	r20, 7
    2720:	0a c0       	rjmp	.+20     	; 0x2736 <__mulsf3+0x1ce>
    2722:	e1 14       	cp	r14, r1
    2724:	f1 04       	cpc	r15, r1
    2726:	01 05       	cpc	r16, r1
    2728:	11 05       	cpc	r17, r1
    272a:	29 f0       	breq	.+10     	; 0x2736 <__mulsf3+0x1ce>
    272c:	40 5c       	subi	r20, 0xC0	; 192
    272e:	5f 4f       	sbci	r21, 0xFF	; 255
    2730:	6f 4f       	sbci	r22, 0xFF	; 255
    2732:	7f 4f       	sbci	r23, 0xFF	; 255
    2734:	40 78       	andi	r20, 0x80	; 128
    2736:	1a 8e       	std	Y+26, r1	; 0x1a
    2738:	fe 17       	cp	r31, r30
    273a:	11 f0       	breq	.+4      	; 0x2740 <__mulsf3+0x1d8>
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	8a 8f       	std	Y+26, r24	; 0x1a
    2740:	4d 8f       	std	Y+29, r20	; 0x1d
    2742:	5e 8f       	std	Y+30, r21	; 0x1e
    2744:	6f 8f       	std	Y+31, r22	; 0x1f
    2746:	78 a3       	std	Y+32, r23	; 0x20
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	89 8f       	std	Y+25, r24	; 0x19
    274c:	ce 01       	movw	r24, r28
    274e:	49 96       	adiw	r24, 0x19	; 25
    2750:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__pack_f>
    2754:	a0 96       	adiw	r28, 0x20	; 32
    2756:	e2 e1       	ldi	r30, 0x12	; 18
    2758:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__epilogue_restores__>

0000275c <__gtsf2>:
    275c:	a8 e1       	ldi	r26, 0x18	; 24
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e4 eb       	ldi	r30, 0xB4	; 180
    2762:	f3 e1       	ldi	r31, 0x13	; 19
    2764:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__prologue_saves__+0x18>
    2768:	69 83       	std	Y+1, r22	; 0x01
    276a:	7a 83       	std	Y+2, r23	; 0x02
    276c:	8b 83       	std	Y+3, r24	; 0x03
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	2d 83       	std	Y+5, r18	; 0x05
    2772:	3e 83       	std	Y+6, r19	; 0x06
    2774:	4f 83       	std	Y+7, r20	; 0x07
    2776:	58 87       	std	Y+8, r21	; 0x08
    2778:	89 e0       	ldi	r24, 0x09	; 9
    277a:	e8 2e       	mov	r14, r24
    277c:	f1 2c       	mov	r15, r1
    277e:	ec 0e       	add	r14, r28
    2780:	fd 1e       	adc	r15, r29
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	b7 01       	movw	r22, r14
    2788:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    278c:	8e 01       	movw	r16, r28
    278e:	0f 5e       	subi	r16, 0xEF	; 239
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	ce 01       	movw	r24, r28
    2794:	05 96       	adiw	r24, 0x05	; 5
    2796:	b8 01       	movw	r22, r16
    2798:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	40 f0       	brcs	.+16     	; 0x27b2 <__gtsf2+0x56>
    27a2:	89 89       	ldd	r24, Y+17	; 0x11
    27a4:	82 30       	cpi	r24, 0x02	; 2
    27a6:	28 f0       	brcs	.+10     	; 0x27b2 <__gtsf2+0x56>
    27a8:	c7 01       	movw	r24, r14
    27aa:	b8 01       	movw	r22, r16
    27ac:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__fpcmp_parts_f>
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <__gtsf2+0x58>
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	68 96       	adiw	r28, 0x18	; 24
    27b6:	e6 e0       	ldi	r30, 0x06	; 6
    27b8:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__epilogue_restores__+0x18>

000027bc <__gesf2>:
    27bc:	a8 e1       	ldi	r26, 0x18	; 24
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e4 ee       	ldi	r30, 0xE4	; 228
    27c2:	f3 e1       	ldi	r31, 0x13	; 19
    27c4:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__prologue_saves__+0x18>
    27c8:	69 83       	std	Y+1, r22	; 0x01
    27ca:	7a 83       	std	Y+2, r23	; 0x02
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	2d 83       	std	Y+5, r18	; 0x05
    27d2:	3e 83       	std	Y+6, r19	; 0x06
    27d4:	4f 83       	std	Y+7, r20	; 0x07
    27d6:	58 87       	std	Y+8, r21	; 0x08
    27d8:	89 e0       	ldi	r24, 0x09	; 9
    27da:	e8 2e       	mov	r14, r24
    27dc:	f1 2c       	mov	r15, r1
    27de:	ec 0e       	add	r14, r28
    27e0:	fd 1e       	adc	r15, r29
    27e2:	ce 01       	movw	r24, r28
    27e4:	01 96       	adiw	r24, 0x01	; 1
    27e6:	b7 01       	movw	r22, r14
    27e8:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    27ec:	8e 01       	movw	r16, r28
    27ee:	0f 5e       	subi	r16, 0xEF	; 239
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	ce 01       	movw	r24, r28
    27f4:	05 96       	adiw	r24, 0x05	; 5
    27f6:	b8 01       	movw	r22, r16
    27f8:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    27fc:	89 85       	ldd	r24, Y+9	; 0x09
    27fe:	82 30       	cpi	r24, 0x02	; 2
    2800:	40 f0       	brcs	.+16     	; 0x2812 <__gesf2+0x56>
    2802:	89 89       	ldd	r24, Y+17	; 0x11
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	28 f0       	brcs	.+10     	; 0x2812 <__gesf2+0x56>
    2808:	c7 01       	movw	r24, r14
    280a:	b8 01       	movw	r22, r16
    280c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__fpcmp_parts_f>
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <__gesf2+0x58>
    2812:	8f ef       	ldi	r24, 0xFF	; 255
    2814:	68 96       	adiw	r28, 0x18	; 24
    2816:	e6 e0       	ldi	r30, 0x06	; 6
    2818:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__epilogue_restores__+0x18>

0000281c <__ltsf2>:
    281c:	a8 e1       	ldi	r26, 0x18	; 24
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e4 e1       	ldi	r30, 0x14	; 20
    2822:	f4 e1       	ldi	r31, 0x14	; 20
    2824:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__prologue_saves__+0x18>
    2828:	69 83       	std	Y+1, r22	; 0x01
    282a:	7a 83       	std	Y+2, r23	; 0x02
    282c:	8b 83       	std	Y+3, r24	; 0x03
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	2d 83       	std	Y+5, r18	; 0x05
    2832:	3e 83       	std	Y+6, r19	; 0x06
    2834:	4f 83       	std	Y+7, r20	; 0x07
    2836:	58 87       	std	Y+8, r21	; 0x08
    2838:	89 e0       	ldi	r24, 0x09	; 9
    283a:	e8 2e       	mov	r14, r24
    283c:	f1 2c       	mov	r15, r1
    283e:	ec 0e       	add	r14, r28
    2840:	fd 1e       	adc	r15, r29
    2842:	ce 01       	movw	r24, r28
    2844:	01 96       	adiw	r24, 0x01	; 1
    2846:	b7 01       	movw	r22, r14
    2848:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    284c:	8e 01       	movw	r16, r28
    284e:	0f 5e       	subi	r16, 0xEF	; 239
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	ce 01       	movw	r24, r28
    2854:	05 96       	adiw	r24, 0x05	; 5
    2856:	b8 01       	movw	r22, r16
    2858:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	82 30       	cpi	r24, 0x02	; 2
    2860:	40 f0       	brcs	.+16     	; 0x2872 <__ltsf2+0x56>
    2862:	89 89       	ldd	r24, Y+17	; 0x11
    2864:	82 30       	cpi	r24, 0x02	; 2
    2866:	28 f0       	brcs	.+10     	; 0x2872 <__ltsf2+0x56>
    2868:	c7 01       	movw	r24, r14
    286a:	b8 01       	movw	r22, r16
    286c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__fpcmp_parts_f>
    2870:	01 c0       	rjmp	.+2      	; 0x2874 <__ltsf2+0x58>
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	68 96       	adiw	r28, 0x18	; 24
    2876:	e6 e0       	ldi	r30, 0x06	; 6
    2878:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__epilogue_restores__+0x18>

0000287c <__lesf2>:
    287c:	a8 e1       	ldi	r26, 0x18	; 24
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e4 e4       	ldi	r30, 0x44	; 68
    2882:	f4 e1       	ldi	r31, 0x14	; 20
    2884:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__prologue_saves__+0x18>
    2888:	69 83       	std	Y+1, r22	; 0x01
    288a:	7a 83       	std	Y+2, r23	; 0x02
    288c:	8b 83       	std	Y+3, r24	; 0x03
    288e:	9c 83       	std	Y+4, r25	; 0x04
    2890:	2d 83       	std	Y+5, r18	; 0x05
    2892:	3e 83       	std	Y+6, r19	; 0x06
    2894:	4f 83       	std	Y+7, r20	; 0x07
    2896:	58 87       	std	Y+8, r21	; 0x08
    2898:	89 e0       	ldi	r24, 0x09	; 9
    289a:	e8 2e       	mov	r14, r24
    289c:	f1 2c       	mov	r15, r1
    289e:	ec 0e       	add	r14, r28
    28a0:	fd 1e       	adc	r15, r29
    28a2:	ce 01       	movw	r24, r28
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	b7 01       	movw	r22, r14
    28a8:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    28ac:	8e 01       	movw	r16, r28
    28ae:	0f 5e       	subi	r16, 0xEF	; 239
    28b0:	1f 4f       	sbci	r17, 0xFF	; 255
    28b2:	ce 01       	movw	r24, r28
    28b4:	05 96       	adiw	r24, 0x05	; 5
    28b6:	b8 01       	movw	r22, r16
    28b8:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	40 f0       	brcs	.+16     	; 0x28d2 <__lesf2+0x56>
    28c2:	89 89       	ldd	r24, Y+17	; 0x11
    28c4:	82 30       	cpi	r24, 0x02	; 2
    28c6:	28 f0       	brcs	.+10     	; 0x28d2 <__lesf2+0x56>
    28c8:	c7 01       	movw	r24, r14
    28ca:	b8 01       	movw	r22, r16
    28cc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__fpcmp_parts_f>
    28d0:	01 c0       	rjmp	.+2      	; 0x28d4 <__lesf2+0x58>
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	68 96       	adiw	r28, 0x18	; 24
    28d6:	e6 e0       	ldi	r30, 0x06	; 6
    28d8:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__epilogue_restores__+0x18>

000028dc <__floatsisf>:
    28dc:	a8 e0       	ldi	r26, 0x08	; 8
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e4 e7       	ldi	r30, 0x74	; 116
    28e2:	f4 e1       	ldi	r31, 0x14	; 20
    28e4:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x12>
    28e8:	9b 01       	movw	r18, r22
    28ea:	ac 01       	movw	r20, r24
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	da 01       	movw	r26, r20
    28f2:	c9 01       	movw	r24, r18
    28f4:	88 27       	eor	r24, r24
    28f6:	b7 fd       	sbrc	r27, 7
    28f8:	83 95       	inc	r24
    28fa:	99 27       	eor	r25, r25
    28fc:	aa 27       	eor	r26, r26
    28fe:	bb 27       	eor	r27, r27
    2900:	b8 2e       	mov	r11, r24
    2902:	21 15       	cp	r18, r1
    2904:	31 05       	cpc	r19, r1
    2906:	41 05       	cpc	r20, r1
    2908:	51 05       	cpc	r21, r1
    290a:	19 f4       	brne	.+6      	; 0x2912 <__floatsisf+0x36>
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	3a c0       	rjmp	.+116    	; 0x2986 <__floatsisf+0xaa>
    2912:	88 23       	and	r24, r24
    2914:	a9 f0       	breq	.+42     	; 0x2940 <__floatsisf+0x64>
    2916:	20 30       	cpi	r18, 0x00	; 0
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	38 07       	cpc	r19, r24
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	48 07       	cpc	r20, r24
    2920:	80 e8       	ldi	r24, 0x80	; 128
    2922:	58 07       	cpc	r21, r24
    2924:	29 f4       	brne	.+10     	; 0x2930 <__floatsisf+0x54>
    2926:	60 e0       	ldi	r22, 0x00	; 0
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	9f ec       	ldi	r25, 0xCF	; 207
    292e:	30 c0       	rjmp	.+96     	; 0x2990 <__floatsisf+0xb4>
    2930:	ee 24       	eor	r14, r14
    2932:	ff 24       	eor	r15, r15
    2934:	87 01       	movw	r16, r14
    2936:	e2 1a       	sub	r14, r18
    2938:	f3 0a       	sbc	r15, r19
    293a:	04 0b       	sbc	r16, r20
    293c:	15 0b       	sbc	r17, r21
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <__floatsisf+0x68>
    2940:	79 01       	movw	r14, r18
    2942:	8a 01       	movw	r16, r20
    2944:	8e e1       	ldi	r24, 0x1E	; 30
    2946:	c8 2e       	mov	r12, r24
    2948:	d1 2c       	mov	r13, r1
    294a:	dc 82       	std	Y+4, r13	; 0x04
    294c:	cb 82       	std	Y+3, r12	; 0x03
    294e:	ed 82       	std	Y+5, r14	; 0x05
    2950:	fe 82       	std	Y+6, r15	; 0x06
    2952:	0f 83       	std	Y+7, r16	; 0x07
    2954:	18 87       	std	Y+8, r17	; 0x08
    2956:	c8 01       	movw	r24, r16
    2958:	b7 01       	movw	r22, r14
    295a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__clzsi2>
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	18 16       	cp	r1, r24
    2962:	19 06       	cpc	r1, r25
    2964:	84 f4       	brge	.+32     	; 0x2986 <__floatsisf+0xaa>
    2966:	08 2e       	mov	r0, r24
    2968:	04 c0       	rjmp	.+8      	; 0x2972 <__floatsisf+0x96>
    296a:	ee 0c       	add	r14, r14
    296c:	ff 1c       	adc	r15, r15
    296e:	00 1f       	adc	r16, r16
    2970:	11 1f       	adc	r17, r17
    2972:	0a 94       	dec	r0
    2974:	d2 f7       	brpl	.-12     	; 0x296a <__floatsisf+0x8e>
    2976:	ed 82       	std	Y+5, r14	; 0x05
    2978:	fe 82       	std	Y+6, r15	; 0x06
    297a:	0f 83       	std	Y+7, r16	; 0x07
    297c:	18 87       	std	Y+8, r17	; 0x08
    297e:	c8 1a       	sub	r12, r24
    2980:	d9 0a       	sbc	r13, r25
    2982:	dc 82       	std	Y+4, r13	; 0x04
    2984:	cb 82       	std	Y+3, r12	; 0x03
    2986:	ba 82       	std	Y+2, r11	; 0x02
    2988:	ce 01       	movw	r24, r28
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__pack_f>
    2990:	28 96       	adiw	r28, 0x08	; 8
    2992:	e9 e0       	ldi	r30, 0x09	; 9
    2994:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x12>

00002998 <__fixsfsi>:
    2998:	ac e0       	ldi	r26, 0x0C	; 12
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e2 ed       	ldi	r30, 0xD2	; 210
    299e:	f4 e1       	ldi	r31, 0x14	; 20
    29a0:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__prologue_saves__+0x20>
    29a4:	69 83       	std	Y+1, r22	; 0x01
    29a6:	7a 83       	std	Y+2, r23	; 0x02
    29a8:	8b 83       	std	Y+3, r24	; 0x03
    29aa:	9c 83       	std	Y+4, r25	; 0x04
    29ac:	ce 01       	movw	r24, r28
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	be 01       	movw	r22, r28
    29b2:	6b 5f       	subi	r22, 0xFB	; 251
    29b4:	7f 4f       	sbci	r23, 0xFF	; 255
    29b6:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__unpack_f>
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	82 30       	cpi	r24, 0x02	; 2
    29be:	61 f1       	breq	.+88     	; 0x2a18 <__fixsfsi+0x80>
    29c0:	82 30       	cpi	r24, 0x02	; 2
    29c2:	50 f1       	brcs	.+84     	; 0x2a18 <__fixsfsi+0x80>
    29c4:	84 30       	cpi	r24, 0x04	; 4
    29c6:	21 f4       	brne	.+8      	; 0x29d0 <__fixsfsi+0x38>
    29c8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ca:	88 23       	and	r24, r24
    29cc:	51 f1       	breq	.+84     	; 0x2a22 <__fixsfsi+0x8a>
    29ce:	2e c0       	rjmp	.+92     	; 0x2a2c <__fixsfsi+0x94>
    29d0:	2f 81       	ldd	r18, Y+7	; 0x07
    29d2:	38 85       	ldd	r19, Y+8	; 0x08
    29d4:	37 fd       	sbrc	r19, 7
    29d6:	20 c0       	rjmp	.+64     	; 0x2a18 <__fixsfsi+0x80>
    29d8:	6e 81       	ldd	r22, Y+6	; 0x06
    29da:	2f 31       	cpi	r18, 0x1F	; 31
    29dc:	31 05       	cpc	r19, r1
    29de:	1c f0       	brlt	.+6      	; 0x29e6 <__fixsfsi+0x4e>
    29e0:	66 23       	and	r22, r22
    29e2:	f9 f0       	breq	.+62     	; 0x2a22 <__fixsfsi+0x8a>
    29e4:	23 c0       	rjmp	.+70     	; 0x2a2c <__fixsfsi+0x94>
    29e6:	8e e1       	ldi	r24, 0x1E	; 30
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	82 1b       	sub	r24, r18
    29ec:	93 0b       	sbc	r25, r19
    29ee:	29 85       	ldd	r18, Y+9	; 0x09
    29f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    29f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    29f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    29f6:	04 c0       	rjmp	.+8      	; 0x2a00 <__fixsfsi+0x68>
    29f8:	56 95       	lsr	r21
    29fa:	47 95       	ror	r20
    29fc:	37 95       	ror	r19
    29fe:	27 95       	ror	r18
    2a00:	8a 95       	dec	r24
    2a02:	d2 f7       	brpl	.-12     	; 0x29f8 <__fixsfsi+0x60>
    2a04:	66 23       	and	r22, r22
    2a06:	b1 f0       	breq	.+44     	; 0x2a34 <__fixsfsi+0x9c>
    2a08:	50 95       	com	r21
    2a0a:	40 95       	com	r20
    2a0c:	30 95       	com	r19
    2a0e:	21 95       	neg	r18
    2a10:	3f 4f       	sbci	r19, 0xFF	; 255
    2a12:	4f 4f       	sbci	r20, 0xFF	; 255
    2a14:	5f 4f       	sbci	r21, 0xFF	; 255
    2a16:	0e c0       	rjmp	.+28     	; 0x2a34 <__fixsfsi+0x9c>
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	09 c0       	rjmp	.+18     	; 0x2a34 <__fixsfsi+0x9c>
    2a22:	2f ef       	ldi	r18, 0xFF	; 255
    2a24:	3f ef       	ldi	r19, 0xFF	; 255
    2a26:	4f ef       	ldi	r20, 0xFF	; 255
    2a28:	5f e7       	ldi	r21, 0x7F	; 127
    2a2a:	04 c0       	rjmp	.+8      	; 0x2a34 <__fixsfsi+0x9c>
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	50 e8       	ldi	r21, 0x80	; 128
    2a34:	b9 01       	movw	r22, r18
    2a36:	ca 01       	movw	r24, r20
    2a38:	2c 96       	adiw	r28, 0x0c	; 12
    2a3a:	e2 e0       	ldi	r30, 0x02	; 2
    2a3c:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__epilogue_restores__+0x20>

00002a40 <__floatunsisf>:
    2a40:	a8 e0       	ldi	r26, 0x08	; 8
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e6 e2       	ldi	r30, 0x26	; 38
    2a46:	f5 e1       	ldi	r31, 0x15	; 21
    2a48:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__prologue_saves__+0x10>
    2a4c:	7b 01       	movw	r14, r22
    2a4e:	8c 01       	movw	r16, r24
    2a50:	61 15       	cp	r22, r1
    2a52:	71 05       	cpc	r23, r1
    2a54:	81 05       	cpc	r24, r1
    2a56:	91 05       	cpc	r25, r1
    2a58:	19 f4       	brne	.+6      	; 0x2a60 <__floatunsisf+0x20>
    2a5a:	82 e0       	ldi	r24, 0x02	; 2
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	60 c0       	rjmp	.+192    	; 0x2b20 <__floatunsisf+0xe0>
    2a60:	83 e0       	ldi	r24, 0x03	; 3
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	8e e1       	ldi	r24, 0x1E	; 30
    2a66:	c8 2e       	mov	r12, r24
    2a68:	d1 2c       	mov	r13, r1
    2a6a:	dc 82       	std	Y+4, r13	; 0x04
    2a6c:	cb 82       	std	Y+3, r12	; 0x03
    2a6e:	ed 82       	std	Y+5, r14	; 0x05
    2a70:	fe 82       	std	Y+6, r15	; 0x06
    2a72:	0f 83       	std	Y+7, r16	; 0x07
    2a74:	18 87       	std	Y+8, r17	; 0x08
    2a76:	c8 01       	movw	r24, r16
    2a78:	b7 01       	movw	r22, r14
    2a7a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__clzsi2>
    2a7e:	fc 01       	movw	r30, r24
    2a80:	31 97       	sbiw	r30, 0x01	; 1
    2a82:	f7 ff       	sbrs	r31, 7
    2a84:	3b c0       	rjmp	.+118    	; 0x2afc <__floatunsisf+0xbc>
    2a86:	22 27       	eor	r18, r18
    2a88:	33 27       	eor	r19, r19
    2a8a:	2e 1b       	sub	r18, r30
    2a8c:	3f 0b       	sbc	r19, r31
    2a8e:	57 01       	movw	r10, r14
    2a90:	68 01       	movw	r12, r16
    2a92:	02 2e       	mov	r0, r18
    2a94:	04 c0       	rjmp	.+8      	; 0x2a9e <__floatunsisf+0x5e>
    2a96:	d6 94       	lsr	r13
    2a98:	c7 94       	ror	r12
    2a9a:	b7 94       	ror	r11
    2a9c:	a7 94       	ror	r10
    2a9e:	0a 94       	dec	r0
    2aa0:	d2 f7       	brpl	.-12     	; 0x2a96 <__floatunsisf+0x56>
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a0 e0       	ldi	r26, 0x00	; 0
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	04 c0       	rjmp	.+8      	; 0x2abc <__floatunsisf+0x7c>
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	aa 1f       	adc	r26, r26
    2aba:	bb 1f       	adc	r27, r27
    2abc:	2a 95       	dec	r18
    2abe:	d2 f7       	brpl	.-12     	; 0x2ab4 <__floatunsisf+0x74>
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	a1 09       	sbc	r26, r1
    2ac4:	b1 09       	sbc	r27, r1
    2ac6:	8e 21       	and	r24, r14
    2ac8:	9f 21       	and	r25, r15
    2aca:	a0 23       	and	r26, r16
    2acc:	b1 23       	and	r27, r17
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	a1 05       	cpc	r26, r1
    2ad2:	b1 05       	cpc	r27, r1
    2ad4:	21 f0       	breq	.+8      	; 0x2ade <__floatunsisf+0x9e>
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	4a 29       	or	r20, r10
    2ae0:	5b 29       	or	r21, r11
    2ae2:	6c 29       	or	r22, r12
    2ae4:	7d 29       	or	r23, r13
    2ae6:	4d 83       	std	Y+5, r20	; 0x05
    2ae8:	5e 83       	std	Y+6, r21	; 0x06
    2aea:	6f 83       	std	Y+7, r22	; 0x07
    2aec:	78 87       	std	Y+8, r23	; 0x08
    2aee:	8e e1       	ldi	r24, 0x1E	; 30
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	8e 1b       	sub	r24, r30
    2af4:	9f 0b       	sbc	r25, r31
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
    2afa:	12 c0       	rjmp	.+36     	; 0x2b20 <__floatunsisf+0xe0>
    2afc:	30 97       	sbiw	r30, 0x00	; 0
    2afe:	81 f0       	breq	.+32     	; 0x2b20 <__floatunsisf+0xe0>
    2b00:	0e 2e       	mov	r0, r30
    2b02:	04 c0       	rjmp	.+8      	; 0x2b0c <__floatunsisf+0xcc>
    2b04:	ee 0c       	add	r14, r14
    2b06:	ff 1c       	adc	r15, r15
    2b08:	00 1f       	adc	r16, r16
    2b0a:	11 1f       	adc	r17, r17
    2b0c:	0a 94       	dec	r0
    2b0e:	d2 f7       	brpl	.-12     	; 0x2b04 <__floatunsisf+0xc4>
    2b10:	ed 82       	std	Y+5, r14	; 0x05
    2b12:	fe 82       	std	Y+6, r15	; 0x06
    2b14:	0f 83       	std	Y+7, r16	; 0x07
    2b16:	18 87       	std	Y+8, r17	; 0x08
    2b18:	ce 1a       	sub	r12, r30
    2b1a:	df 0a       	sbc	r13, r31
    2b1c:	dc 82       	std	Y+4, r13	; 0x04
    2b1e:	cb 82       	std	Y+3, r12	; 0x03
    2b20:	1a 82       	std	Y+2, r1	; 0x02
    2b22:	ce 01       	movw	r24, r28
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__pack_f>
    2b2a:	28 96       	adiw	r28, 0x08	; 8
    2b2c:	ea e0       	ldi	r30, 0x0A	; 10
    2b2e:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__epilogue_restores__+0x10>

00002b32 <__clzsi2>:
    2b32:	ef 92       	push	r14
    2b34:	ff 92       	push	r15
    2b36:	0f 93       	push	r16
    2b38:	1f 93       	push	r17
    2b3a:	7b 01       	movw	r14, r22
    2b3c:	8c 01       	movw	r16, r24
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	e8 16       	cp	r14, r24
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	f8 06       	cpc	r15, r24
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	08 07       	cpc	r16, r24
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	18 07       	cpc	r17, r24
    2b4e:	88 f4       	brcc	.+34     	; 0x2b72 <__clzsi2+0x40>
    2b50:	8f ef       	ldi	r24, 0xFF	; 255
    2b52:	e8 16       	cp	r14, r24
    2b54:	f1 04       	cpc	r15, r1
    2b56:	01 05       	cpc	r16, r1
    2b58:	11 05       	cpc	r17, r1
    2b5a:	31 f0       	breq	.+12     	; 0x2b68 <__clzsi2+0x36>
    2b5c:	28 f0       	brcs	.+10     	; 0x2b68 <__clzsi2+0x36>
    2b5e:	88 e0       	ldi	r24, 0x08	; 8
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	a0 e0       	ldi	r26, 0x00	; 0
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	17 c0       	rjmp	.+46     	; 0x2b96 <__clzsi2+0x64>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 e0       	ldi	r26, 0x00	; 0
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	12 c0       	rjmp	.+36     	; 0x2b96 <__clzsi2+0x64>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	e8 16       	cp	r14, r24
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	f8 06       	cpc	r15, r24
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	08 07       	cpc	r16, r24
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	18 07       	cpc	r17, r24
    2b82:	28 f0       	brcs	.+10     	; 0x2b8e <__clzsi2+0x5c>
    2b84:	88 e1       	ldi	r24, 0x18	; 24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	a0 e0       	ldi	r26, 0x00	; 0
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <__clzsi2+0x64>
    2b8e:	80 e1       	ldi	r24, 0x10	; 16
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	a0 e0       	ldi	r26, 0x00	; 0
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	20 e2       	ldi	r18, 0x20	; 32
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	28 1b       	sub	r18, r24
    2ba0:	39 0b       	sbc	r19, r25
    2ba2:	4a 0b       	sbc	r20, r26
    2ba4:	5b 0b       	sbc	r21, r27
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <__clzsi2+0x7e>
    2ba8:	16 95       	lsr	r17
    2baa:	07 95       	ror	r16
    2bac:	f7 94       	ror	r15
    2bae:	e7 94       	ror	r14
    2bb0:	8a 95       	dec	r24
    2bb2:	d2 f7       	brpl	.-12     	; 0x2ba8 <__clzsi2+0x76>
    2bb4:	f7 01       	movw	r30, r14
    2bb6:	e8 5f       	subi	r30, 0xF8	; 248
    2bb8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bba:	80 81       	ld	r24, Z
    2bbc:	28 1b       	sub	r18, r24
    2bbe:	31 09       	sbc	r19, r1
    2bc0:	41 09       	sbc	r20, r1
    2bc2:	51 09       	sbc	r21, r1
    2bc4:	c9 01       	movw	r24, r18
    2bc6:	1f 91       	pop	r17
    2bc8:	0f 91       	pop	r16
    2bca:	ff 90       	pop	r15
    2bcc:	ef 90       	pop	r14
    2bce:	08 95       	ret

00002bd0 <__pack_f>:
    2bd0:	df 92       	push	r13
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e4 80       	ldd	r14, Z+4	; 0x04
    2bde:	f5 80       	ldd	r15, Z+5	; 0x05
    2be0:	06 81       	ldd	r16, Z+6	; 0x06
    2be2:	17 81       	ldd	r17, Z+7	; 0x07
    2be4:	d1 80       	ldd	r13, Z+1	; 0x01
    2be6:	80 81       	ld	r24, Z
    2be8:	82 30       	cpi	r24, 0x02	; 2
    2bea:	48 f4       	brcc	.+18     	; 0x2bfe <__pack_f+0x2e>
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e1       	ldi	r26, 0x10	; 16
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e8 2a       	or	r14, r24
    2bf6:	f9 2a       	or	r15, r25
    2bf8:	0a 2b       	or	r16, r26
    2bfa:	1b 2b       	or	r17, r27
    2bfc:	a5 c0       	rjmp	.+330    	; 0x2d48 <__pack_f+0x178>
    2bfe:	84 30       	cpi	r24, 0x04	; 4
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <__pack_f+0x34>
    2c02:	9f c0       	rjmp	.+318    	; 0x2d42 <__pack_f+0x172>
    2c04:	82 30       	cpi	r24, 0x02	; 2
    2c06:	21 f4       	brne	.+8      	; 0x2c10 <__pack_f+0x40>
    2c08:	ee 24       	eor	r14, r14
    2c0a:	ff 24       	eor	r15, r15
    2c0c:	87 01       	movw	r16, r14
    2c0e:	05 c0       	rjmp	.+10     	; 0x2c1a <__pack_f+0x4a>
    2c10:	e1 14       	cp	r14, r1
    2c12:	f1 04       	cpc	r15, r1
    2c14:	01 05       	cpc	r16, r1
    2c16:	11 05       	cpc	r17, r1
    2c18:	19 f4       	brne	.+6      	; 0x2c20 <__pack_f+0x50>
    2c1a:	e0 e0       	ldi	r30, 0x00	; 0
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	96 c0       	rjmp	.+300    	; 0x2d4c <__pack_f+0x17c>
    2c20:	62 81       	ldd	r22, Z+2	; 0x02
    2c22:	73 81       	ldd	r23, Z+3	; 0x03
    2c24:	9f ef       	ldi	r25, 0xFF	; 255
    2c26:	62 38       	cpi	r22, 0x82	; 130
    2c28:	79 07       	cpc	r23, r25
    2c2a:	0c f0       	brlt	.+2      	; 0x2c2e <__pack_f+0x5e>
    2c2c:	5b c0       	rjmp	.+182    	; 0x2ce4 <__pack_f+0x114>
    2c2e:	22 e8       	ldi	r18, 0x82	; 130
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	26 1b       	sub	r18, r22
    2c34:	37 0b       	sbc	r19, r23
    2c36:	2a 31       	cpi	r18, 0x1A	; 26
    2c38:	31 05       	cpc	r19, r1
    2c3a:	2c f0       	brlt	.+10     	; 0x2c46 <__pack_f+0x76>
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	50 e0       	ldi	r21, 0x00	; 0
    2c44:	2a c0       	rjmp	.+84     	; 0x2c9a <__pack_f+0xca>
    2c46:	b8 01       	movw	r22, r16
    2c48:	a7 01       	movw	r20, r14
    2c4a:	02 2e       	mov	r0, r18
    2c4c:	04 c0       	rjmp	.+8      	; 0x2c56 <__pack_f+0x86>
    2c4e:	76 95       	lsr	r23
    2c50:	67 95       	ror	r22
    2c52:	57 95       	ror	r21
    2c54:	47 95       	ror	r20
    2c56:	0a 94       	dec	r0
    2c58:	d2 f7       	brpl	.-12     	; 0x2c4e <__pack_f+0x7e>
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	a0 e0       	ldi	r26, 0x00	; 0
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	04 c0       	rjmp	.+8      	; 0x2c6c <__pack_f+0x9c>
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	aa 1f       	adc	r26, r26
    2c6a:	bb 1f       	adc	r27, r27
    2c6c:	2a 95       	dec	r18
    2c6e:	d2 f7       	brpl	.-12     	; 0x2c64 <__pack_f+0x94>
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	a1 09       	sbc	r26, r1
    2c74:	b1 09       	sbc	r27, r1
    2c76:	8e 21       	and	r24, r14
    2c78:	9f 21       	and	r25, r15
    2c7a:	a0 23       	and	r26, r16
    2c7c:	b1 23       	and	r27, r17
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	a1 05       	cpc	r26, r1
    2c82:	b1 05       	cpc	r27, r1
    2c84:	21 f0       	breq	.+8      	; 0x2c8e <__pack_f+0xbe>
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	a0 e0       	ldi	r26, 0x00	; 0
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	9a 01       	movw	r18, r20
    2c90:	ab 01       	movw	r20, r22
    2c92:	28 2b       	or	r18, r24
    2c94:	39 2b       	or	r19, r25
    2c96:	4a 2b       	or	r20, r26
    2c98:	5b 2b       	or	r21, r27
    2c9a:	da 01       	movw	r26, r20
    2c9c:	c9 01       	movw	r24, r18
    2c9e:	8f 77       	andi	r24, 0x7F	; 127
    2ca0:	90 70       	andi	r25, 0x00	; 0
    2ca2:	a0 70       	andi	r26, 0x00	; 0
    2ca4:	b0 70       	andi	r27, 0x00	; 0
    2ca6:	80 34       	cpi	r24, 0x40	; 64
    2ca8:	91 05       	cpc	r25, r1
    2caa:	a1 05       	cpc	r26, r1
    2cac:	b1 05       	cpc	r27, r1
    2cae:	39 f4       	brne	.+14     	; 0x2cbe <__pack_f+0xee>
    2cb0:	27 ff       	sbrs	r18, 7
    2cb2:	09 c0       	rjmp	.+18     	; 0x2cc6 <__pack_f+0xf6>
    2cb4:	20 5c       	subi	r18, 0xC0	; 192
    2cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cba:	5f 4f       	sbci	r21, 0xFF	; 255
    2cbc:	04 c0       	rjmp	.+8      	; 0x2cc6 <__pack_f+0xf6>
    2cbe:	21 5c       	subi	r18, 0xC1	; 193
    2cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc2:	4f 4f       	sbci	r20, 0xFF	; 255
    2cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc6:	e0 e0       	ldi	r30, 0x00	; 0
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	20 30       	cpi	r18, 0x00	; 0
    2ccc:	a0 e0       	ldi	r26, 0x00	; 0
    2cce:	3a 07       	cpc	r19, r26
    2cd0:	a0 e0       	ldi	r26, 0x00	; 0
    2cd2:	4a 07       	cpc	r20, r26
    2cd4:	a0 e4       	ldi	r26, 0x40	; 64
    2cd6:	5a 07       	cpc	r21, r26
    2cd8:	10 f0       	brcs	.+4      	; 0x2cde <__pack_f+0x10e>
    2cda:	e1 e0       	ldi	r30, 0x01	; 1
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	79 01       	movw	r14, r18
    2ce0:	8a 01       	movw	r16, r20
    2ce2:	27 c0       	rjmp	.+78     	; 0x2d32 <__pack_f+0x162>
    2ce4:	60 38       	cpi	r22, 0x80	; 128
    2ce6:	71 05       	cpc	r23, r1
    2ce8:	64 f5       	brge	.+88     	; 0x2d42 <__pack_f+0x172>
    2cea:	fb 01       	movw	r30, r22
    2cec:	e1 58       	subi	r30, 0x81	; 129
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	d8 01       	movw	r26, r16
    2cf2:	c7 01       	movw	r24, r14
    2cf4:	8f 77       	andi	r24, 0x7F	; 127
    2cf6:	90 70       	andi	r25, 0x00	; 0
    2cf8:	a0 70       	andi	r26, 0x00	; 0
    2cfa:	b0 70       	andi	r27, 0x00	; 0
    2cfc:	80 34       	cpi	r24, 0x40	; 64
    2cfe:	91 05       	cpc	r25, r1
    2d00:	a1 05       	cpc	r26, r1
    2d02:	b1 05       	cpc	r27, r1
    2d04:	39 f4       	brne	.+14     	; 0x2d14 <__pack_f+0x144>
    2d06:	e7 fe       	sbrs	r14, 7
    2d08:	0d c0       	rjmp	.+26     	; 0x2d24 <__pack_f+0x154>
    2d0a:	80 e4       	ldi	r24, 0x40	; 64
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a0 e0       	ldi	r26, 0x00	; 0
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	04 c0       	rjmp	.+8      	; 0x2d1c <__pack_f+0x14c>
    2d14:	8f e3       	ldi	r24, 0x3F	; 63
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	a0 e0       	ldi	r26, 0x00	; 0
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e8 0e       	add	r14, r24
    2d1e:	f9 1e       	adc	r15, r25
    2d20:	0a 1f       	adc	r16, r26
    2d22:	1b 1f       	adc	r17, r27
    2d24:	17 ff       	sbrs	r17, 7
    2d26:	05 c0       	rjmp	.+10     	; 0x2d32 <__pack_f+0x162>
    2d28:	16 95       	lsr	r17
    2d2a:	07 95       	ror	r16
    2d2c:	f7 94       	ror	r15
    2d2e:	e7 94       	ror	r14
    2d30:	31 96       	adiw	r30, 0x01	; 1
    2d32:	87 e0       	ldi	r24, 0x07	; 7
    2d34:	16 95       	lsr	r17
    2d36:	07 95       	ror	r16
    2d38:	f7 94       	ror	r15
    2d3a:	e7 94       	ror	r14
    2d3c:	8a 95       	dec	r24
    2d3e:	d1 f7       	brne	.-12     	; 0x2d34 <__pack_f+0x164>
    2d40:	05 c0       	rjmp	.+10     	; 0x2d4c <__pack_f+0x17c>
    2d42:	ee 24       	eor	r14, r14
    2d44:	ff 24       	eor	r15, r15
    2d46:	87 01       	movw	r16, r14
    2d48:	ef ef       	ldi	r30, 0xFF	; 255
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	6e 2f       	mov	r22, r30
    2d4e:	67 95       	ror	r22
    2d50:	66 27       	eor	r22, r22
    2d52:	67 95       	ror	r22
    2d54:	90 2f       	mov	r25, r16
    2d56:	9f 77       	andi	r25, 0x7F	; 127
    2d58:	d7 94       	ror	r13
    2d5a:	dd 24       	eor	r13, r13
    2d5c:	d7 94       	ror	r13
    2d5e:	8e 2f       	mov	r24, r30
    2d60:	86 95       	lsr	r24
    2d62:	49 2f       	mov	r20, r25
    2d64:	46 2b       	or	r20, r22
    2d66:	58 2f       	mov	r21, r24
    2d68:	5d 29       	or	r21, r13
    2d6a:	b7 01       	movw	r22, r14
    2d6c:	ca 01       	movw	r24, r20
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	df 90       	pop	r13
    2d78:	08 95       	ret

00002d7a <__unpack_f>:
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	db 01       	movw	r26, r22
    2d7e:	40 81       	ld	r20, Z
    2d80:	51 81       	ldd	r21, Z+1	; 0x01
    2d82:	22 81       	ldd	r18, Z+2	; 0x02
    2d84:	62 2f       	mov	r22, r18
    2d86:	6f 77       	andi	r22, 0x7F	; 127
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	22 1f       	adc	r18, r18
    2d8c:	22 27       	eor	r18, r18
    2d8e:	22 1f       	adc	r18, r18
    2d90:	93 81       	ldd	r25, Z+3	; 0x03
    2d92:	89 2f       	mov	r24, r25
    2d94:	88 0f       	add	r24, r24
    2d96:	82 2b       	or	r24, r18
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	99 27       	eor	r25, r25
    2da0:	99 1f       	adc	r25, r25
    2da2:	11 96       	adiw	r26, 0x01	; 1
    2da4:	9c 93       	st	X, r25
    2da6:	11 97       	sbiw	r26, 0x01	; 1
    2da8:	21 15       	cp	r18, r1
    2daa:	31 05       	cpc	r19, r1
    2dac:	a9 f5       	brne	.+106    	; 0x2e18 <__unpack_f+0x9e>
    2dae:	41 15       	cp	r20, r1
    2db0:	51 05       	cpc	r21, r1
    2db2:	61 05       	cpc	r22, r1
    2db4:	71 05       	cpc	r23, r1
    2db6:	11 f4       	brne	.+4      	; 0x2dbc <__unpack_f+0x42>
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	37 c0       	rjmp	.+110    	; 0x2e2a <__unpack_f+0xb0>
    2dbc:	82 e8       	ldi	r24, 0x82	; 130
    2dbe:	9f ef       	ldi	r25, 0xFF	; 255
    2dc0:	13 96       	adiw	r26, 0x03	; 3
    2dc2:	9c 93       	st	X, r25
    2dc4:	8e 93       	st	-X, r24
    2dc6:	12 97       	sbiw	r26, 0x02	; 2
    2dc8:	9a 01       	movw	r18, r20
    2dca:	ab 01       	movw	r20, r22
    2dcc:	67 e0       	ldi	r22, 0x07	; 7
    2dce:	22 0f       	add	r18, r18
    2dd0:	33 1f       	adc	r19, r19
    2dd2:	44 1f       	adc	r20, r20
    2dd4:	55 1f       	adc	r21, r21
    2dd6:	6a 95       	dec	r22
    2dd8:	d1 f7       	brne	.-12     	; 0x2dce <__unpack_f+0x54>
    2dda:	83 e0       	ldi	r24, 0x03	; 3
    2ddc:	8c 93       	st	X, r24
    2dde:	0d c0       	rjmp	.+26     	; 0x2dfa <__unpack_f+0x80>
    2de0:	22 0f       	add	r18, r18
    2de2:	33 1f       	adc	r19, r19
    2de4:	44 1f       	adc	r20, r20
    2de6:	55 1f       	adc	r21, r21
    2de8:	12 96       	adiw	r26, 0x02	; 2
    2dea:	8d 91       	ld	r24, X+
    2dec:	9c 91       	ld	r25, X
    2dee:	13 97       	sbiw	r26, 0x03	; 3
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	13 96       	adiw	r26, 0x03	; 3
    2df4:	9c 93       	st	X, r25
    2df6:	8e 93       	st	-X, r24
    2df8:	12 97       	sbiw	r26, 0x02	; 2
    2dfa:	20 30       	cpi	r18, 0x00	; 0
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	38 07       	cpc	r19, r24
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	48 07       	cpc	r20, r24
    2e04:	80 e4       	ldi	r24, 0x40	; 64
    2e06:	58 07       	cpc	r21, r24
    2e08:	58 f3       	brcs	.-42     	; 0x2de0 <__unpack_f+0x66>
    2e0a:	14 96       	adiw	r26, 0x04	; 4
    2e0c:	2d 93       	st	X+, r18
    2e0e:	3d 93       	st	X+, r19
    2e10:	4d 93       	st	X+, r20
    2e12:	5c 93       	st	X, r21
    2e14:	17 97       	sbiw	r26, 0x07	; 7
    2e16:	08 95       	ret
    2e18:	2f 3f       	cpi	r18, 0xFF	; 255
    2e1a:	31 05       	cpc	r19, r1
    2e1c:	79 f4       	brne	.+30     	; 0x2e3c <__unpack_f+0xc2>
    2e1e:	41 15       	cp	r20, r1
    2e20:	51 05       	cpc	r21, r1
    2e22:	61 05       	cpc	r22, r1
    2e24:	71 05       	cpc	r23, r1
    2e26:	19 f4       	brne	.+6      	; 0x2e2e <__unpack_f+0xb4>
    2e28:	84 e0       	ldi	r24, 0x04	; 4
    2e2a:	8c 93       	st	X, r24
    2e2c:	08 95       	ret
    2e2e:	64 ff       	sbrs	r22, 4
    2e30:	03 c0       	rjmp	.+6      	; 0x2e38 <__unpack_f+0xbe>
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	8c 93       	st	X, r24
    2e36:	12 c0       	rjmp	.+36     	; 0x2e5c <__unpack_f+0xe2>
    2e38:	1c 92       	st	X, r1
    2e3a:	10 c0       	rjmp	.+32     	; 0x2e5c <__unpack_f+0xe2>
    2e3c:	2f 57       	subi	r18, 0x7F	; 127
    2e3e:	30 40       	sbci	r19, 0x00	; 0
    2e40:	13 96       	adiw	r26, 0x03	; 3
    2e42:	3c 93       	st	X, r19
    2e44:	2e 93       	st	-X, r18
    2e46:	12 97       	sbiw	r26, 0x02	; 2
    2e48:	83 e0       	ldi	r24, 0x03	; 3
    2e4a:	8c 93       	st	X, r24
    2e4c:	87 e0       	ldi	r24, 0x07	; 7
    2e4e:	44 0f       	add	r20, r20
    2e50:	55 1f       	adc	r21, r21
    2e52:	66 1f       	adc	r22, r22
    2e54:	77 1f       	adc	r23, r23
    2e56:	8a 95       	dec	r24
    2e58:	d1 f7       	brne	.-12     	; 0x2e4e <__unpack_f+0xd4>
    2e5a:	70 64       	ori	r23, 0x40	; 64
    2e5c:	14 96       	adiw	r26, 0x04	; 4
    2e5e:	4d 93       	st	X+, r20
    2e60:	5d 93       	st	X+, r21
    2e62:	6d 93       	st	X+, r22
    2e64:	7c 93       	st	X, r23
    2e66:	17 97       	sbiw	r26, 0x07	; 7
    2e68:	08 95       	ret

00002e6a <__fpcmp_parts_f>:
    2e6a:	1f 93       	push	r17
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	fb 01       	movw	r30, r22
    2e70:	9c 91       	ld	r25, X
    2e72:	92 30       	cpi	r25, 0x02	; 2
    2e74:	08 f4       	brcc	.+2      	; 0x2e78 <__fpcmp_parts_f+0xe>
    2e76:	47 c0       	rjmp	.+142    	; 0x2f06 <__fpcmp_parts_f+0x9c>
    2e78:	80 81       	ld	r24, Z
    2e7a:	82 30       	cpi	r24, 0x02	; 2
    2e7c:	08 f4       	brcc	.+2      	; 0x2e80 <__fpcmp_parts_f+0x16>
    2e7e:	43 c0       	rjmp	.+134    	; 0x2f06 <__fpcmp_parts_f+0x9c>
    2e80:	94 30       	cpi	r25, 0x04	; 4
    2e82:	51 f4       	brne	.+20     	; 0x2e98 <__fpcmp_parts_f+0x2e>
    2e84:	11 96       	adiw	r26, 0x01	; 1
    2e86:	1c 91       	ld	r17, X
    2e88:	84 30       	cpi	r24, 0x04	; 4
    2e8a:	99 f5       	brne	.+102    	; 0x2ef2 <__fpcmp_parts_f+0x88>
    2e8c:	81 81       	ldd	r24, Z+1	; 0x01
    2e8e:	68 2f       	mov	r22, r24
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	61 1b       	sub	r22, r17
    2e94:	71 09       	sbc	r23, r1
    2e96:	3f c0       	rjmp	.+126    	; 0x2f16 <__fpcmp_parts_f+0xac>
    2e98:	84 30       	cpi	r24, 0x04	; 4
    2e9a:	21 f0       	breq	.+8      	; 0x2ea4 <__fpcmp_parts_f+0x3a>
    2e9c:	92 30       	cpi	r25, 0x02	; 2
    2e9e:	31 f4       	brne	.+12     	; 0x2eac <__fpcmp_parts_f+0x42>
    2ea0:	82 30       	cpi	r24, 0x02	; 2
    2ea2:	b9 f1       	breq	.+110    	; 0x2f12 <__fpcmp_parts_f+0xa8>
    2ea4:	81 81       	ldd	r24, Z+1	; 0x01
    2ea6:	88 23       	and	r24, r24
    2ea8:	89 f1       	breq	.+98     	; 0x2f0c <__fpcmp_parts_f+0xa2>
    2eaa:	2d c0       	rjmp	.+90     	; 0x2f06 <__fpcmp_parts_f+0x9c>
    2eac:	11 96       	adiw	r26, 0x01	; 1
    2eae:	1c 91       	ld	r17, X
    2eb0:	11 97       	sbiw	r26, 0x01	; 1
    2eb2:	82 30       	cpi	r24, 0x02	; 2
    2eb4:	f1 f0       	breq	.+60     	; 0x2ef2 <__fpcmp_parts_f+0x88>
    2eb6:	81 81       	ldd	r24, Z+1	; 0x01
    2eb8:	18 17       	cp	r17, r24
    2eba:	d9 f4       	brne	.+54     	; 0x2ef2 <__fpcmp_parts_f+0x88>
    2ebc:	12 96       	adiw	r26, 0x02	; 2
    2ebe:	2d 91       	ld	r18, X+
    2ec0:	3c 91       	ld	r19, X
    2ec2:	13 97       	sbiw	r26, 0x03	; 3
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	82 17       	cp	r24, r18
    2eca:	93 07       	cpc	r25, r19
    2ecc:	94 f0       	brlt	.+36     	; 0x2ef2 <__fpcmp_parts_f+0x88>
    2ece:	28 17       	cp	r18, r24
    2ed0:	39 07       	cpc	r19, r25
    2ed2:	bc f0       	brlt	.+46     	; 0x2f02 <__fpcmp_parts_f+0x98>
    2ed4:	14 96       	adiw	r26, 0x04	; 4
    2ed6:	8d 91       	ld	r24, X+
    2ed8:	9d 91       	ld	r25, X+
    2eda:	0d 90       	ld	r0, X+
    2edc:	bc 91       	ld	r27, X
    2ede:	a0 2d       	mov	r26, r0
    2ee0:	24 81       	ldd	r18, Z+4	; 0x04
    2ee2:	35 81       	ldd	r19, Z+5	; 0x05
    2ee4:	46 81       	ldd	r20, Z+6	; 0x06
    2ee6:	57 81       	ldd	r21, Z+7	; 0x07
    2ee8:	28 17       	cp	r18, r24
    2eea:	39 07       	cpc	r19, r25
    2eec:	4a 07       	cpc	r20, r26
    2eee:	5b 07       	cpc	r21, r27
    2ef0:	18 f4       	brcc	.+6      	; 0x2ef8 <__fpcmp_parts_f+0x8e>
    2ef2:	11 23       	and	r17, r17
    2ef4:	41 f0       	breq	.+16     	; 0x2f06 <__fpcmp_parts_f+0x9c>
    2ef6:	0a c0       	rjmp	.+20     	; 0x2f0c <__fpcmp_parts_f+0xa2>
    2ef8:	82 17       	cp	r24, r18
    2efa:	93 07       	cpc	r25, r19
    2efc:	a4 07       	cpc	r26, r20
    2efe:	b5 07       	cpc	r27, r21
    2f00:	40 f4       	brcc	.+16     	; 0x2f12 <__fpcmp_parts_f+0xa8>
    2f02:	11 23       	and	r17, r17
    2f04:	19 f0       	breq	.+6      	; 0x2f0c <__fpcmp_parts_f+0xa2>
    2f06:	61 e0       	ldi	r22, 0x01	; 1
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	05 c0       	rjmp	.+10     	; 0x2f16 <__fpcmp_parts_f+0xac>
    2f0c:	6f ef       	ldi	r22, 0xFF	; 255
    2f0e:	7f ef       	ldi	r23, 0xFF	; 255
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <__fpcmp_parts_f+0xac>
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	cb 01       	movw	r24, r22
    2f18:	1f 91       	pop	r17
    2f1a:	08 95       	ret

00002f1c <__prologue_saves__>:
    2f1c:	2f 92       	push	r2
    2f1e:	3f 92       	push	r3
    2f20:	4f 92       	push	r4
    2f22:	5f 92       	push	r5
    2f24:	6f 92       	push	r6
    2f26:	7f 92       	push	r7
    2f28:	8f 92       	push	r8
    2f2a:	9f 92       	push	r9
    2f2c:	af 92       	push	r10
    2f2e:	bf 92       	push	r11
    2f30:	cf 92       	push	r12
    2f32:	df 92       	push	r13
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	ca 1b       	sub	r28, r26
    2f46:	db 0b       	sbc	r29, r27
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	19 94       	eijmp

00002f54 <__epilogue_restores__>:
    2f54:	2a 88       	ldd	r2, Y+18	; 0x12
    2f56:	39 88       	ldd	r3, Y+17	; 0x11
    2f58:	48 88       	ldd	r4, Y+16	; 0x10
    2f5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f66:	b9 84       	ldd	r11, Y+9	; 0x09
    2f68:	c8 84       	ldd	r12, Y+8	; 0x08
    2f6a:	df 80       	ldd	r13, Y+7	; 0x07
    2f6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f70:	0c 81       	ldd	r16, Y+4	; 0x04
    2f72:	1b 81       	ldd	r17, Y+3	; 0x03
    2f74:	aa 81       	ldd	r26, Y+2	; 0x02
    2f76:	b9 81       	ldd	r27, Y+1	; 0x01
    2f78:	ce 0f       	add	r28, r30
    2f7a:	d1 1d       	adc	r29, r1
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	ed 01       	movw	r28, r26
    2f88:	08 95       	ret

00002f8a <_exit>:
    2f8a:	f8 94       	cli

00002f8c <__stop_program>:
    2f8c:	ff cf       	rjmp	.-2      	; 0x2f8c <__stop_program>
